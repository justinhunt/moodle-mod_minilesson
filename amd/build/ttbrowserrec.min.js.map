{"version":3,"file":"ttbrowserrec.min.js","sources":["../src/ttbrowserrec.js"],"sourcesContent":["/* jshint ignore:start */\ndefine(['jquery', 'core/log'], function ($, log) {\n\n    \"use strict\"; // jshint ;_;\n\n    log.debug('mod_minilesson browser speech rec: initialising');\n\n    return {\n\n        recognition: null,\n        recognizing: false,\n        final_transcript: '',\n        interim_transcript: '',\n        start_timestamp: 0,\n        lang: 'en-US',\n        interval: 0,\n        browsertype: '',\n\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n        will_work_ok: function(opts){\n            //let's check if we are in an iframe\n            var is_iframe = false;\n            if (window.self !== window.top) {\n                is_iframe = true;\n            }\n\n            //for now assume molbileapp = iframe\n            var is_mobileapp = is_iframe;\n\n            //Brave looks like it does speech rec, but it doesn't\n            var brave = typeof navigator.brave !== 'undefined';\n            if(brave){\n                this.browsertype = 'brave';\n            }\n\n            //Edge may or may not work, but its hard to tell from the browser agent\n            var edge = navigator.userAgent.toLowerCase().indexOf(\"edg/\") > -1;\n           if(edge && this.browsertype === ''){\n               this.browsertype = 'edge';\n           }\n\n            //Safari may or may not work, but its hard to tell from the browser agent\n            var has_chrome = navigator.userAgent.indexOf('Chrome') > -1;\n            var has_safari = navigator.userAgent.indexOf(\"Safari\") > -1;\n            var safari = has_safari && !has_chrome;\n            if(safari && this.browsertype === ''){\n                this.browsertype = 'safari';\n            }\n\n            //This is feature detection, and for chrome it can be trusted.\n            var hasspeechrec = ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window);\n            if(hasspeechrec && this.browsertype === '' && has_chrome){\n                this.browsertype = 'chrome';\n            }\n\n            //This is feature detection, and for chrome it can be trusted.\n            // The others might say they do speech rec, but that does not mean it works\n            // we know safari in webapp does not so we nix that here\n            if(is_mobileapp && this.browsertype === 'safari') {\n                return false;\n            } else if(this.browsertype === 'brave'){\n                return false;\n            } else {\n                return hasspeechrec;\n            }\n        },\n\n        init: function (lang,waveheight,uniqueid) {\n            var SpeechRecognition = SpeechRecognition || webkitSpeechRecognition;\n            this.recognition = new SpeechRecognition();\n            this.recognition.continuous = true;\n            this.recognition.interimResults = true;\n            this.lang = lang;\n            this.waveHeight = waveheight;\n            this.uniqueid = uniqueid;\n            this.prepare_html();\n            this.register_events();\n        },\n\n        prepare_html: function(){\n            this.canvas =$('#' + this.uniqueid + \"_waveform\");\n            this.canvasCtx = this.canvas[0].getContext(\"2d\");\n        },\n\n        set_grammar: function (grammar) {\n            var SpeechGrammarList = SpeechGrammarList || webkitSpeechGrammarList;\n            if (SpeechGrammarList) {\n                var speechRecognitionList = new SpeechGrammarList();\n                speechRecognitionList.addFromString(grammar, 1);\n                this.recognition.grammars = speechRecognitionList;\n            }\n        },\n\n        start: function () {\n            var that =this;\n\n            //If we already started ignore this\n            if (this.recognizing) {\n                return;\n            }\n            this.recognizing = true;\n            this.final_transcript = '';\n            this.interim_transcript = '';\n            this.recognition.lang = this.lang;//select_dialect.value;\n            this.recognition.start();\n            this.start_timestamp = Date.now();//event.timeStamp;\n            that.onstart();\n\n\n            //kick off animation\n            that.interval = setInterval(function() {\n                that.drawWave();\n            }, 100);\n        },\n\n        stop: function () {\n            var that=this;\n            this.recognizing = false;\n            this.recognition.stop();\n            clearInterval(this.interval);\n            this.canvasCtx.clearRect(0, 0, this.canvas.width()*2, this.waveHeight * 2);\n            setTimeout(function() {\n                that.onfinalspeechcapture(that.final_transcript);\n            }, 1000);\n            this.onend();\n        },\n\n        register_events: function () {\n\n            var recognition = this.recognition;\n            var that = this;\n\n            recognition.onerror = function (event) {\n                if (event.error == 'no-speech') {\n                    log.debug('info_no_speech');\n                }\n                if (event.error == 'audio-capture') {\n                    log.debug('info_no_microphone');\n                }\n                if (event.error == 'not-allowed') {\n                    if (event.timeStamp - that.start_timestamp < 100) {\n                        log.debug('info_blocked');\n                    } else {\n                        log.debug('info_denied');\n                    }\n                }\n                that.onerror({error: {name: event.error}});\n            };\n\n            recognition.onend = function () {\n                if(that.recognizing){\n                    that.recognition.start();\n                }\n\n            };\n\n            recognition.onresult = function (event) {\n                for (var i = event.resultIndex; i < event.results.length; ++i) {\n                    if (event.results[i].isFinal) {\n                        that.final_transcript += event.results[i][0].transcript;\n                    } else {\n                        var provisional_transcript = that.final_transcript + event.results[i][0].transcript;\n                        //the interim and final events do not arrive in sequence, we dont want the length going down, its weird\n                        //so just dont respond when the sequence is wonky\n                        if(provisional_transcript.length < that.interim_transcript.length){\n                            return;\n                        }else{\n                            that.interim_transcript = provisional_transcript;\n                        }\n                        that.oninterimspeechcapture(that.interim_transcript);\n                    }\n                }\n\n            };\n        },//end of register events\n\n        drawWave: function() {\n\n            var width = this.canvas.width() * 2;\n            var bufferLength=4096;\n\n            this.canvasCtx.fillStyle = 'white';\n            this.canvasCtx.fillRect(0, 0, width, this.waveHeight*2);\n\n            this.canvasCtx.lineWidth = 5;\n            this.canvasCtx.strokeStyle = 'gray';\n            this.canvasCtx.beginPath();\n\n            var slicewaveWidth = width / bufferLength;\n            var x = 0;\n\n            for (var i = 0; i < bufferLength; i++) {\n\n                var v = ((Math.random() * 64) + 96) / 128.0;\n                var y = v * this.waveHeight;\n\n                if (i === 0) {\n                    // this.canvasCtx.moveTo(x, y);\n                } else {\n                    this.canvasCtx.lineTo(x, y);\n                }\n                x += slicewaveWidth;\n            }\n\n            this.canvasCtx.lineTo(width, this.waveHeight);\n            this.canvasCtx.stroke();\n\n        },\n\n        onstart: function () {\n            log.debug('started');\n        },\n        onerror: function () {\n            log.debug('error');\n        },\n        onend: function () {\n            log.debug('end');\n        },\n        onfinalspeechcapture: function (speechtext) {\n            log.debug(speechtext);\n        },\n        oninterimspeechcapture: function (speechtext) {\n            // log.debug(speechtext);\n        }\n\n    };//end of returned object\n});//total end\n"],"names":["define","$","log","debug","recognition","recognizing","final_transcript","interim_transcript","start_timestamp","lang","interval","browsertype","clone","extend","this","will_work_ok","opts","is_iframe","window","self","top","is_mobileapp","navigator","brave","userAgent","toLowerCase","indexOf","has_chrome","hasspeechrec","init","waveheight","uniqueid","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","waveHeight","prepare_html","register_events","canvas","canvasCtx","getContext","set_grammar","grammar","SpeechGrammarList","webkitSpeechGrammarList","speechRecognitionList","addFromString","grammars","start","that","Date","now","onstart","setInterval","drawWave","stop","clearInterval","clearRect","width","setTimeout","onfinalspeechcapture","onend","onerror","event","error","timeStamp","name","onresult","i","resultIndex","results","length","isFinal","transcript","provisional_transcript","oninterimspeechcapture","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","slicewaveWidth","x","y","Math","random","lineTo","stroke","speechtext"],"mappings":"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"}