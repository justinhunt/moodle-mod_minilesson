{"version":3,"file":"sthelper.min.js","sources":["../src/sthelper.js"],"sourcesContent":["define(['jquery',\n    'core/log',\n    'core/ajax',\n    'mod_minilesson/definitions',\n    'mod_minilesson/pollyhelper',\n    'mod_minilesson/ttrecorder',\n    'mod_minilesson/animatecss',\n], function($,  log, Ajax, def, polly, ttrecorder, anim) {\n  \"use strict\"; // jshint ;_;\n\n  /*\n  This is for the speech test helper\n   */\n\n  log.debug('MiniLesson Speech Test Helper: initialising');\n\nvar app = {\n    passmark: 90,\n    pointer: 1,\n    jsondata: null,\n    props: null,\n    dryRun: false,\n    language: 'en-US',\n    terms: [],\n    phonetics: [],\n    displayterms: [],\n    results: [],\n    controls: {},\n    ttrec: null, //a handle on the tt recorder\n\n\n    init: function(props) {\n      var dd = this;\n\n      //pick up opts from html\n      var theid='#amdopts_' + props.widgetid;\n      var configcontrol = $(theid).get(0);\n      if(configcontrol){\n        dd.activitydata = JSON.parse(configcontrol.value);\n        $(theid).remove();\n      }else{\n        //if there is no config we might as well give up\n        log.debug('MiniLesson Speech Test helper: No config found on page. Giving up.');\n        return;\n      }\n\n          this.init_polly();\n          this.init_controls();\n          this.initComponents();\n          this.register_events();\n    },\n    init_polly: function() {\n        //get the polly token\n        var pollytoken = this.activitydata.token;\n        var pollyregion = this.activitydata.region;\n        var pollycloudpoodllurl = this.activitydata.cloudpoodllurl;\n        var pollyowner = 'poodll';\n        polly.init(pollytoken, pollyregion, pollyowner, pollycloudpoodllurl);\n        log.debug('polly initialised');\n    },\n\n    init_controls: function() {\n            log.debug('sthelper init controls');\n          app.controls = {};\n          app.controls.pollybutton = $(\"#speechtester_pollybutton\");\n          app.controls.pollyvoice = $(\"#speechtester_voice\");\n          app.controls.pollylanguage = $(\"#speechtester_language\");\n          app.controls.pollytext = $(\"#speechtester_text\");\n          app.controls.audioplayer = $(\"#speechtester_audioplayer\");\n          app.controls.transcribebutton = $(\"#speechtester_transcribebutton\");\n          app.controls.transcription = $(\"#speechtester_transcription\");\n          app.controls.transcriptioncoverage = $(\"#speechtester_transcription_coverage\");\n          app.controls.stt_guided = $(\"#speechtester_stt_guided\");\n          app.controls.forcestreaming = $(\"#speechtester_forcestreaming\");\n          app.controls.recorder = $(\"#uniqueidforspeechtester_recorderdiv\");\n    },\n\n        register_events: function() {\n            log.debug('sthelper register events');\n\n            //polly button\n          app.controls.pollybutton.on('click',function() {\n              log.debug('pollybutton clicked');\n              log.debug(app.controls.pollytext.val());\n              log.debug(app.controls.pollyvoice.val());\n                polly.fetch_polly_url(app.controls.pollytext.val(),'text', app.controls.pollyvoice.val()).then(function(audiourl) {\n                    app.controls.audioplayer.attr('src',audiourl);\n                    log.debug(audiourl);\n                });\n          });\n          //transcribe button\n            app.controls.transcribebutton.on('click',function() {\n                log.debug('transcribebutton clicked');\n                log.debug(app.controls.audioplayer.attr('src'));\n                app.downloadAndSubmitMP3(app.controls.audioplayer.attr('src'),app.doTranscribe);\n            });\n        },\n\n\n    // Function to download the MP3 file and submit it for transcription\n    downloadAndSubmitMP3: function(url, submitFunction) {\n        // Fetch the MP3 file from the URL\n        fetch(url)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                // Log the response headers for debugging\n                log.debug('Response headers:', response.headers);\n                return response.blob();\n            })\n            .then(blob => {\n                // Check the blob type for debugging\n                log.debug('Blob size:', blob.size);\n                log.debug('Blob type:', blob.type);\n                if (!blob.type.startsWith('audio/')) {\n                    throw new Error('The fetched file is not an audio file.');\n                }\n                // Call the submit function with the Blob as an argument\n                app.convertMP3ToWAV(blob).then(wavblob => {\n                    submitFunction(wavblob)\n                });\n            })\n            .catch(error => {\n                log.debug('Error downloading MP3:', error);\n            });\n    },\n\n    doTranscribe: function(blob) {\n        //clear the existing results\n       // app.controls.transcriptioncoverage.html('');\n        //init the transcription results div\n        app.controls.transcription.html('<i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px;\"></i>');\n        app.controls.transcriptioncoverage.html('');\n        app.controls.transcription.show();\n\n        //set the scorer if we have one\n        var scorer = app.controls.recorder.data('passagehash');\n        //build the form data\n        var bodyFormData = new FormData();\n        var blobname = Math.floor(Math.random() * 100) +  '.mp3';\n        var guided = app.controls.stt_guided.prop('checked')==true;\n        log.debug('guided is: ' + guided);\n        var prompt = app.controls.pollytext.val();\n        bodyFormData.append('audioFile', blob, blobname);\n        bodyFormData.append('scorer', scorer);\n        if(guided) {\n            bodyFormData.append('strictmode', 'false');\n        }else{\n            bodyFormData.append('strictmode', 'true');\n        }\n        //prompt is used by whisper and other transcibers down the line\n        if(guided) {\n            bodyFormData.append('prompt', app.controls.pollytext.val());\n        }\n        bodyFormData.append('lang', app.controls.pollylanguage.val());\n        bodyFormData.append('wwwroot', M.cfg.wwwroot);\n\n        var oReq = new XMLHttpRequest();\n        oReq.open(\"POST\", app.activitydata.asrurl, true);\n        oReq.onUploadProgress= function(progressEvent) {};\n        oReq.onload = function(oEvent) {\n            if (oReq.status === 200) {\n                var respObject = JSON.parse(oReq.response);\n                if(respObject.data.hasOwnProperty('transcript')) {\n                    var transcript = respObject.data.transcript;\n                    app.controls.transcription.text(transcript);\n                    //do a passage comparison\n                    app.comparePassageToTranscript(prompt,transcript).then(function(ajaxresult) {\n                        var comparison = JSON.parse(ajaxresult);\n                        if (comparison) {\n                            var allCorrect = comparison.filter(function(e){return !e.matched;}).length==0;\n                            var coverage = comparison.filter(function(e){return e.matched;}).length/comparison.length;\n                            coverage = coverage * 100;\n                            coverage = Math.round(coverage);\n                            var tc_report = 'All correct: ' + allCorrect + '<br>';\n                            tc_report += 'Coverage: ' + coverage + '%<br>';\n                            if(coverage<100){\n                                $.each(comparison, function (index, value) {\n                                    if (!value.matched) {\n                                        tc_report += 'unmatched word: ' + value.word + '<br>';\n                                        //var start = value.start;\n                                        //var end = value.end;\n                                    }\n                                });\n                            }\n                            app.controls.transcriptioncoverage.html(tc_report);\n                        }\n                    });\n                    \n                }else{\n                    app.controls.transcription.text(\"no transcript was in the result\");\n                }\n            } else {\n                app.controls.transcription.text( \"error\");\n                log.debug(oReq.error);\n            }\n            app.controls.transcription.show();\n        };\n        try {\n            oReq.send(bodyFormData);\n\n        }catch(err){\n            app.controls.transcription.text( \"error\");\n            log.debug(err);\n        }\n    },\n\n    comparePassageToTranscript: function (passage,transcript){\n        return Ajax.call([{\n            methodname: 'mod_minilesson_compare_passage_to_transcript',\n            args: {\n                passage: passage,\n                transcript: transcript,\n                alternatives: '',\n                phonetic: '',\n                language: app.controls.pollylanguage.val(),\n                region: app.activitydata.region,\n                cmid: app.activitydata.cmid\n            },\n            async: false\n        }])[0];\n    },\n\n    convertMP3ToWAV: function (mp3Blob){\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n\n            reader.onload = (event) => {\n                const arrayBuffer = event.target.result;\n                const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n\n                audioContext.decodeAudioData(arrayBuffer)\n                    .then((audioBuffer) => {\n                        const numberOfChannels = audioBuffer.numberOfChannels;\n                        const length = audioBuffer.length * numberOfChannels;\n                        const sampleRate = audioBuffer.sampleRate;\n                        const buffer = audioContext.createBuffer(numberOfChannels, audioBuffer.length, sampleRate);\n\n                        for (let channel = 0; channel < numberOfChannels; channel++) {\n                            const channelData = audioBuffer.getChannelData(channel);\n                            buffer.copyToChannel(channelData, channel);\n                        }\n\n                        const wavBlob = app.bufferToWave(buffer);\n                        resolve(wavBlob);\n                    })\n                    .catch((error) => {\n                        reject(error);\n                    });\n            };\n            reader.onerror = (error) => {\n                reject(error);\n            }\n            reader.readAsArrayBuffer(mp3Blob);\n        });\n    },\n\n    bufferToWave: function(audioBuffer) {\n        const numberOfChannels = audioBuffer.numberOfChannels;\n        const sampleRate = audioBuffer.sampleRate;\n        const length = audioBuffer.length * numberOfChannels * 2 + 44;\n        const buffer = new ArrayBuffer(length);\n        const view = new DataView(buffer);\n        let pos = 0;\n\n        const writeString = (view, offset, string) => {\n            for (let i = 0; i < string.length; i++) {\n                view.setUint8(offset + i, string.charCodeAt(i));\n            }\n        };\n\n        const writeUint32 = (view, offset, value) => {\n            view.setUint32(offset, value, true);\n        };\n\n        const writeUint16 = (view, offset, value) => {\n            view.setUint16(offset, value, true);\n        };\n\n        writeString(view, pos, 'RIFF'); pos += 4;\n        writeUint32(view, pos, length - 8); pos += 4;\n        writeString(view, pos, 'WAVE'); pos += 4;\n        writeString(view, pos, 'fmt '); pos += 4;\n        writeUint32(view, pos, 16); pos += 4;\n        writeUint16(view, pos, 1); pos += 2;\n        writeUint16(view, pos, numberOfChannels); pos += 2;\n        writeUint32(view, pos, sampleRate); pos += 4;\n        writeUint32(view, pos, sampleRate * numberOfChannels * 2); pos += 4;\n        writeUint16(view, pos, numberOfChannels * 2); pos += 2;\n        writeUint16(view, pos, 16); pos += 2;\n        writeString(view, pos, 'data'); pos += 4;\n        writeUint32(view, pos, length - pos - 4); pos += 4;\n\n        function floatTo16BitPCM(output, offset, input) {\n            for (let i = 0; i < input.length; i++, offset += 2) {\n                const s = Math.max(-1, Math.min(1, input[i]));\n                output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n            }\n        }\n\n        for (let channel = 0; channel < numberOfChannels; channel++) {\n            floatTo16BitPCM(view, pos, audioBuffer.getChannelData(channel));\n            pos += audioBuffer.length * 2;\n        }\n\n        return new Blob([buffer], { type: 'audio/wav' });\n    },\n\n     initComponents: function() {\n\n              var theCallback = function(message) {\n\n                switch (message.type) {\n                  case 'recording':\n                   app.controls.transcription.html('<i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px;\"></i>');\n                   break;\n\n                  case 'speech':\n                    var speechtext = message.capturedspeech;\n                    log.debug('speechtext:',speechtext);\n                    app.controls.transcription.text(speechtext);\n                    app.controls.transcription.show();\n\n                } //end of switch message type\n              };\n\n              //init tt recorder\n              var opts = {};\n              opts.uniqueid = app.activitydata.uniqueid;\n              opts.callback = theCallback;\n              opts.stt_guided= app.controls.stt_guided.prop('checked')==true;\n              app.ttrec = ttrecorder.clone();\n              app.ttrec.init(opts);\n\n        },\n\n\n      }; //end of app definition\n      return app;\n\n\n});"],"names":["define","$","log","Ajax","def","polly","ttrecorder","anim","debug","app","passmark","pointer","jsondata","props","dryRun","language","terms","phonetics","displayterms","results","controls","ttrec","init","theid","widgetid","configcontrol","get","this","activitydata","JSON","parse","value","remove","init_polly","init_controls","initComponents","register_events","pollytoken","token","pollyregion","region","pollycloudpoodllurl","cloudpoodllurl","pollybutton","pollyvoice","pollylanguage","pollytext","audioplayer","transcribebutton","transcription","transcriptioncoverage","stt_guided","forcestreaming","recorder","on","val","fetch_polly_url","then","audiourl","attr","downloadAndSubmitMP3","doTranscribe","url","submitFunction","fetch","response","ok","Error","status","headers","blob","size","type","startsWith","convertMP3ToWAV","wavblob","catch","error","html","show","scorer","data","bodyFormData","FormData","blobname","Math","floor","random","guided","prop","prompt","append","M","cfg","wwwroot","oReq","XMLHttpRequest","open","asrurl","onUploadProgress","progressEvent","onload","oEvent","respObject","hasOwnProperty","transcript","text","comparePassageToTranscript","ajaxresult","comparison","allCorrect","filter","e","matched","length","coverage","round","tc_report","each","index","word","send","err","passage","call","methodname","args","alternatives","phonetic","cmid","async","mp3Blob","Promise","resolve","reject","reader","FileReader","event","arrayBuffer","target","result","audioContext","window","AudioContext","webkitAudioContext","decodeAudioData","audioBuffer","numberOfChannels","sampleRate","buffer","createBuffer","channel","channelData","getChannelData","copyToChannel","wavBlob","bufferToWave","onerror","readAsArrayBuffer","ArrayBuffer","view","DataView","pos","writeString","offset","string","i","setUint8","charCodeAt","writeUint32","setUint32","writeUint16","setUint16","floatTo16BitPCM","output","input","s","max","min","setInt16","Blob","opts","uniqueid","callback","message","speechtext","capturedspeech","clone"],"mappings":"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"}