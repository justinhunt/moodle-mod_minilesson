{"version":3,"file":"sthelper.min.js","sources":["../src/sthelper.js"],"sourcesContent":["define(['jquery',\n    'core/log',\n    'core/ajax',\n    'mod_minilesson/definitions',\n    'mod_minilesson/pollyhelper',\n    'mod_minilesson/cloudpoodllloader',\n    'mod_minilesson/ttrecorder',\n    'mod_minilesson/animatecss',\n], function($,  log, Ajax, def, polly, cloudpoodll, ttrecorder, anim) {\n  \"use strict\"; // jshint ;_;\n\n  /*\n  This file is to manage the quiz stage\n   */\n\n  log.debug('MiniLesson ST Helper: initialising');\n\nvar app = {\n\n\n    passmark: 90,\n    pointer: 1,\n    jsondata: null,\n    props: null,\n    dryRun: false,\n    language: 'en-US',\n    terms: [],\n    phonetics: [],\n    displayterms: [],\n    results: [],\n    controls: {},\n    ttrec: null, //a handle on the tt recorder\n\n\n    init: function(props) {\n      var dd = this;\n\n      //pick up opts from html\n      var theid='#amdopts_' + props.widgetid;\n      var configcontrol = $(theid).get(0);\n      if(configcontrol){\n        dd.activitydata = JSON.parse(configcontrol.value);\n        $(theid).remove();\n      }else{\n        //if there is no config we might as well give up\n        log.debug('MiniLesson ST helper: No config found on page. Giving up.');\n        return;\n      }\n\n         this.init_polly();\n\n          this.init_controls();\n        //  this.initComponents();\n          this.register_events();\n    },\n    init_polly: function() {\n\n        //get the polly token\n        var pollytoken = this.activitydata.token;\n        var pollyregion = this.activitydata.region;\n        var pollyowner = 'poodll';\n        polly.init(pollytoken, pollyregion, pollyowner);\n        log.debug('polly initialised');\n    },\n\n    init_controls: function() {\n            log.debug('sthelper init controls');\n          app.controls = {};\n          app.controls.pollybutton = $(\"#speechtester_pollybutton\");\n          app.controls.pollyvoice = $(\"#speechtester_voice\");\n          app.controls.pollylanguage = $(\"#speechtester_language\");\n          app.controls.pollytext = $(\"#speechtester_text\");\n          app.controls.audioplayer = $(\"#speechtester_audioplayer\");\n          app.controls.transcribebutton = $(\"#speechtester_transcribebutton\");\n          app.controls.transcription = $(\"#speechtester_transcription\");\n          app.controls.transcriptioncoverage = $(\"#speechtester_transcription_coverage\");\n          app.controls.opentranscription = $(\"#speechtester_open\");\n\n    },\n\n        register_events: function() {\n            log.debug('sthelper register events');\n\n            //polly button\n          app.controls.pollybutton.on('click',function() {\n              log.debug('pollybutton clicked');\n              log.debug(app.controls.pollytext.val());\n              log.debug(app.controls.pollyvoice.val());\n                polly.fetch_polly_url(app.controls.pollytext.val(),'text', app.controls.pollyvoice.val()).then(function(audiourl) {\n                    app.controls.audioplayer.attr('src',audiourl);\n                    log.debug(audiourl);\n                });\n          });\n          //transcribe button\n            app.controls.transcribebutton.on('click',function() {\n                log.debug('transcribebutton clicked');\n                log.debug(app.controls.audioplayer.attr('src'));\n                app.downloadAndSubmitMP3(app.controls.audioplayer.attr('src'),app.doTranscribe);\n            });\n        },\n\n    downloadAndSubmitMP3: function(url, submitFunction) {\n        // Fetch the MP3 file from the URL\n        fetch(url)\n            .then(response => response.blob())\n            .then(blob => {\n                // Call the submit function with the Blob as an argument\n                submitFunction(blob);\n            })\n            .catch(error => {\n                log.debug('Error downloading MP3:', error);\n            });\n    },\n\n    doTranscribe: function(blob) {\n        //clear the existing results\n        app.controls.transcriptioncoverage.html('');\n        app.controls.transcription.html('');\n\n        var bodyFormData = new FormData();\n        var blobname = Math.floor(Math.random() * 100) +  '.wav';\n        var guided = app.controls.opentranscription.prop('checked')==false;\n        log.debug('guided is: ' + guided);\n        var prompt = app.controls.pollytext.val();\n        bodyFormData.append('audioFile', blob, blobname);\n        bodyFormData.append('scorer', '');\n        if(guided) {\n            bodyFormData.append('strictmode', 'false');\n        }else{\n            bodyFormData.append('strictmode', 'true');\n        }\n        //prompt is used by whisper and other transcibers down the line\n        if(guided){\n            bodyFormData.append('prompt', app.controls.pollytext.val());\n        }\n        bodyFormData.append('lang', app.controls.pollylanguage.val());\n        bodyFormData.append('wwwroot', M.cfg.wwwroot);\n\n        var oReq = new XMLHttpRequest();\n        oReq.open(\"POST\", app.activitydata.asrurl, true);\n        oReq.onUploadProgress= function(progressEvent) {};\n        oReq.onload = function(oEvent) {\n            if (oReq.status === 200) {\n                var respObject = JSON.parse(oReq.response);\n                if(respObject.data.hasOwnProperty('transcript')) {\n                    var transcript = respObject.data.transcript;\n                    app.controls.transcription.text(transcript);\n                    //correct the transcript\n                    app.comparePassageToTranscript(prompt,transcript).then(function(ajaxresult) {\n                        var comparison = JSON.parse(ajaxresult);\n                        if (comparison) {\n                            var allCorrect = comparison.filter(function(e){return !e.matched;}).length==0;\n                            var coverage = comparison.filter(function(e){return e.matched;}).length/comparison.length;\n                            coverage = coverage * 100;\n                            coverage = Math.round(coverage);\n                            var tc_report = 'All correct: ' + allCorrect + '<br>';\n                            tc_report += 'Coverage: ' + coverage + '%<br>';\n                            if(coverage<100){\n                                $.each(comparison, function (index, value) {\n                                    if (!value.matched) {\n                                        tc_report += 'unmatched word: ' + value.word + '<br>';\n                                        //var start = value.start;\n                                        //var end = value.end;\n                                    }\n                                });\n                            }\n                            app.controls.transcriptioncoverage.html(tc_report);\n                        }\n                    });\n                }else{\n                    app.controls.transcription.text(\"no transcript was in the result\");\n                }\n            } else {\n                app.controls.transcription.text( \"error\");\n                log.debug(oReq.error);\n            }\n        };\n        try {\n            oReq.send(bodyFormData);\n\n        }catch(err){\n            app.controls.transcription.text( \"error\");\n            log.debug(err);\n        }\n    },\n\n    comparePassageToTranscript: function (passage,transcript){\n        return Ajax.call([{\n            methodname: 'mod_minilesson_compare_passage_to_transcript',\n            args: {\n                passage: passage,\n                transcript: transcript,\n                alternatives: '',\n                phonetic: '',\n                language: app.controls.pollylanguage.val(),\n                region: app.activitydata.region,\n                cmid: app.activitydata.cmid\n            },\n            async: false\n        }])[0];\n    },\n\n     initComponents: function() {\n\n              var theCallback = function(message) {\n\n                switch (message.type) {\n                  case 'recording':\n\n                    break;\n\n                  case 'speech':\n                    var speechtext = message.capturedspeech;\n                    var spoken_clean  = quizhelper.cleanText(speechtext);\n                    var correct_clean = quizhelper.cleanText(app.terms[app.pointer - 1]);\n                    var correctphonetic = app.phonetics[app.pointer - 1];\n        log.debug('speechtext:',speechtext);\n        log.debug('spoken:',spoken_clean);\n        log.debug('correct:',correct_clean);\n                    //Similarity check by character matching\n                    var similarity_js = quizhelper.similarity(spoken_clean, correct_clean);\n                    log.debug('JS similarity: ' + spoken_clean + ':' + correct_clean + ':' + similarity_js);\n\n                    //Similarity check by direct-match/acceptable-mistranscription\n                    if (similarity_js >= app.passmark ||\n                      app.wordsDoMatch(spoken_clean, correct_clean)) {\n                      log.debug('local match:' + ':' + spoken_clean + ':' + correct_clean);\n                      app.showStarRating(100);\n                      app.flagCorrectAndTransition();\n                      return;\n                    }\n\n                    //Similarity check by phonetics(ajax)\n                    quizhelper.checkByPhonetic(correct_clean, spoken_clean, correctphonetic, app.language).then(function(similarity_php) {\n                      if (similarity_php === false) {\n                        return $.Deferred().reject();\n                      } else {\n                        log.debug('PHP similarity: ' + spoken_clean + ':' + correct_clean + ':' + similarity_php);\n\n                        if (similarity_php >= app.passmark) {\n                            app.showStarRating(similarity_php);\n                            app.flagCorrectAndTransition();\n                        }else{\n                            //show the greater of the ratings\n                            app.showStarRating(Math.max(similarity_js,similarity_php));\n                        }\n                      } //end of if check_by_phonetic result\n                    }); //end of check by phonetic\n\n                } //end of switch message type\n              };\n\n\n\n             if(quizhelper.use_ttrecorder()) {\n                 //init tt recorder\n                 var opts = {};\n                 opts.uniqueid = itemdata.uniqueid;\n                 opts.callback = theCallback;\n                 opts.stt_guided=quizhelper.is_stt_guided();\n                 app.ttrec = ttrecorder.clone();\n                 app.ttrec.init(opts);\n                 //init prompt for first card\n                 //in some cases ttrecorder wants to know the target\n                 app.ttrec.currentPrompt=app.displayterms[app.pointer - 1];\n\n             }else{\n                 //init cloudpoodll push recorder\n                 cloudpoodll.init('minilesson-recorder-speechcards-' + itemdata.id, theCallback);\n             }\n\n\n              //init progress dots\n              app.progress_dots(app.results, app.terms);\n\n              app.initSlider();\n\n\n        },\n\n\n\n        wordsDoMatch: function(phraseheard, currentphrase) {\n          //lets lower case everything\n          phraseheard = quizhelper.cleanText(phraseheard);\n          currentphrase = quizhelper.cleanText(currentphrase);\n          if (phraseheard == currentphrase) {\n            return true;\n          }\n          return false;\n        },\n\n        check: function(correct) {\n          var points = 1;\n          if (correct == true) {\n            points = 1;\n          } else {\n            points = 0;\n          }\n          var result = {\n            points: points\n          };\n          app.results.push(result);\n        },\n\n\n      }; //end of app definition\n      return app;\n\n\n});"],"names":["define","$","log","Ajax","def","polly","cloudpoodll","ttrecorder","anim","debug","app","passmark","pointer","jsondata","props","dryRun","language","terms","phonetics","displayterms","results","controls","ttrec","init","theid","widgetid","configcontrol","get","this","activitydata","JSON","parse","value","remove","init_polly","init_controls","register_events","pollytoken","token","pollyregion","region","pollybutton","pollyvoice","pollylanguage","pollytext","audioplayer","transcribebutton","transcription","transcriptioncoverage","opentranscription","on","val","fetch_polly_url","then","audiourl","attr","downloadAndSubmitMP3","doTranscribe","url","submitFunction","fetch","response","blob","catch","error","html","bodyFormData","FormData","blobname","Math","floor","random","guided","prop","prompt","append","M","cfg","wwwroot","oReq","XMLHttpRequest","open","asrurl","onUploadProgress","progressEvent","onload","oEvent","status","respObject","data","hasOwnProperty","transcript","text","comparePassageToTranscript","ajaxresult","comparison","allCorrect","filter","e","matched","length","coverage","round","tc_report","each","index","word","send","err","passage","call","methodname","args","alternatives","phonetic","cmid","async","initComponents","theCallback","message","type","speechtext","capturedspeech","spoken_clean","quizhelper","cleanText","correct_clean","correctphonetic","similarity_js","similarity","wordsDoMatch","showStarRating","flagCorrectAndTransition","checkByPhonetic","similarity_php","Deferred","reject","max","use_ttrecorder","opts","uniqueid","itemdata","callback","stt_guided","is_stt_guided","clone","currentPrompt","id","progress_dots","initSlider","phraseheard","currentphrase","check","correct","result","points","push"],"mappings":"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"}