{"version":3,"file":"ttmsspeech.min.js","sources":["../src/ttmsspeech.js"],"sourcesContent":["define(['jquery', \n    'core/log'], \n    function ($, log) {\n    \n   \"use strict\"; // jshint ;_;\n    /*\n    This file streams to msspeech and collects the response. \n     */\n\n    log.debug('MS Speech initialising');\n\n    return {\n\n        thetoken: null,\n        theregion: null,\n        thelanguage: null,\n        thereferencetext: null,\n        speechsdk: null,\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n        init: function(mstoken, msregion, mslanguage, referencetext) {\n            var that = this;\n            this.thetoken = mstoken;\n            this.theregion = msregion;\n            this.thelanguage = mslanguage;\n            this.thereferencetext = referencetext;\n            log.debug('MS Speech init');\n            if(!window.hasOwnProperty('SpeechSDK')){ \n                log.debug('MS Speech loading');\n                $.getScript('https://aka.ms/csspeech/jsbrowserpackageraw', function(){\n                    log.debug('MS Speech loaded');\n                    that.speechsdk = window.SpeechSDK;\n                    log.debug(that.speechsdk);\n                });\n            }\n        },\n\n        updatetoken: function(newtoken) {\n            this.thetoken = newtoken;\n        },\n\n        recognize: function(blob, callback) {\n            var that = this;\n            \n          //MS Speech SDK requires the audio to be in wav format and to have a name field\n          blob.name = 'audio.wav';\n          let audioConfig = that.speechsdk.AudioConfig.fromWavFileInput(blob,blob.name);\n\n          var speechConfig = that.speechsdk.SpeechConfig.fromAuthorizationToken(that.thetoken, that.theregion);\n          speechConfig.speechRecognitionLanguage = that.thelanguage;\n\n          //need to pass this in, better\n          var referencetext = that.thereferencetext;\n\n          // create pronunciation assessment config, set grading system, granularity\n          var paconfig = {};\n          paconfig.referenceText = referencetext;\n          paconfig.gradingSystem = \"HundredMark\";\n          paconfig.granularity = \"Phoneme\";\n          paconfig.phonemeAlphabet = \"IPA\";\n          paconfig.enableProsodyAssessment = true;\n          paconfig.showPhonemeLevelResult = true;\n          paconfig.enableMiscue = true;\n          const pronunciationAssessmentConfig = that.speechsdk.PronunciationAssessmentConfig.fromJSON(JSON.stringify(paconfig));\n\n\n          // create the speech recognizer.\n          var reco = new that.speechsdk.SpeechRecognizer(speechConfig, audioConfig);\n          // (Optional) get the session ID\n          reco.sessionStarted = (_s, e) => {\n              console.log(`SESSION ID: ${e.sessionId}`);\n          };\n          pronunciationAssessmentConfig.applyTo(reco);\n\n          reco.recognizeOnceAsync(\n              function (speechRecognitionResult) {\n                    // The pronunciation assessment result as a Speech SDK object\n                    var pronunciationAssessmentResult = that.speechsdk.PronunciationAssessmentResult.fromResult(speechRecognitionResult);\n                    // The pronunciation assessment result as a JSON string\n                    //var pronunciationAssessmentResultJson = speechRecognitionResult.properties.getProperty(SpeechSDK.PropertyId.SpeechServiceResponse_JsonResult);\n                  callback(pronunciationAssessmentResult);\n              },\n              function (err) {\n                  console.log(\"ERROR: \" + err);\n                  exit();\n              }\n          );\n        },\n\n        set_reference_text: function(referencetext){\n            this.thereferencetext = referencetext;\n        },\n\n        on_recognition: function(){\n\n        },\n\n     }\n\n});"],"names":["define","$","log","debug","thetoken","theregion","thelanguage","thereferencetext","speechsdk","clone","extend","this","init","mstoken","msregion","mslanguage","referencetext","that","window","hasOwnProperty","getScript","SpeechSDK","updatetoken","newtoken","recognize","blob","callback","name","audioConfig","AudioConfig","fromWavFileInput","speechConfig","SpeechConfig","fromAuthorizationToken","speechRecognitionLanguage","paconfig","referenceText","gradingSystem","granularity","phonemeAlphabet","enableProsodyAssessment","showPhonemeLevelResult","enableMiscue","pronunciationAssessmentConfig","PronunciationAssessmentConfig","fromJSON","JSON","stringify","reco","SpeechRecognizer","sessionStarted","_s","e","console","sessionId","applyTo","recognizeOnceAsync","speechRecognitionResult","pronunciationAssessmentResult","PronunciationAssessmentResult","fromResult","err","exit","set_reference_text","on_recognition"],"mappings":"AAAAA,mCAAO,CAAC,SACJ,aACA,SAAUC,EAAGC,YAObA,IAAIC,MAAM,0BAEH,CAEHC,SAAU,KACVC,UAAW,KACXC,YAAa,KACbC,iBAAkB,KAClBC,UAAW,KAGXC,MAAO,kBACIR,EAAES,QAAO,EAAM,GAAIC,OAG9BC,KAAM,SAASC,QAASC,SAAUC,WAAYC,mBACtCC,KAAON,UACNP,SAAWS,aACXR,UAAYS,cACZR,YAAcS,gBACdR,iBAAmBS,cACxBd,IAAIC,MAAM,kBACNe,OAAOC,eAAe,eACtBjB,IAAIC,MAAM,qBACVF,EAAEmB,UAAU,+CAA+C,WACvDlB,IAAIC,MAAM,oBACVc,KAAKT,UAAYU,OAAOG,UACxBnB,IAAIC,MAAMc,KAAKT,gBAK3Bc,YAAa,SAASC,eACbnB,SAAWmB,UAGpBC,UAAW,SAASC,KAAMC,cAClBT,KAAON,KAGbc,KAAKE,KAAO,gBACRC,YAAcX,KAAKT,UAAUqB,YAAYC,iBAAiBL,KAAKA,KAAKE,UAEpEI,aAAed,KAAKT,UAAUwB,aAAaC,uBAAuBhB,KAAKb,SAAUa,KAAKZ,WAC1F0B,aAAaG,0BAA4BjB,KAAKX,gBAG1CU,cAAgBC,KAAKV,iBAGrB4B,SAAW,GACfA,SAASC,cAAgBpB,cACzBmB,SAASE,cAAgB,cACzBF,SAASG,YAAc,UACvBH,SAASI,gBAAkB,MAC3BJ,SAASK,yBAA0B,EACnCL,SAASM,wBAAyB,EAClCN,SAASO,cAAe,QAClBC,8BAAgC1B,KAAKT,UAAUoC,8BAA8BC,SAASC,KAAKC,UAAUZ,eAIvGa,KAAO,IAAI/B,KAAKT,UAAUyC,iBAAiBlB,aAAcH,aAE7DoB,KAAKE,eAAiB,CAACC,GAAIC,KACvBC,QAAQnD,0BAAmBkD,EAAEE,aAEjCX,8BAA8BY,QAAQP,MAEtCA,KAAKQ,oBACD,SAAUC,6BAEAC,8BAAgCzC,KAAKT,UAAUmD,8BAA8BC,WAAWH,yBAG9F/B,SAASgC,kCAEb,SAAUG,KACNR,QAAQnD,IAAI,UAAY2D,KACxBC,WAKVC,mBAAoB,SAAS/C,oBACpBT,iBAAmBS,eAG5BgD,eAAgB"}