{"version":3,"sources":["../src/sentencepromptformelement.js"],"names":["regionSelector","regionname","registerElement","elementid","element","document","getElementById","Log","debug","textarea","querySelector","lineNumbersEle","textareaStyles","getComputedStyle","forEach","property","style","parseValue","v","endsWith","parseInt","slice","font","fontSize","fontFamily","paddingLeft","paddingRight","canvas","createElement","context","getContext","calculateNumLines","str","textareaWidth","getBoundingClientRect","width","words","split","lineCount","currentLine","i","length","wordWidth","measureText","lineWidth","trim","calculateLineNumbers","lines","value","numLines","map","line","lineNumbers","numLinesOfSentence","shift","push","Array","fill","displayLineNumbers","innerHTML","from","_","join","addEventListener","ro","ResizeObserver","rect","height","observe","scrollTop"],"mappings":"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","sourcesContent":["import Log from \"core/log\";\n\nconst regionSelector = regionname => `[data-region=\"${regionname}\"]`;\n\nexport const registerElement = ({elementid}) => {\n    const element = document.getElementById(elementid);\n    if (element) {\n        Log.debug(element);\n        const textarea = element.querySelector(regionSelector('textarea'));\n        const lineNumbersEle = element.querySelector(regionSelector('lines'));\n\n        const textareaStyles = getComputedStyle(textarea);\n        [\n            'fontFamily',\n            'fontSize',\n            'fontWeight',\n            'letterSpacing',\n            'lineHeight',\n            'padding',\n        ].forEach((property) => {\n            lineNumbersEle.style[property] = textareaStyles[property];\n        });\n\n        const parseValue = (v) => v.endsWith('px') ? parseInt(v.slice(0, -2), 10) : 0;\n\n        const font = `${textareaStyles.fontSize} ${textareaStyles.fontFamily}`;\n        const paddingLeft = parseValue(textareaStyles.paddingLeft);\n        const paddingRight = parseValue(textareaStyles.paddingRight);\n\n        const canvas = document.createElement('canvas');\n        const context = canvas.getContext('2d');\n        context.font = font;\n\n        const calculateNumLines = (str) => {\n            const textareaWidth = textarea.getBoundingClientRect().width - paddingLeft - paddingRight;\n            const words = str.split(' ');\n            let lineCount = 0;\n            let currentLine = '';\n            for (let i = 0; i < words.length; i++) {\n                const wordWidth = context.measureText(words[i] + ' ').width;\n                const lineWidth = context.measureText(currentLine).width;\n\n                if (lineWidth + wordWidth > textareaWidth) {\n                    lineCount++;\n                    currentLine = words[i] + ' ';\n                } else {\n                    currentLine += words[i] + ' ';\n                }\n            }\n\n            if (currentLine.trim() !== '') {\n                lineCount++;\n            }\n\n            return lineCount;\n        };\n\n        const calculateLineNumbers = () => {\n            const lines = textarea.value.split('\\n');\n            const numLines = lines.map((line) => calculateNumLines(line));\n\n            let i = 1;\n            const lineNumbers = [];\n            while (numLines.length > 0) {\n                const numLinesOfSentence = numLines.shift();\n                lineNumbers.push(i);\n                if (numLinesOfSentence > 1) {\n                    Array(numLinesOfSentence - 1).fill('').forEach(() => lineNumbers.push(''));\n                }\n                i++;\n            }\n\n            return lineNumbers;\n        };\n\n        const displayLineNumbers = () => {\n            const lineNumbers = calculateLineNumbers();\n            lineNumbersEle.innerHTML = Array.from({length: lineNumbers.length},\n                (_, i) => `<div>${lineNumbers[i] || '&nbsp;'}</div>`).join('');\n        };\n\n        textarea.addEventListener('input', () => {\n            displayLineNumbers();\n        });\n\n        displayLineNumbers();\n\n        const ro = new ResizeObserver(() => {\n            const rect = textarea.getBoundingClientRect();\n            lineNumbersEle.style.height = `${rect.height}px`;\n            displayLineNumbers();\n        });\n        ro.observe(textarea);\n\n        textarea.addEventListener('scroll', () => {\n            lineNumbersEle.scrollTop = textarea.scrollTop;\n        });\n    }\n};"],"file":"sentencepromptformelement.min.js"}