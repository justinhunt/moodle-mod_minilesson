{"version":3,"sources":["../src/ttsaudioformelement.js"],"names":["regionSelector","regionname","registerElement","component","fragmentcallback","elementid","element","document","getElementById","Log","debug","addEventListener","rootelement","closest","loaderElement","querySelector","params","dataset","formdata","FormData","options","JSON","stringify","querySelectorAll","forEach","selectel","HTMLSelectElement","selectedOptions","option","append","getAttribute","value","URLSearchParams","entries","toString","classList","remove","Fragment","loadFragment","Config","contextid","then","html","js","Templates","replaceNode"],"mappings":"8NAAA,OACA,OACA,OACA,O,k/CAEMA,CAAAA,CAAc,CAAG,SAAAC,CAAU,iCAAqBA,CAArB,Q,CAEpBC,CAAe,CAAG,WAA8C,IAA5CC,CAAAA,CAA4C,GAA5CA,SAA4C,CAAjCC,CAAiC,GAAjCA,gBAAiC,CAAfC,CAAe,GAAfA,SAAe,CACnEC,CAAO,CAAGC,QAAQ,CAACC,cAAT,CAAwBH,CAAxB,CADyD,CAEzE,GAAIC,CAAJ,CAAa,CACTG,UAAIC,KAAJ,CAAUJ,CAAV,EACAA,CAAO,CAACK,gBAAR,CAAyB,QAAzB,CAAmC,UAAM,IAC/BC,CAAAA,CAAW,CAAGN,CAAO,CAACO,OAAR,CAAgB,gCAAhB,CADiB,CAE/BC,CAAa,CAAGF,CAAW,CAACG,aAAZ,CAA0Bf,CAAc,CAAC,wBAAD,CAAxC,CAFe,CAG/BgB,CAAM,MAAOV,CAAO,CAACW,OAAf,CAHyB,CAI/BC,CAAQ,CAAG,GAAIC,CAAAA,QAJgB,CAKrCH,CAAM,CAACI,OAAP,CAAiBC,IAAI,CAACC,SAAL,MAAmBV,CAAW,CAACK,OAA/B,EAAjB,CACAL,CAAW,CAACW,gBAAZ,CAA6B,QAA7B,EAAuCC,OAAvC,CAA+C,SAAAC,CAAQ,CAAI,CACvD,GAAIA,CAAQ,WAAYC,CAAAA,iBAAxB,CAA2C,CACvC,EAAID,CAAQ,CAACE,eAAb,EAA8BH,OAA9B,CAAsC,SAAAI,CAAM,CAAI,CAC5CV,CAAQ,CAACW,MAAT,CAAgBJ,CAAQ,CAACK,YAAT,CAAsB,MAAtB,CAAhB,CAA+CF,CAAM,CAACG,KAAtD,CACH,CAFD,CAGH,CACJ,CAND,EAOAf,CAAM,CAACE,QAAP,CAAkB,GAAIc,CAAAA,eAAJ,GAAwBd,CAAQ,CAACe,OAAT,EAAxB,GAA6CC,QAA7C,EAAlB,CACA,GAAIpB,CAAJ,CAAmB,CACfA,CAAa,CAACqB,SAAd,CAAwBC,MAAxB,CAA+B,QAA/B,CACH,CACDC,UAASC,YAAT,CAAsBnC,CAAtB,CAAiCC,CAAjC,CAAmDmC,UAAOC,SAA1D,CAAqExB,CAArE,EACCyB,IADD,CACM,SAACC,CAAD,CAAOC,CAAP,CAAc,CAChBC,UAAUC,WAAV,CAAsBjC,CAAtB,CAAmC8B,CAAnC,CAAyCC,CAAzC,CACH,CAHD,CAIH,CArBD,CAsBH,CACJ,C","sourcesContent":["import Log from \"core/log\";\nimport Config from \"core/config\";\nimport Fragment from \"core/fragment\";\nimport Templates from \"core/templates\";\n\nconst regionSelector = regionname => `[data-region=\"${regionname}\"]`;\n\nexport const registerElement = ({component, fragmentcallback, elementid}) => {\n    const element = document.getElementById(elementid);\n    if (element) {\n        Log.debug(element);\n        element.addEventListener('change', () => {\n            const rootelement = element.closest('[data-root=\"elementwrapper\"]');\n            const loaderElement = rootelement.querySelector(regionSelector('overlay-icon-container'));\n            const params = {...element.dataset};\n            const formdata = new FormData;\n            params.options = JSON.stringify({...rootelement.dataset});\n            rootelement.querySelectorAll('select').forEach(selectel => {\n                if (selectel instanceof HTMLSelectElement) {\n                    [...selectel.selectedOptions].forEach(option => {\n                        formdata.append(selectel.getAttribute('name'), option.value);\n                    });\n                }\n            });\n            params.formdata = new URLSearchParams([...formdata.entries()]).toString();\n            if (loaderElement) {\n                loaderElement.classList.remove('hidden');\n            }\n            Fragment.loadFragment(component, fragmentcallback, Config.contextid, params)\n            .then((html, js) => {\n                Templates.replaceNode(rootelement, html, js);\n            });\n        });\n    }\n};"],"file":"ttsaudioformelement.min.js"}