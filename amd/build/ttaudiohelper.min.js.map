{"version":3,"file":"ttaudiohelper.min.js","sources":["../src/ttaudiohelper.js"],"sourcesContent":["define(['jquery', 'core/log', 'mod_minilesson/ttwavencoder', 'mod_minilesson/ttstreamer'],\n    function ($, log, wavencoder, audiostreamer) {\n    \"use strict\"; // jshint ;_;\n    /*\n    This file is the engine that drives audio rec and canvas drawing. TT Recorder is the just the glory kid\n     */\n\n    log.debug('TT Audio Helper initialising');\n\n    return {\n        encodingconfig: null,\n        streamer: null,\n        encoder: null,\n        microphone: null,\n        isRecording: false,\n        audioContext: null,\n        processor: null,\n        uniqueid: null,\n        alreadyhadsound: false, //only start silence detection after we got a sound. Silence detection is end of speech.\n        silencecount: 0, //how many intervals of consecutive silence so far\n        silenceintervals: 15, //how many consecutive silence intervals (100ms) = silence detected\n        silencelevel: 25, //below this volume level = silence\n\n        wavconfig: {\n            bufferLen: 4096,\n            numChannels: 2,\n            desiredSampleRate: null,\n            mimeType: 'audio/wav'\n        },\n\n        streamingconfig: {\n            bufferLen: 4096,\n            numChannels: 1,\n            desiredSampleRate: 16000,\n            mimeType: 'audio/wav'\n        },\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n\n        init: function(waveHeight, uniqueid, therecorder) {\n\n            this.waveHeight = waveHeight;\n            this.uniqueid=uniqueid;\n            this.therecorder= therecorder;\n            if(this.therecorder.is_streaming()){\n                this.encodingconfig = this.streamingconfig;\n            } else {\n                this.encodingconfig = this.wavconfig;\n            }\n            this.prepare_html();\n\n\n            window.AudioContext = window.AudioContext || window.webkitAudioContext;\n\n        },\n\n        onStop: function() {},\n        onStream: function() {},\n        onError: function() {},\n\n\n        prepare_html: function(){\n            this.canvas =$('#' + this.uniqueid + \"_waveform\");\n            this.canvasCtx = this.canvas[0].getContext(\"2d\");\n        },\n\n        start: function() {\n\n            var that =this;\n\n            // Audio context\n            this.audioContext = new AudioContext(\n                {\n                    sampleRate: this.encodingconfig.desiredSampleRate\n                });\n            if (this.audioContext.createJavaScriptNode) {\n                this.processor = this.audioContext.createJavaScriptNode(\n                    this.encodingconfig.bufferLen,\n                    this.encodingconfig.numChannels,\n                    this.encodingconfig.numChannels);\n            } else if (this.audioContext.createScriptProcessor) {\n                this.processor = this.audioContext.createScriptProcessor(\n                    this.encodingconfig.bufferLen,\n                    this.encodingconfig.numChannels,\n                    this.encodingconfig.numChannels);\n            } else {\n                log.debug('WebAudio API has no support on this browser.');\n            }\n            this.processor.connect(this.audioContext.destination);\n\n\n            var gotStreamMethod= function(stream) {\n                that.onStream(stream);\n                that.isRecording = true;\n                that.therecorder.update_audio('isRecording',true);\n                that.tracks = stream.getTracks();\n\n                //lets check the noise suppression and echo reduction on these\n                for(var i=0; i<that.tracks.length; i++){\n                    var track = that.tracks[i];\n                    if(track.kind == \"audio\"){\n                        var settings = track.getSettings();\n                        if(settings.noiseSuppression){\n                            log.debug(\"Noise Suppression is on\");\n                        }else{\n                            log.debug(\"Noise Suppression is off\");\n                        }\n                        if(settings.echoCancellation){\n                            log.debug(\"Echo Cancellation is on\");\n                        }else{\n                            log.debug(\"Echo Cancellation is off\");\n                        }\n                    }\n                }\n\n                // Create a MediaStreamAudioSourceNode for the microphone\n                that.microphone = that.audioContext.createMediaStreamSource(stream);\n\n                // Connect the AudioBufferSourceNode to the gainNode\n                that.microphone.connect(that.processor);\n\n                //if we have a streaming transcriber we need to initialize it\n                if(that.therecorder.is_streaming()){\n                    that.streamer = audiostreamer.clone();\n                    that.streamer.init(that.therecorder.streamingtoken);\n                }\n\n                // Init WAV encoder\n                that.encoder = wavencoder.clone();\n                that.encoder.init(that.audioContext.sampleRate, that.audioContext.numChannels);\n\n                // Give the node a function to process audio events\n                that.processor.onaudioprocess = function(event) {\n                    that.encoder.audioprocess(that.getBuffers(event));\n                    if(that.streamer){\n                        that.streamer.audioprocess(that.getBuffers(event));\n                    }\n                };\n\n                that.listener = that.audioContext.createAnalyser();\n                that.microphone.connect(that.listener);\n                that.listener.fftSize = 2048; // 256\n\n                that.bufferLength = that.listener.frequencyBinCount;\n                that.analyserData = new Uint8Array(that.bufferLength);\n                that.volumeData = new Uint8Array(that.bufferLength);\n\n                //reset canvas and silence detection\n                that.canvasCtx.clearRect(0, 0, that.canvas.width()*2, that.waveHeight*2);\n                that.alreadyhadsound= false;\n                that.silencecount= 0;\n\n                that.interval = setInterval(function() {\n                    that.drawWave();\n                    that.detectSilence();\n                }, 100);\n\n            };\n\n            //for ios we need to do this to keep playback volume high\n            if (\"audioSession\" in navigator) {\n                navigator.audioSession.type = 'play-and-record';\n                console.log(\"AudioSession API is supported\");\n            }\n\n            // Mic permission\n            navigator.mediaDevices.getUserMedia({\n                audio: true,\n                video: false\n            }).then(gotStreamMethod).catch(this.onError);\n        },\n\n        stop: function() {\n            clearInterval(this.interval);\n            this.canvasCtx.clearRect(0, 0, this.canvas.width()*2, this.waveHeight * 2);\n            this.isRecording = false;\n            this.silencecount=0;\n            this.alreadyhadsound=false;\n            this.therecorder.update_audio('isRecording',false);\n            //we check audiocontext is not in an odd state before closing\n            //superclickers can get it in an odd state\n            if (this.audioContext!==null && this.audioContext.state !== \"closed\") {\n                this.audioContext.close();\n             }\n            this.processor.disconnect();\n            this.tracks.forEach(track => track.stop());\n            this.onStop(this.encoder.finish());\n        },\n\n        getBuffers: function(event) {\n            var buffers = [];\n            for (var ch = 0; ch < this.encodingconfig.numChannels; ++ch) {\n                buffers[ch] = event.inputBuffer.getChannelData(ch);\n            }\n            return buffers;\n        },\n\n        detectSilence: function () {\n\n            this.listener.getByteFrequencyData(this.volumeData);\n\n            let sum = 0;\n            for (var vindex =0; vindex <this.volumeData.length;vindex++) {\n                sum += this.volumeData[vindex] * this.volumeData[vindex];\n            }\n\n            var volume = Math.sqrt(sum / this.volumeData.length);\n           // log.debug(\"volume: \" + volume + ', hadsound: ' + this.alreadyhadsound);\n            //if we already had a sound, we are looking for end of speech\n            if(volume < this.silencelevel && this.alreadyhadsound){\n                this.silencecount++;\n                if(this.silencecount>=this.silenceintervals){\n                    this.therecorder.silence_detected();\n                }\n            //if we have a sound, reset silence count to zero, and flag that we have started\n            }else if(volume > this.silencelevel){\n                this.alreadyhadsound = true;\n                this.silencecount=0;\n            }\n        },\n\n        drawWave: function() {\n\n            var width = this.canvas.width() * 2;\n            this.listener.getByteTimeDomainData(this.analyserData);\n\n            this.canvasCtx.fillStyle = 'white';\n            this.canvasCtx.fillRect(0, 0, width, this.waveHeight*2);\n\n            this.canvasCtx.lineWidth = 5;\n            this.canvasCtx.strokeStyle = 'gray';\n            this.canvasCtx.beginPath();\n\n            var slicewaveWidth = width / this.bufferLength;\n            var x = 0;\n\n            for (var i = 0; i < this.bufferLength; i++) {\n\n                var v = this.analyserData[i] / 128.0;\n                var y = v * this.waveHeight;\n\n                if (i === 0) {\n                    // this.canvasCtx.moveTo(x, y);\n                } else {\n                    this.canvasCtx.lineTo(x, y);\n                }\n\n                x += slicewaveWidth;\n            }\n\n            this.canvasCtx.lineTo(width, this.waveHeight);\n            this.canvasCtx.stroke();\n\n        }\n    }; //end of this declaration\n\n\n});"],"names":["define","$","log","wavencoder","audiostreamer","debug","encodingconfig","streamer","encoder","microphone","isRecording","audioContext","processor","uniqueid","alreadyhadsound","silencecount","silenceintervals","silencelevel","wavconfig","bufferLen","numChannels","desiredSampleRate","mimeType","streamingconfig","clone","extend","this","init","waveHeight","therecorder","is_streaming","prepare_html","window","AudioContext","webkitAudioContext","onStop","onStream","onError","canvas","canvasCtx","getContext","start","that","sampleRate","createJavaScriptNode","createScriptProcessor","connect","destination","navigator","audioSession","type","console","mediaDevices","getUserMedia","audio","video","then","stream","update_audio","tracks","getTracks","i","length","track","kind","settings","getSettings","noiseSuppression","echoCancellation","createMediaStreamSource","streamingtoken","onaudioprocess","event","audioprocess","getBuffers","listener","createAnalyser","fftSize","bufferLength","frequencyBinCount","analyserData","Uint8Array","volumeData","clearRect","width","interval","setInterval","drawWave","detectSilence","catch","stop","clearInterval","state","close","disconnect","forEach","finish","buffers","ch","inputBuffer","getChannelData","getByteFrequencyData","sum","vindex","volume","Math","sqrt","silence_detected","getByteTimeDomainData","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","slicewaveWidth","x","y","lineTo","stroke"],"mappings":"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"}