{"version":3,"file":"audiochat.min.js","sources":["../src/audiochat.js"],"sourcesContent":["define(['jquery', 'core/log', 'mod_minilesson/definitions',\n        'mod_minilesson/ttrecorder', 'core/templates', 'core/str'],\nfunction($, log, def, ttrecorder, templates, str) {\n    \"use strict\"; // jshint ;_;\n\n    /*\n    This file is to manage the free speaking item type\n        */\n\n      log.debug('MiniLesson AudioChat: initialising');\n\n    return {\n        gradingrequesttag: \"gradingrequest\", // Tag for the grading request\n        gradingData: false, // Data returne by the grading request\n        strings: {},\n        controls: {}, // Controls for the item\n        itemdata: {}, // Item data for the item\n        index: 0, // Index of the item in the quiz\n        quizhelper: {}, // Quiz helper for the item\n        pc: null,\n        dc: null,\n        audiochat_voice: \"alloy\", // Default voice for the AI\n        isSessionStarted: false,\n        isSessionStopped: false,\n        isSessionActive: false,\n        isLoading: false,\n        isMicActive: false,\n        isMicInitialized: false, // True when getUserMedia has successfully run once\n        loadingMessages: new Set(), // To track messages that are currently loading,\n        audioContext: null,\n        analyser: null,\n        dataArray: null,\n        sourceNode: null,\n        mediaStream: null,\n        animationFrameId: null,\n        canvasCtx: null,\n        eventlogs: [],\n        items: {},\n        responses: {},\n        abortcontroller: new AbortController(),\n\n        // For making multiple instances\n        clone: function() {\n            return $.extend(true, {}, this);\n        },\n\n        init: function(index, itemdata, quizhelper) {\n            this.itemdata = itemdata;\n            log.debug('itemdata', itemdata);\n            this.quizhelper = quizhelper;\n            this.index = index;\n            this.init_strings();\n            this.init_controls(quizhelper, itemdata);\n            this.init_voice(itemdata.audiochat_voice);\n            this.register_events(index, itemdata, quizhelper);\n            this.renderUI();\n        },\n\n        init_strings: function() {\n            var self = this;\n            // Set up strings\n            str.get_strings([\n                { \"key\": \"gradebywordcount\", \"component\": \"mod_minilesson\" },\n            ]).done(function (s) {\n                var i = 0;\n                self.strings.gradebywordcount = s[i++];\n            });\n        },\n\n        next_question: function() {\n            var self = this;\n            var stepdata = {};\n            stepdata.index = self.index;\n            stepdata.hasgrade = true;\n            stepdata.totalitems = self.itemdata.totalmarks;\n            stepdata.resultsdata = {'items': Object.values(self.items)};\n            // Add grade and other results data\n            stepdata= self.grade_activity(stepdata);\n            stepdata.correctitems = Math.round((self.itemdata.totalmarks * stepdata.grade) / 100);\n            self.quizhelper.do_next(stepdata);\n        },\n\n        count_words: function() {\n            var self = this;\n            var userTranscript = [];\n            Object.values(self.items).forEach(item => {\n                if (item.content) {\n                    userTranscript.push(item.content);\n                }\n            });\n            var wordCount = userTranscript.join(' ').split(/\\s+/).length;\n            return wordCount;\n        },\n\n        grade_activity: function(stepdata) {\n          //loop through items and form a complete user transcript\n            var self = this;\n\n            if(self.gradingData && self.gradingData.score !== undefined) {\n                log.debug(\"Using grading data from AI:\", self.gradingData);\n                // If grading data is available, use it\n                stepdata.grade = self.gradingData.score;\n                stepdata.resultsdata.aifeedback = self.gradingData.feedback || \"\";\n                stepdata.resultsdata.gradeexplanation = self.gradingData.gradeexplanation || \"\";\n\n            } else {\n                //Otherwise we default to counting words\n                stepdata.resultsdata.gradeexplanation = self.strings.gradebywordcount;\n                if(self.itemdata.countwords === false || self.itemdata.targetwordcount === 0){\n                    stepdata.grade =  100;\n                }\n\n                //count words in the transcript\n                var wordcount = self.count_words();\n\n                // Calculate grade based on word count\n                stepdata.grade = Math.min(wordcount / self.itemdata.targetwordcount, 1) * 100;\n\n            }\n\n            // return stepdata\n            return stepdata;\n\n        },\n\n        register_events: function(index, itemdata, quizhelper) {\n\n            var self = this;\n\n            // Event Listeners\n            self.controls.startSessionBtn.addEventListener(\"click\", self.startSession.bind(this));\n            self.controls.stopSessionBtn.addEventListener(\"click\", self.stopSession.bind(this));\n            self.controls.retrySessionBtn.addEventListener(\"click\", self.resetSession.bind(this));\n            self.controls.cancelStartSessionBtn.addEventListener(\"click\", () => {\n                self.abortcontroller.abort();\n                self.abortcontroller = new AbortController();\n            });\n\n            $(self.controls.nextbutton).on('click', function() {\n                self.next_question();\n            });\n\n            $(\"#\" + itemdata.uniqueid + \"_container\").on('showElement', () => {\n                if (itemdata.timelimit > 0) {\n                    $(\"#\" + itemdata.uniqueid + \"_container .progress-container\").show();\n                    $(\"#\" + itemdata.uniqueid + \"_container .progress-container i\").show();\n                    $(\"#\" + itemdata.uniqueid + \"_container .progress-container #progresstimer\").progressTimer({\n                        height: '5px',\n                        timeLimit: itemdata.timelimit,\n                        onFinish: function() {\n                            nextbutton.trigger('click');\n                        }\n                    });\n                }\n            });\n\n\n            if (self.controls.toggleMicBtn) {\n                self.controls.toggleMicBtn.addEventListener(\"click\", self.toggleMute.bind(self))\n            }\n        },\n\n        init_voice: function(voice) {\n            var self = this;\n            var voices = ['alloy', 'ash', 'ballad', 'coral', 'echo', 'sage', 'shimmer', 'verse'];\n            if (voice && voices.includes(voice)) {\n                self.audiochat_voice = voice;\n            } else {\n                self.audiochat_voice = 'alloy'; // Default voice\n            }\n            log.debug(\"AudioChat voice set to:\", this.audiochat_voice);\n        },\n\n        init_controls: async function() {\n            var self = this;\n            var container = document.getElementById(self.itemdata.uniqueid + \"_container\");\n            self.controls = {\n                hiddenaudio: container.querySelector('.ml_ac_hiddenaudio'),\n                nextbutton: container.querySelector('.minilesson_nextbutton'),\n                startSessionBtn: container.querySelector(\"#start-session-btn\"),\n                stopSessionBtn: container.querySelector(\"#stop-session-btn\"),\n                loadingIndicator: container.querySelector(\"#loading-indicator\"),\n                aiAvatarSection: container.querySelector(\"#ai-avatar-section\"),\n                chatActiveMessage: container.querySelector(\"#chat-active-message\"),\n                conversationSection: container.querySelector(\"#conversation-section\"),\n                messagesContainer: container.querySelector(\"#messages-container\"),\n                micButtonContainer: container.querySelector(\"#mic-button-container\"),\n                toggleMicBtn: container.querySelector(\"#toggle-mic-btn\"),\n                micIcon: container.querySelector(\"#mic-icon\"),\n                micWaveformCanvas: container.querySelector(\"#mic-waveform-canvas\"),\n                micSelect: container.querySelector('#micselect'),\n                finishMessage: container.querySelector('#finished-message'),\n                retrySessionBtn: container.querySelector('#retry-session-btn'),\n                cancelStartSessionBtn: container.querySelector('#cancel-start-session-btn'),\n                mainWrapper: container.querySelector('.minilesson_audiochat_box .ml_unique_mainwrapper'),\n            };\n            self.canvasCtx = !self.controls.micWaveformCanvas ? null :\n                self.controls.micWaveformCanvas.getContext(\"2d\");\n\n            // Initial render\n            await self.populateMicList();\n\n        },\n\n        scrollToBottom: function() {\n            var self = this;\n            self.controls.conversationSection.firstElementChild.scrollIntoViewIfNeeded();\n            self.controls.conversationSection.firstElementChild.scrollTop = self.controls.conversationSection.firstElementChild.scrollHeight;\n        },\n\n        renderUI: function() {\n            var self = this;\n            // Session Controls\n            self.controls.startSessionBtn.classList.toggle(\"hidden\", self.isSessionActive || self.isLoading || self.isSessionStarted);\n            self.controls.loadingIndicator.classList.toggle(\"hidden\", !self.isLoading);\n            self.controls.stopSessionBtn.classList.toggle(\"hidden\", !self.isSessionActive);\n            self.controls.micButtonContainer.classList.toggle(\"hidden\", !self.isSessionActive);\n            var endScreen = self.isSessionStarted && self.isSessionStopped;\n            self.controls.finishMessage.classList.toggle(\"hidden\", !endScreen);\n            self.controls.retrySessionBtn.classList.toggle(\"hidden\", !endScreen);\n            self.controls.cancelStartSessionBtn.classList.toggle('hidden', !(self.isLoading && !self.isSessionActive));\n            if (self.controls.micSelect) {\n                //how many options are in micselect\n                var mics = self.controls.micSelect.querySelectorAll('option');\n                var noshowmics = mics.length < 2;\n                self.controls.micSelect.parentElement.classList.toggle(\n                    'hidden',\n                    noshowmics || self.isSessionStarted || self.isLoading || self.controls.micSelect.disabled\n                );\n            }\n\n            var orderedItems = [];\n            var idMap = new Map();\n            var previousMap = new Map();\n            var currentItem;\n            Object.values(self.items).forEach(item => {\n                idMap.set(item.id, item);\n                previousMap.set(item.previous_item_id, item);\n                if (item.previous_item_id === null) {\n                    currentItem = item;\n                }\n            });\n            while (currentItem) {\n                orderedItems.push(currentItem);\n                currentItem = previousMap.get(currentItem.id);\n            }\n\n            // The cute dog avatar\n            self.controls.aiAvatarSection.classList.toggle(\"hidden\", self.isSessionStarted || self.isSessionActive || self.isSessionStopped);\n            //The chat session is active message\n            self.controls.chatActiveMessage.classList.toggle(\"hidden\", !self.isSessionActive);\n            // The conversation area\n            self.controls.conversationSection.classList.toggle(\"hidden\", !(self.isSessionActive || self.isSessionStopped));\n\n            // Render messages\n            self.controls.messagesContainer.innerHTML = \"\"; // Clear existing messages\n            orderedItems.forEach((message) => {\n                if (!message.content) {\n                    return;\n                }\n                var messageDiv = document.createElement(\"div\");\n                messageDiv.className = `flex ${message.usertype === \"user\" ? \"justify-end\" : \"justify-start\"} ml_unique_ordered_message_${message.usertype === \"user\" ? \"user\" : \"assistant\"}`;\n\n                var contentDiv = document.createElement(\"div\");\n                contentDiv.className = `max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${\n                        message.usertype === \"user\" ? \"bg-blue-500 text-white\" : \"bg-gray-200 text-gray-800\"\n                    } ml_unique_content_${\n                        message.usertype === \"user\" ? \"user\" : \"assistant\"\n                    }`;\n\n                var headerDiv = document.createElement(\"div\");\n                headerDiv.className = \"flex items-center text-xs font-medium mb-1 ml_unique_headerdiv\";\n                if (message.usertype === \"assistant\") {\n                    var pictureDiv = document.createElement('div');\n                    pictureDiv.innerHTML = `\n                        <img src=\"${M.cfg.wwwroot}/mod/minilesson/pix/cutepoodll_small.png\" \n                        alt=\"AI Assistant\" class=\"mr-2 rounded-circle shadow-lg ml_unique_assistant_img\">\n                        `;\n                    headerDiv.appendChild(pictureDiv);\n                }\n                headerDiv.innerHTML += message.usertype === \"user\" ? \"Student\" : \"AI Assistant\";\n                contentDiv.appendChild(headerDiv);\n\n                var textDiv = document.createElement(\"div\");\n                textDiv.className = \"text-sm ml_unique_textsmall\";\n                textDiv.textContent = message.content;\n                contentDiv.appendChild(textDiv);\n\n                if (self.loadingMessages.has(message.id)) {\n                    var loaderDiv = document.createElement(\"div\");\n                    loaderDiv.className = \"flex items-center space-x-1 py-1 message-loader ml_unique_loadingmessage\";\n                    loaderDiv.innerHTML = `\n                        <div class=\"flex space-x-1 ml_unique_loader\">\n                            <div class=\"w-2 h-2 bg-current rounded-full ml_unique_loader_dot\"></div>\n                            <div class=\"w-2 h-2 bg-current rounded-full ml_unique_loader_dot\"></div>\n                            <div class=\"w-2 h-2 bg-current rounded-full ml_unique_loader_dot\"></div>\n                        </div>\n                        <span class=\"text-xs opacity-70 ml_unique_loader_text\">AI is thinking...</span>\n                    `;\n                    contentDiv.appendChild(loaderDiv);\n                }\n\n                messageDiv.appendChild(contentDiv);\n                self.controls.messagesContainer.appendChild(messageDiv);\n            });\n\n            self.scrollToBottom();\n\n            // Update mic button container and canvas visibility\n            if (self.controls.micButtonContainer) {\n                self.controls.micButtonContainer.classList.toggle(\"active\", self.isMicActive);\n                self.controls.micButtonContainer.classList.toggle(\"bg-blue-500\", self.isMicActive); // Active background color\n                self.controls.micButtonContainer.classList.toggle(\"text-white\", self.isMicActive); // Active icon color\n                self.controls.micButtonContainer.classList.toggle(\"bg-gray-200\", !self.isMicActive); // Inactive background color\n                self.controls.micButtonContainer.classList.toggle(\"text-gray-800\", !self.isMicActive); // Inactive icon color\n            }\n\n\n            if (self.controls.micWaveformCanvas) {\n                self.controls.micWaveformCanvas.classList.toggle(\"active\", self.isMicActive);\n            }\n\n            if (self.controls.micIcon) {\n                // Set icon based on mic state\n                self.controls.micIcon.innerHTML = self.isMicActive\n                    ? `<rect id=\"primary\" x=\"2\" y=\"2\" width=\"20\" height=\"20\" rx=\"2\" style=\"fill: rgb(0, 0, 0);\"></rect>` // Mic On icon\n                    : `<path id=\"secondary\" d=\"M12,15h0a4,4,0,0,1-4-4V7a4,4,0,0,1,4-4h0a4,4,0,0,1,4,4v4A4,4,0,0,1,12,15Z\" style=\"fill: rgb(44, 169, 188); stroke-width: 2;\"></path><path id=\"primary\" d=\"M18.24,16A8,8,0,0,1,5.76,16\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;\"></path><path id=\"primary-2\" data-name=\"primary\" d=\"M12,19v2m4-10V7a4,4,0,0,0-4-4h0A4,4,0,0,0,8,7v4a4,4,0,0,0,4,4h0A4,4,0,0,0,16,11Z\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;\"></path>`; // Mic Off icon\n            }\n        },\n\n        resetSession: function() {\n            log.debug(\"reset  session\");\n            var self = this;\n            self.isLoading = false;\n            self.isSessionActive = false;\n            self.isSessionStopped = false;\n            self.isSessionStarted = false;\n            self.renderUI();\n        },\n\n        startSession: async function() {\n            var self = this;\n            var twoletterlang = self.itemdata.language.substr(0, 2);\n            var hiddenaudio = self.controls.hiddenaudio;\n            log.debug(\"Session starting\");\n            self.isLoading = true;\n            self.items = [];\n            self.renderUI();\n            // Open the RTC PeerConnection via Stun and ICE servers\n            log.debug(\"Opening peer connection...\");\n            self.pc = new RTCPeerConnection({\n                iceServers: [{\n                    urls: \"stun:stun.l.google.com:19302\"\n                }]\n            });\n\n            // Create a DataChannel for sending events (text and audio)\n            log.debug(\"creating data channel...\");\n            self.dc = self.pc.createDataChannel(\"oai-events\");\n\n            // Handle incoming messages on the DataChannel\n            self.dc.onmessage = (e) => {\n                self.eventlogs.push(e.data);\n                log.debug(\"DataChannel message:\", e.data);\n                try {\n                    var lines = e.data.split(\"\\n\").filter(Boolean);\n                    for (var line of lines) {\n                        self.handleRTCEvent.call(self, JSON.parse(line));\n                    }\n                } catch (err) {\n                    log.debug(\"Failed to parse\", err);\n                }\n            };\n            self.dc.onopen = () => {\n                log.debug(\"DataChannel open\");\n\n                //Turn detection - semantic is good for native speakers, but awful for language learners\n                // time based we give 1.5s of silence detection before posting\n                var semantic ={\n                    type: \"semantic_vad\",\n                    eagerness: \"low\",\n                };\n\n                var timebased =\n                {\n                    \"type\": \"server_vad\",\n                    \"silence_duration_ms\": 3500,\n                    \"create_response\": true, // only in conversation mode\n                    \"interrupt_response\": true, // only in conversation mode\n                    \"threshold\": 0.3, // don't set it - it never works\n                    //  \"prefix_padding_ms\": 300,\n\n                };\n\n                // Set session-wide instructions\n                self.sendEvent({\n                    type: \"session.update\",\n                    session: {\n                        instructions: self.itemdata.audiochatinstructions,\n                        input_audio_format: \"pcm16\", // Ensure correct audio encoding\n                        input_audio_transcription: {\n                            language: twoletterlang,\n                            model: \"whisper-1\" // \"gpt-4o-mini-transcribe\"  // Use a transcription model\n                        },\n                        turn_detection: timebased,\n                        speed: 0.9,\n                        voice: self.audiochat_voice,\n                        modalities: [\"text\", \"audio\"],\n                    }\n                });\n\n                // Send the first message to tell AI to say something\n                // the response create function overrides the session instructions, so we need to double up here\n                var firstmessageinstructions =  \"Please introduce yourself to the student and explain todays topic.\";\n                self.sendEvent({\n                    type: \"response.create\",\n                    response: {\n                        modalities: [\"audio\", \"text\"],\n                        instructions:  self.itemdata.audiochatinstructions + \" \" + firstmessageinstructions,\n                        voice: self.audiochat_voice\n                    }\n                });\n\n            };\n\n            // Set up the audio element to play incoming audio.\n            self.pc.ontrack = (event) => {\n                hiddenaudio.srcObject = event.streams[0];\n            };\n\n            // Set up the Mic stream.\n            self.mediaStream = await navigator.mediaDevices.getUserMedia({audio: true});\n            self.mediaStream.getTracks().forEach((track) => {\n                track.enabled = false;\n                self.pc.addTrack(track, self.mediaStream);\n            });\n\n            // Set up the RTC Connection by bouncing our request off the Moodle server\n            var offer = await self.pc.createOffer({\n                offerToReceiveAudio: true\n            });\n            await self.pc.setLocalDescription(offer);\n            // Search for server candidates for relaying messages, may take 15s\n            await self.waitForIceGathering(self.pc);\n\n            try {\n                var sdpResponse = await fetch(M.cfg.wwwroot + \"/mod/minilesson/openairtc.php\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/sdp\"\n                    },\n                    body: self.pc.localDescription.sdp,\n                    signal: self.abortcontroller.signal\n                });\n                if (!sdpResponse.ok) {\n                    log.debug(\"Failed /rtc:\", await sdpResponse.text());\n                    return;\n                }\n                log.debug(\"Received SDP answer from server\");\n                var answer = await sdpResponse.text();\n                log.debug(answer);\n                await self.pc.setRemoteDescription({\n                    type: \"answer\",\n                    sdp: answer\n                });\n                log.debug(\"Session started\");\n            } catch(e) {\n                // Close data channel if open\n                if (self.dc) {\n                    self.dc.close();\n                }\n                // Close peer connection if open\n                if (self.pc) {\n                    self.pc.close();\n                }\n                if (self.mediaStream) {\n                    self.mediaStream.getTracks().forEach((track) => track.stop());\n                }\n                self.isLoading = false;\n                self.renderUI();\n                return;\n            }\n\n            self.isLoading = false;\n            self.isSessionActive = true;\n            self.isSessionStarted = true;\n            self.isSessionStopped = false;\n            self.renderUI();\n        },\n\n        sendGradingRequest: function() {\n            var self = this;\n            // Send a final message to tell AI to grade the session and give feedback\n            var gradingInstructions = \"Please provide a percentage score for the session, an explanation of the score (for teachers), and feedback (for the student). \" +\n                 self.itemdata.audiochatgradeinstructions +\n                \"Return the response as JSON in the format: {\\\"score\\\": \\\"the score  ( 0-100 ) \\\", \\\"gradeexplanation\\\": \\\"the explanation\\\", \\\"feedback\\\": \\\"the feedback\\\"}.\";\n\n            var responsedata = {\n                // The response is out of band and not be added to the default conversation\n                conversation: \"none\",\n                modalities: [\"text\"],\n                instructions: gradingInstructions,\n                // Add the gradingrequest tag to make handltertc life easier\n                metadata: { tag: self.gradingrequesttag},\n                max_output_tokens: 500, // Keeps it tight\n                temperature: 0.6, // Optional: makes grading more deterministic\n            };\n\n            //If we wanted to reutrn an audio response (but lets not)\n            //responsedata.voice = self.audiochat_voice;\n\n            self.sendEvent({\n                type: \"response.create\",\n                response: responsedata,\n            });\n        },\n\n        stopSession: function() {\n            var self = this;\n\n            log.debug(\"Session stopping...\");\n            self.isSessionActive = false;\n            self.isSessionStopped = true;\n            self.loadingMessages.clear();\n\n            // Release mic resources when session ends\n            self.releaseMicResources();\n            self.renderUI();\n\n            // request grading information\n            // after that response, we will close the data channel and peer connection\n            //but shut it down after 2s just in case there is an error or something\n            if(self.itemdata.audiochatgradeinstructions && self.itemdata.audiochatgradeinstructions !== \"\") {\n                self.sendGradingRequest();\n                setTimeout(() => {\n                    log.debug(\"Closing session resources...\");\n                    self.closeDataChannel();\n                }, 2000);\n            }else{\n                log.debug(\"Closing session resources...\");\n                self.closeDataChannel();\n            }\n            log.debug(\"Session stopped\");\n        },\n\n        closeDataChannel: function() {\n            var self = this;\n            // Tidy up the data channel and peer connection\n            if (typeof self.dc !== 'undefined' && self.dc) {\n                self.dc.close();\n                self.dc = null;\n            }\n            if (typeof self.pc !== 'undefined' && self.pc) {\n                self.pc.close();\n                self.pc = null;\n            }\n        },\n\n        waitForIceGathering: function(pc, timeout = 15000) {\n            return new Promise((resolve) => {\n                let timer;\n\n                function checkState() {\n                    if (pc.iceGatheringState === \"complete\") {\n                        clearTimeout(timer);\n                        pc.removeEventListener(\"icegatheringstatechange\", checkState);\n                        resolve();\n                    }\n                }\n\n                pc.addEventListener(\"icegatheringstatechange\", checkState);\n\n                // Timeout to resolve with current state\n                timer = setTimeout(() => {\n                    pc.removeEventListener(\"icegatheringstatechange\", checkState);\n                    resolve(); // Resolve with as many candidates as gathered so far\n                }, timeout);\n            });\n        },\n\n        sendEvent: function(obj) {\n            var self = this;\n            if (self.dc && self.dc.readyState === \"open\") {\n                self.dc.send(JSON.stringify(obj));\n            }\n        },\n\n        handleRTCEvent: function(msg) {\n            var self = this;\n            log.debug(\"Received event:\");\n\n            // Check if its the final grading message, which we don't want to enter \"items\"\n            if (msg.type === \"response.done\" &&\n                msg.response.metadata?.tag === self.gradingrequesttag) {\n                // Check if the response corresponds to the grading event\n                    try {\n                        var jsonresponse = msg.response.output[0].content[0].text;\n                        if(!jsonresponse || jsonresponse === \"\") {\n                            log.debug(\"No valid grading data received\");\n                            self.closeDataChannel();\n                            return;\n                        }\n\n                        self.gradingData = JSON.parse(jsonresponse);\n                        log.debug(\"Grading and Feedback:\", self.gradingData);\n\n                        // Handle the grading feedback (e.g., display it)\n                        //self.displayGradingFeedback(feedbackData);\n                    } catch (err) {\n                        log.debug(\"Failed to parse grading feedback:\", err);\n                    }\n                    return;\n\n            }\n\n            // log.debug(msg);\n            var msgresponse_id = msg.response ? msg.response.id : msg.response_id;\n            var msgitem_id = msg.item ? msg.item.id : msg.item_id;\n            if (msgresponse_id) {\n                self.responses[msgresponse_id] = self.responses[msgresponse_id] || {\n                    id: msgresponse_id,\n                    itemid: msgitem_id,\n                    stack: []\n                };\n            }\n            if (msgitem_id) {\n                if (typeof self.items[msgitem_id] === 'undefined') {\n                    self.scrollToBottom();\n                }\n                self.items[msgitem_id] = self.items[msgitem_id] || {\n                    id: msgitem_id,\n                    events: [],\n                    responses: null,\n                    content: ''\n                };\n                if (msgresponse_id) {\n                    self.items[msgitem_id].responses = self.responses[msgresponse_id];\n                }\n            }\n\n            msg.time = Date.now().toString();\n\n            switch (msg.type) {\n                case \"response.created\": {\n/*```\n{\n    \"type\": \"response.created\",\n    \"event_id\": \"event_Bzbmm1vOdUpYK5LcKMPAU\",\n    \"response\": {\n        \"object\": \"realtime.response\",\n        \"id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n        \"status\": \"in_progress\",\n        \"status_details\": null,\n        \"output\": [],\n        \"conversation_id\": \"conv_BzbmjU4iAZBReV6QpTbKH\",\n        \"modalities\": [\n            \"audio\",\n            \"text\"\n        ],\n        \"voice\": \"alloy\",\n        \"output_audio_format\": \"pcm16\",\n        \"temperature\": 0.8,\n        \"max_output_tokens\": \"inf\",\n        \"usage\": null,\n        \"metadata\": null\n    }\n}\n```*/\n                    self.responses[msg.response.id].stack.push(msg);\n                    break;\n                }\n                case \"response.output_item.added\": {\n/*```\n{\n    \"type\": \"response.output_item.added\",\n    \"event_id\": \"event_BzbmnNUVJeqok4KqSLSVl\",\n    \"response_id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n    \"output_index\": 0,\n    \"item\": {\n        \"id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n        \"object\": \"realtime.item\",\n        \"type\": \"message\",\n        \"status\": \"in_progress\",\n        \"role\": \"assistant\",\n        \"content\": []\n    }\n}\n```*/\n                    self.responses[msg.response_id].stack.push(msg);\n                    break;\n                }\n                case \"conversation.item.created\": {\n/*```\n{\n    \"type\": \"conversation.item.created\",\n    \"event_id\": \"event_BzbmnttqDhvU3h2he1tK7\",\n    \"previous_item_id\": \"item_BzbmmcBxU60HVn8xvCWA2\",\n    \"item\": {\n        \"id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n        \"object\": \"realtime.item\",\n        \"type\": \"message\",\n        \"status\": \"in_progress\",\n        \"role\": \"assistant\",\n        \"content\": []\n    }\n}\n```*/\n                    self.items[msg.item.id].previous_item_id = msg.previous_item_id;\n                    self.items[msg.item.id].usertype = msg.item.role;\n                    self.items[msg.item.id].events.push(msg);\n                    if (msg.item.role === 'assistant') {\n                        self.loadingMessages.add(msgitem_id);\n                    }\n                    break;\n                }\n                case \"response.content_part.added\": {\n/*```\n{\n    \"type\": \"response.content_part.added\",\n    \"event_id\": \"event_Bzbmn7lA1i7fOfFq8ju3F\",\n    \"response_id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n    \"item_id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"part\": {\n        \"type\": \"audio\",\n        \"transcript\": \"\"\n    }\n}\n```*/\n                    self.enableMic();// Let's enable mic\n                    self.responses[msg.response_id].stack.push(msg);\n                    break;\n                }\n                case \"response.audio_transcript.delta\": {\n/*```\n{\n    \"type\": \"response.audio_transcript.delta\",\n    \"event_id\": \"event_BzbmnpxUmLA0zAnR5mRy3\",\n    \"response_id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n    \"item_id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"delta\": \"Hi\"\n}\n```*/\n                    self.responses[msg.response_id].stack.push(msg);\n                    self.items[msg.item_id].content += msg.delta;\n                    break;\n                }\n                case \"input_audio_buffer.speech_started\": {\n/*```\n{\n    \"type\": \"input_audio_buffer.speech_started\",\n    \"event_id\": \"event_BzbmnzTzta41TdJrqoFvD\",\n    \"audio_start_ms\": 2036,\n    \"item_id\": \"item_Bzbmnc228P1Hck5capBK8\"\n}\n```*/\n                    self.items[msg.item_id].events.push(msg);\n                    break;\n                }\n                case \"output_audio_buffer.cleared\": {\n/*```\n{\n    \"type\": \"output_audio_buffer.cleared\",\n    \"event_id\": \"event_f7273193069b4938\",\n    \"response_id\": \"resp_BzbmmfvbvyUuYz2hvigPm\"\n}\n```*/\n                    self.responses[msg.response_id].stack.push(msg);\n                    break;\n                }\n                case \"response.audio.done\": {\n/*```\n{\n    \"type\": \"response.audio.done\",\n    \"event_id\": \"event_Bzbmn7aEtTnprkzqE9i6X\",\n    \"response_id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n    \"item_id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n    \"output_index\": 0,\n    \"content_index\": 0\n}\n```*/\n                    self.responses[msg.response_id].stack.push(msg);\n                    break;\n                }\n                case \"response.audio_transcript.done\": {\n/*```\n{\n    \"type\": \"response.audio_transcript.done\",\n    \"event_id\": \"event_BzbmnNGRs7797nz1Qh7em\",\n    \"response_id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n    \"item_id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"transcript\": \"Hi! How are you today? What did you do today?\"\n}\n```*/\n                    self.responses[msg.response_id].stack.push(msg);\n                    self.items[msg.item_id].content = msg.transcript;\n                    break;\n                }\n                case \"response.content_part.done\": {\n/*```\n{\n    \"type\": \"response.content_part.done\",\n    \"event_id\": \"event_BzbmnYdAvAKMU7ti311Vj\",\n    \"response_id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n    \"item_id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"part\": {\n        \"type\": \"audio\",\n        \"transcript\": \"Hi! How are you today? What did you do today?\"\n    }\n}\n```*/\n                    self.responses[msg.response_id].stack.push(msg);\n                    break;\n                }\n                case \"response.output_item.done\": {\n/*```\n{\n    \"type\": \"response.output_item.done\",\n    \"event_id\": \"event_BzbmnhD5RdLxAOnko94Z1\",\n    \"response_id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n    \"output_index\": 0,\n    \"item\": {\n        \"id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n        \"object\": \"realtime.item\",\n        \"type\": \"message\",\n        \"status\": \"incomplete\",\n        \"role\": \"assistant\",\n        \"content\": [\n            {\n                \"type\": \"audio\",\n                \"transcript\": \"Hi! How are you today? What did you do today?\"\n            }\n        ]\n    }\n}\n```*/\n                    self.responses[msg.response_id].stack.push(msg);\n                    self.loadingMessages.delete(msg.item.id);\n                    break;\n                }\n                case \"response.done\": {\n/*```\n{\n    \"type\": \"response.done\",\n    \"event_id\": \"event_Bzbmn8bIaGB59d6qG7LQS\",\n    \"response\": {\n        \"object\": \"realtime.response\",\n        \"id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n        \"status\": \"cancelled\",\n        \"status_details\": {\n            \"type\": \"cancelled\",\n            \"reason\": \"turn_detected\"\n        },\n        \"output\": [\n            {\n                \"id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n                \"object\": \"realtime.item\",\n                \"type\": \"message\",\n                \"status\": \"incomplete\",\n                \"role\": \"assistant\",\n                \"content\": [\n                    {\n                        \"type\": \"audio\",\n                        \"transcript\": \"Hi! How are you today? What did you do today?\"\n                    }\n                ]\n            }\n        ],\n        \"conversation_id\": \"conv_BzbmjU4iAZBReV6QpTbKH\",\n        \"modalities\": [\n            \"audio\",\n            \"text\"\n        ],\n        \"voice\": \"alloy\",\n        \"output_audio_format\": \"pcm16\",\n        \"temperature\": 0.8,\n        \"max_output_tokens\": \"inf\",\n        \"usage\": {\n            \"total_tokens\": 170,\n            \"input_tokens\": 94,\n            \"output_tokens\": 76,\n            \"input_token_details\": {\n                \"text_tokens\": 87,\n                \"audio_tokens\": 7,\n                \"cached_tokens\": 0,\n                \"cached_tokens_details\": {\n                    \"text_tokens\": 0,\n                    \"audio_tokens\": 0\n                }\n            },\n            \"output_token_details\": {\n                \"text_tokens\": 23,\n                \"audio_tokens\": 53\n            }\n        },\n        \"metadata\": null\n    }\n}\n```*/\n                    self.responses[msg.response.id].stack.push(msg);\n                    break;\n                }\n                case \"output_audio_buffer.stopped\": {\n/*```\n{\n    \"type\":\"output_audio_buffer.stopped\",\n    \"event_id\":\"event_0ebd8495b5a945e5\",\n    \"response_id\":\"resp_C17PJbWxcyg7tgQBVTAaL\"\n}\n```*/\n                    if (!self.isMicActive) {\n                        self.toggleMute();\n                    }\n                    self.responses[msg.response.id].stack.push(msg);\n                    break;\n                }\n                case \"conversation.item.truncated\": {\n/*```\n{\n    \"type\": \"conversation.item.truncated\",\n    \"event_id\": \"event_BzbmnGqfHdq1hy2Wr2fnA\",\n    \"item_id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n    \"content_index\": 0,\n    \"audio_end_ms\": 261\n}\n```*/\n                    self.items[msg.item_id].events.push(msg);\n                    break;\n                }\n                // User events.\n                case \"input_audio_buffer.speech_started\": {\n/*```\n{\n    \"type\": \"input_audio_buffer.speech_started\",\n    \"event_id\": \"event_Bzbmm9FJ5oCTmCpng9tem\",\n    \"audio_start_ms\": 820,\n    \"item_id\": \"item_BzbmmcBxU60HVn8xvCWA2\"\n}\n```*/\n                    self.items[msg.item_id].events.push(msg);\n                    break;\n                }\n                case \"input_audio_buffer.speech_stopped\": {\n/*```\n{\n    \"type\": \"input_audio_buffer.speech_stopped\",\n    \"event_id\": \"event_BzbmmUgLX2JKgJr1eMx0l\",\n    \"audio_end_ms\": 1568,\n    \"item_id\": \"item_BzbmmcBxU60HVn8xvCWA2\"\n}\n```*/\n                    if (self.isMicActive) {\n                        self.toggleMute();// Let's disable mic\n                        self.disableMic();\n                    }\n                    self.items[msg.item_id].events.push(msg);\n                    break;\n                }\n                case \"input_audio_buffer.committed\": {\n/*```\n{\n    \"type\": \"input_audio_buffer.committed\",\n    \"event_id\": \"event_BzbmmOICFLRU8vnGEJ6vM\",\n    \"previous_item_id\": null,\n    \"item_id\": \"item_BzbmmcBxU60HVn8xvCWA2\"\n}\n```*/\n                    self.items[msg.item_id].events.push(msg);\n                    break;\n                }\n                case \"conversation.item.created\": {\n/*```\n{\n    \"type\": \"conversation.item.created\",\n    \"event_id\": \"event_BzbmmiskBBbCkRSHvUVrL\",\n    \"previous_item_id\": null,\n    \"item\": {\n        \"id\": \"item_BzbmmcBxU60HVn8xvCWA2\",\n        \"object\": \"realtime.item\",\n        \"type\": \"message\",\n        \"status\": \"completed\",\n        \"role\": \"user\",\n        \"content\": [\n            {\n                \"type\": \"input_audio\",\n                \"transcript\": null\n            }\n        ]\n    }\n}\n```*/\n                    self.items[msg.item.id].events.push(msg);\n                    break;\n                }\n                case \"conversation.item.input_audio_transcription.delta\": {\n/*```\n{\n    \"type\": \"conversation.item.input_audio_transcription.delta\",\n    \"event_id\": \"event_BzbmonQuYXZ7QxUCOLlZd\",\n    \"item_id\": \"item_BzbmmcBxU60HVn8xvCWA2\",\n    \"content_index\": 0,\n    \"delta\": \"Hey.\"\n}\n```*/\n                    self.items[msg.item_id].events.push(msg);\n                    self.items[msg.item_id].content += msg.delta;\n                    break;\n                }\n                case \"conversation.item.input_audio_transcription.completed\": {\n/*```\n{\n    \"type\": \"conversation.item.input_audio_transcription.completed\",\n    \"event_id\": \"event_BzbmotVIjHphgHjViNkZk\",\n    \"item_id\": \"item_BzbmmcBxU60HVn8xvCWA2\",\n    \"content_index\": 0,\n    \"transcript\": \"Hey.\",\n    \"usage\": {\n        \"type\": \"duration\",\n        \"seconds\": 1\n    }\n}\n```*/\n                    self.items[msg.item_id].events.push(msg);\n                    self.items[msg.item_id].content = msg.transcript;\n                    self.loadingMessages.delete(msg.item_id);\n                    break;\n                }\n            }\n            self.renderUI();\n        },\n\n        enableMic: function() {\n            var self = this;\n            if (self.controls.toggleMicBtn) {\n                log.debug('Enabling mic');\n                self.controls.toggleMicBtn.parentElement.classList.remove('disabled');\n            }\n        },\n\n        disableMic: function() {\n            var self = this;\n            if (self.controls.toggleMicBtn) {\n                log.debug('Disabling mic');\n                self.controls.toggleMicBtn.parentElement.classList.add('disabled');\n            }\n        },\n\n        initializeMicStream: async function() {\n            var self = this;\n            try {\n                self.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n                self.analyser = self.audioContext.createAnalyser();\n                self.analyser.fftSize = 2048;\n                const bufferLength = self.analyser.frequencyBinCount;\n                self.dataArray = new Uint8Array(bufferLength);\n\n                self.sourceNode = self.audioContext.createMediaStreamSource(self.mediaStream);\n                // Source is connected/disconnected in toggleMute\n                self.isMicInitialized = true;\n                return true;\n            } catch (err) {\n                log.debug(\"Error accessing microphone:\", err);\n                self.isMicInitialized = false;\n                log.debug(\"Could not access microphone. Please ensure it's connected and permissions are granted.\");\n                return false;\n            }\n        },\n\n        // Toggles mute/unmute state of the mic\n        toggleMute: async function() {\n            var self = this;\n            if (!self.isMicInitialized) {\n                const success = await self.initializeMicStream();\n                if (!success) {\n                    return;\n                } // If initialization failed, stop here\n            }\n\n            if (self.isMicActive) {\n                // Mute mic: Disconnect source from analyser\n                if (self.sourceNode && self.analyser) {\n                    self.sourceNode.disconnect(self.analyser);\n                }\n                if (self.animationFrameId) {\n                    cancelAnimationFrame(self.animationFrameId);\n                    self.animationFrameId = null;\n                }\n                if (self.pc) {\n                    self.mediaStream.getTracks().forEach((track) => {\n                        track.enabled = false;\n                    });\n                }\n                if (self.canvasCtx) {\n                    self.canvasCtx.clearRect(0, 0, self.controls.micWaveformCanvas.width, self.controls.micWaveformCanvas.height); // Clear canvas\n                }\n                self.isMicActive = false;\n            } else {\n                // Unmute mic: Connect source to analyser\n                if (self.sourceNode && self.analyser) {\n                    self.sourceNode.connect(self.analyser);\n                }\n\n                if (self.pc) {\n                    self.mediaStream.getTracks().forEach((track) => {\n                        track.enabled = true;\n                    });\n                }\n                self.isMicActive = true;\n                self.drawWave(); // Start drawing waveform\n            }\n            self.renderUI(); // Update UI\n        },\n\n        releaseMicResources: function() {\n            var self = this;\n            if (self.animationFrameId) {\n                cancelAnimationFrame(self.animationFrameId);\n                self.animationFrameId = null;\n            }\n            if (self.mediaStream) {\n                self.mediaStream.getTracks().forEach((track) => {\n                    if (typeof self.pc !== 'undefined' && self.pc) {\n                        // Find the RTCRtpSender associated with the track\n                        const sender = self.pc.getSenders().find(s => s.track === track);\n                        // Remove the sender if it exists\n                        if (sender) {\n                            self.pc.removeTrack(sender);\n                        }\n                    }\n                    track.stop();\n                });\n                self.mediaStream = null;\n            }\n            if (self.sourceNode) {\n                self.sourceNode.disconnect();\n                self.sourceNode = null;\n            }\n            if (self.audioContext) {\n                self.audioContext.close();\n                self.audioContext = null;\n            }\n            self.isMicActive = false;\n            self.isMicInitialized = false;\n            if (self.canvasCtx) {\n                self.canvasCtx.clearRect(0, 0, self.controls.micWaveformCanvas.width, self.controls.micWaveformCanvas.height); // Clear canvas\n            }\n            self.renderUI(); // Update UI to show mic inactive\n        },\n\n        drawWave: function() {\n            var self = this;\n            if (!self.canvasCtx || !self.analyser || !self.dataArray || !self.isMicActive) {\n                self.animationFrameId = null; // Stop animation if conditions are not met\n                return;\n            }\n\n            const WIDTH = self.controls.micWaveformCanvas.width;\n            const HEIGHT = self.controls.micWaveformCanvas.height;\n\n            self.animationFrameId = requestAnimationFrame(self.drawWave.bind(self));\n\n            self.analyser.getByteTimeDomainData(self.dataArray); // Get waveform data\n\n            self.canvasCtx.clearRect(0, 0, WIDTH, HEIGHT); // Clear previous drawing\n            self.canvasCtx.lineWidth = 2;\n            self.canvasCtx.strokeStyle = \"rgb(255, 255, 255)\"; // White color for wave on blue background\n\n            self.canvasCtx.beginPath();\n\n            const sliceWidth = (WIDTH * 1.0) / self.dataArray.length;\n            let x = 0;\n\n            for (let i = 0; i < self.dataArray.length; i++) {\n                const v = self.dataArray[i] / 128.0; // Normalize to 0-2\n                const y = (v * HEIGHT) / 2;\n\n                if (i === 0) {\n                    self.canvasCtx.moveTo(x, y);\n                } else {\n                    self.canvasCtx.lineTo(x, y);\n                }\n\n                x += sliceWidth;\n            }\n\n            self.canvasCtx.lineTo(WIDTH, HEIGHT / 2);\n            self.canvasCtx.stroke();\n        },\n\n        populateMicList: async function() {\n            var self = this;\n            try {\n                const devices = await navigator.mediaDevices.enumerateDevices();\n                const mics = devices.filter(device => device.kind === \"audioinput\");\n                const select = self.controls.micSelect;\n\n                select.innerHTML = \"\"; // Clear existing options\n\n                // Group by groupId to remove duplicates\n                const uniqueMics = [];\n                const seenGroups = new Set();\n\n                for (const mic of mics) {\n                    if (!seenGroups.has(mic.groupId)) {\n                        uniqueMics.push(mic);\n                        seenGroups.add(mic.groupId);\n                    }\n                }\n\n                if (uniqueMics.length <= 1) {\n                    select.disabled = true;\n                    return;\n                }\n                uniqueMics.forEach((mic, index) => {\n                    const option = document.createElement(\"option\");\n                    option.value = mic.deviceId;\n                    option.text = mic.label || `Microphone ${index + 1}`;\n                    select.appendChild(option);\n                });\n                select.parentElement.classList.remove('hidden');\n\n                // Set change listener\n                select.addEventListener(\"change\", async(e) => {\n                    const deviceId = e.target.value;\n                    await self.switchMic(deviceId);\n                });\n            } catch (err) {\n                log.debug(\"Failed to get microphone list:\", err);\n            }\n        },\n\n        switchMic: async function(deviceId) {\n            var self = this;\n\n            // Stop and release current mic\n            if (self.mediaStream) {\n                self.mediaStream.getTracks().forEach(track => track.stop());\n            }\n\n            try {\n                // Get new media stream from selected device\n                self.mediaStream = await navigator.mediaDevices.getUserMedia({\n                    audio: {deviceId: {exact: deviceId}}\n                });\n\n                // Replace tracks in PeerConnection\n                if (self.pc) {\n                    const senders = self.pc.getSenders();\n                    const audioTrack = self.mediaStream.getAudioTracks()[0];\n                    const audioSender = senders.find(sender => sender.track.kind === 'audio');\n                    if (audioSender) {\n                        audioSender.replaceTrack(audioTrack);\n                    }\n                }\n\n                // Reinitialize mic stream and waveform\n                await self.initializeMicStream();\n                if (self.isMicInitialized) {\n                    self.sourceNode.connect(self.analyser);\n                    self.mediaStream.getTracks().forEach((track) => {\n                        track.enabled = self.isMicActive;\n                    });\n                    if (self.isMicActive) {\n                        self.drawWave();\n                    }\n                }\n\n                log.debug(\"Switched microphone to:\" + deviceId);\n            } catch (err) {\n                log.debug(\"Failed to switch microphone:\");\n                log.debug(err);\n            }\n        },\n\n        // Dummy feedback display code\n        displayGradingFeedback: function(feedbackData) {\n            var self = this;\n\n            // Example: Update the UI with the grade and feedback\n            var feedbackContainer = self.controls.finishMessage;\n            feedbackContainer.innerHTML = `\n                <h3>Session Feedback</h3>\n                <p><strong>Grade:</strong> ${feedbackData.grade}%</p>\n                <p><strong>Explanation:</strong> ${feedbackData.gradeExplanation}</p>\n                <p><strong>Feedback:</strong> ${feedbackData.feedback}</p>\n        `;\n            feedbackContainer.classList.remove(\"hidden\");\n        }\n\n    }; // End of return object.\n});"],"names":["define","$","log","def","ttrecorder","templates","str","debug","gradingrequesttag","gradingData","strings","controls","itemdata","index","quizhelper","pc","dc","audiochat_voice","isSessionStarted","isSessionStopped","isSessionActive","isLoading","isMicActive","isMicInitialized","loadingMessages","Set","audioContext","analyser","dataArray","sourceNode","mediaStream","animationFrameId","canvasCtx","eventlogs","items","responses","abortcontroller","AbortController","clone","extend","this","init","init_strings","init_controls","init_voice","register_events","renderUI","self","get_strings","done","s","i","gradebywordcount","next_question","stepdata","hasgrade","totalitems","totalmarks","resultsdata","Object","values","grade_activity","correctitems","Math","round","grade","do_next","count_words","userTranscript","forEach","item","content","push","join","split","length","undefined","score","aifeedback","feedback","gradeexplanation","countwords","targetwordcount","wordcount","min","startSessionBtn","addEventListener","startSession","bind","stopSessionBtn","stopSession","retrySessionBtn","resetSession","cancelStartSessionBtn","abort","nextbutton","on","uniqueid","timelimit","show","progressTimer","height","timeLimit","onFinish","trigger","toggleMicBtn","toggleMute","voice","includes","async","container","document","getElementById","hiddenaudio","querySelector","loadingIndicator","aiAvatarSection","chatActiveMessage","conversationSection","messagesContainer","micButtonContainer","micIcon","micWaveformCanvas","micSelect","finishMessage","mainWrapper","getContext","populateMicList","scrollToBottom","firstElementChild","scrollIntoViewIfNeeded","scrollTop","scrollHeight","classList","toggle","endScreen","noshowmics","querySelectorAll","parentElement","disabled","currentItem","orderedItems","idMap","Map","previousMap","set","id","previous_item_id","get","innerHTML","message","messageDiv","createElement","className","usertype","contentDiv","headerDiv","pictureDiv","M","cfg","wwwroot","appendChild","textDiv","textContent","has","loaderDiv","twoletterlang","language","substr","RTCPeerConnection","iceServers","urls","createDataChannel","onmessage","e","data","lines","filter","Boolean","line","handleRTCEvent","call","JSON","parse","err","onopen","sendEvent","type","session","instructions","audiochatinstructions","input_audio_format","input_audio_transcription","model","turn_detection","speed","modalities","response","ontrack","event","srcObject","streams","navigator","mediaDevices","getUserMedia","audio","getTracks","track","enabled","addTrack","offer","createOffer","offerToReceiveAudio","setLocalDescription","waitForIceGathering","sdpResponse","fetch","method","headers","body","localDescription","sdp","signal","ok","text","answer","setRemoteDescription","close","stop","sendGradingRequest","responsedata","conversation","audiochatgradeinstructions","metadata","tag","max_output_tokens","temperature","clear","releaseMicResources","setTimeout","closeDataChannel","timeout","Promise","resolve","timer","checkState","iceGatheringState","clearTimeout","removeEventListener","obj","readyState","send","stringify","msg","msgresponse_id","response_id","msgitem_id","item_id","itemid","stack","events","time","Date","now","toString","role","add","enableMic","delta","transcript","delete","disableMic","jsonresponse","output","remove","initializeMicStream","window","AudioContext","webkitAudioContext","createAnalyser","fftSize","bufferLength","frequencyBinCount","Uint8Array","createMediaStreamSource","disconnect","cancelAnimationFrame","clearRect","width","connect","drawWave","sender","getSenders","find","removeTrack","WIDTH","HEIGHT","requestAnimationFrame","getByteTimeDomainData","lineWidth","strokeStyle","beginPath","sliceWidth","x","y","moveTo","lineTo","stroke","mics","enumerateDevices","device","kind","select","uniqueMics","seenGroups","mic","groupId","option","value","deviceId","label","target","switchMic","exact","senders","audioTrack","getAudioTracks","audioSender","replaceTrack","displayGradingFeedback","feedbackData","feedbackContainer","gradeExplanation"],"mappings":"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"}