{"version":3,"file":"audiochat.min.js","sources":["../src/audiochat.js"],"sourcesContent":["define(['jquery', 'core/log', 'mod_minilesson/definitions',\n        'mod_minilesson/ttrecorder', 'core/templates', 'core/str'],\nfunction($, log, def, ttrecorder, templates, str) {\n    \"use strict\"; // jshint ;_;\n\n    /*\n    This file is to manage the free speaking item type\n        */\n\n      log.debug('MiniLesson AudioChat: initialising');\n\n    return {\n        autocreateresponse : false, // If true, the response will be created automatically\n        gradingrequesttag: \"gradingrequest\", // Tag for the grading request\n        gradingData: false, // Data returne by the grading request\n        strings: {},\n        controls: {}, // Controls for the item\n        itemdata: {}, // Item data for the item\n        index: 0, // Index of the item in the quiz\n        quizhelper: {}, // Quiz helper for the item\n        pc: null,\n        dc: null,\n        audiochat_voice: \"alloy\", // Default voice for the AI\n        isSessionStarted: false,\n        isSessionStopped: false,\n        isSessionActive: false,\n        isLoading: false,\n        isMicActive: false,\n        isMicInitialized: false, // True when getUserMedia has successfully run once\n        loadingMessages: new Set(), // To track messages that are currently loading,\n        audioContext: null,\n        analyser: null,\n        dataArray: null,\n        sourceNode: null,\n        mediaStream: null,\n        animationFrameId: null,\n        canvasCtx: null,\n        eventlogs: [],\n        items: {},\n        responses: {},\n        abortcontroller: new AbortController(),\n        dataininputbuffer: false,\n        //Turn detection - semantic is good for native speakers, but awful for language learners\n        // time based we give 1.5s of silence detection before posting\n        semantic_vad: {\n            type: \"semantic_vad\",\n            eagerness: \"low\",\n        },\n\n        timebased_vad: {\n            type: \"server_vad\",\n            silence_duration_ms: 3500,\n            create_response: true, // true = it will turn on and off the mic and respond\n            interrupt_response: true, // only in conversation mode\n            threshold: 0.3,\n            //  \"prefix_padding_ms\": 300,\n        },\n\n        // For making multiple instances\n        clone: function() {\n            return $.extend(true, {}, this);\n        },\n\n        init: function(index, itemdata, quizhelper) {\n            this.itemdata = itemdata;\n            this.autocreateresponse = itemdata.audiochat_autoresponse || false;\n            log.debug('itemdata', itemdata);\n            this.quizhelper = quizhelper;\n            this.index = index;\n            this.init_strings();\n            this.init_controls(quizhelper, itemdata);\n            this.init_voice(itemdata.audiochat_voice);\n            this.register_events(index, itemdata, quizhelper);\n            this.renderUI();\n        },\n\n        init_strings: function() {\n            var self = this;\n            // Set up strings\n            str.get_strings([\n                { \"key\": \"gradebywordcount\", \"component\": \"mod_minilesson\" },\n            ]).done(function (s) {\n                var i = 0;\n                self.strings.gradebywordcount = s[i++];\n            });\n        },\n\n        next_question: function() {\n            var self = this;\n            var stepdata = {};\n            stepdata.index = self.index;\n            stepdata.hasgrade = true;\n            stepdata.totalitems = self.itemdata.totalmarks;\n            stepdata.resultsdata = {'items': Object.values(self.items)};\n            // Add grade and other results data\n            stepdata= self.grade_activity(stepdata);\n            stepdata.correctitems = Math.round((self.itemdata.totalmarks * stepdata.grade) / 100);\n            self.quizhelper.do_next(stepdata);\n        },\n\n        count_words: function() {\n            var self = this;\n            var userTranscript = [];\n            Object.values(self.items).forEach(item => {\n                if (item.content) {\n                    userTranscript.push(item.content);\n                }\n            });\n            var wordCount = userTranscript.join(' ').split(/\\s+/).length;\n            return wordCount;\n        },\n\n        toggle_autocreate_response: function() {\n            var self = this;\n            self.autocreateresponse = !self.autocreateresponse;\n            self.timebased_vad.create_response = self.autocreateresponse;\n            log.debug(\"Autocreate response toggled:\", self.autocreateresponse);\n            self.dc.send(JSON.stringify({\n                type: \"session.update\",\n                session: {\n                    turn_detection: self.timebased_vad,\n                }\n            }));\n        },\n\n        grade_activity: function(stepdata) {\n            //loop through items and form a complete user transcript\n            var self = this;\n\n            //count words in the transcript\n            var wordcount = self.count_words();\n\n            if(self.gradingData && self.gradingData.score !== undefined) {\n                log.debug(\"Using grading data from AI:\", self.gradingData);\n                // If grading data is available, use it\n                stepdata.grade = self.gradingData.score;\n\n                //If target word count is greater then 0, we lower the grade if it is lower then that target word count\n                if(typeof stepdata.grade === 'number' && \n                    typeof wordcount === 'number' &&\n                    self.itemdata.targetwordcount > 0 &&\n                     wordcount < self.itemdata.targetwordcount) {\n                    stepdata.grade = Math.round(stepdata.grade * (wordcount / self.itemdata.targetwordcount));\n                }\n\n\n                stepdata.resultsdata.aifeedback = self.gradingData.feedback || \"\";\n                stepdata.resultsdata.gradeexplanation = self.gradingData.gradeexplanation || \"\";\n\n            } else {\n                //Otherwise we default to counting words\n                stepdata.resultsdata.gradeexplanation = self.strings.gradebywordcount;\n                if(self.itemdata.countwords === false || self.itemdata.targetwordcount === 0){\n                    stepdata.grade =  100;\n                }\n\n                \n\n                // Calculate grade based on word count\n                stepdata.grade = Math.min(wordcount / self.itemdata.targetwordcount, 1) * 100;\n\n            }\n\n            // return stepdata\n            return stepdata;\n\n        },\n\n        register_events: function(index, itemdata, quizhelper) {\n\n            var self = this;\n\n            // Event Listeners\n            self.controls.startSessionBtn.addEventListener(\"click\", self.startSession.bind(this));\n            self.controls.stopSessionBtn.addEventListener(\"click\", self.stopSession.bind(this));\n            self.controls.retrySessionBtn.addEventListener(\"click\", self.resetSession.bind(this));\n            self.controls.autocreateresponseCheckbox.addEventListener(\"change\", self.toggle_autocreate_response.bind(self));\n            self.controls.cancelStartSessionBtn.addEventListener(\"click\", () => {\n                log.debug(\"Cancelling session start\");\n                self.abortcontroller.abort();\n                self.abortcontroller = new AbortController();\n            });\n\n            $(self.controls.nextbutton).on('click', function() {\n                self.next_question();\n            });\n\n            var container = $(self.controls.container);\n            container.on('showElement', () => {\n                if (itemdata.timelimit > 0) {\n                    container.find(\".progress-container\").show();\n                    container.find(\".progress-container i\").show();\n                    container.find(\".progress-container #progresstimer\").progressTimer({\n                        height: '5px',\n                        timeLimit: itemdata.timelimit,\n                        onFinish: function() {\n                            nextbutton.trigger('click');\n                        }\n                    });\n                }\n            });\n\n\n            if (self.controls.toggleMicBtn) {\n                self.controls.toggleMicBtn.addEventListener(\"click\", self.toggleMute.bind(self))\n            }\n        },\n\n        init_voice: function(voice) {\n            var self = this;\n            var voices = ['alloy', 'ash', 'ballad', 'coral', 'echo', 'sage', 'shimmer', 'verse'];\n            if (voice && voices.includes(voice)) {\n                self.audiochat_voice = voice;\n            } else {\n                self.audiochat_voice = 'alloy'; // Default voice\n            }\n            log.debug(\"AudioChat voice set to:\", this.audiochat_voice);\n        },\n\n        init_controls: async function() {\n            var self = this;\n            var container = document.getElementById(self.itemdata.uniqueid + \"_container\");\n            self.controls = {\n                hiddenaudio: container.querySelector('.ml_ac_hiddenaudio'),\n                nextbutton: container.querySelector('.minilesson_nextbutton'),\n                startSessionBtn: container.querySelector(\".ml_ac_start-session-btn\"),\n                stopSessionBtn: container.querySelector(\".ml_ac_stop-session-btn\"),\n                loadingIndicator: container.querySelector(\".ml_ac_loading-indicator\"),\n                aiAvatarSection: container.querySelector(\".ml_ac_ai-avatar-section\"),\n                chatActiveMessage: container.querySelector(\".ml_ac_chat-active-message\"),\n                conversationSection: container.querySelector(\".ml_ac_conversation-section\"),\n                messagesContainer: container.querySelector(\".ml_ac_messages-container\"),\n                micButtonContainer: container.querySelector(\".mic-button-container\"),\n                toggleMicBtn: container.querySelector(\".toggle-mic-btn\"),\n                micIcon: container.querySelector(\".mic-icon\"),\n                micWaveformCanvas: container.querySelector(\".mic-waveform-canvas\"),\n                micSelect: container.querySelector('.ml_ac_micselect'),\n                finishMessage: container.querySelector('.ml_ac_finished-message'),\n                retrySessionBtn: container.querySelector('.ml_ac_retrybtn'),\n                cancelStartSessionBtn: container.querySelector('.ml_ac_cancel-start-session-btn'),\n                autocreateresponseCheckbox: container.querySelector('.ml_ac_autoresponse-checkbox'),\n                resultscontainer: container.querySelector('.ml_ac_results_container'),\n                resultscontent: container.querySelector('.ml_ac_results_content'),\n                autocreateresponseToggle: container.querySelector('.ml_ac_autoresponse-toggle'),\n\n                clicktosendlabel: container.querySelector('.ml_ac_clicktosend'),\n                mainWrapper: container.querySelector('.minilesson_audiochat_box .ml_unique_mainwrapper'),\n            };\n            self.canvasCtx = !self.controls.micWaveformCanvas ? null :\n                self.controls.micWaveformCanvas.getContext(\"2d\");\n\n            // Initial render\n            await self.populateMicList();\n\n        },\n\n        scrollToBottom: function() {\n            var self = this;\n            self.controls.conversationSection.firstElementChild.scrollIntoViewIfNeeded();\n            self.controls.conversationSection.firstElementChild.scrollTop = self.controls.conversationSection.firstElementChild.scrollHeight;\n        },\n\n        scrollMicButtonIntoView: function() {\n            var self = this;\n            if (self.controls.micButtonContainer) {\n                self.controls.micButtonContainer.scrollIntoView({behavior: \"smooth\", block: \"center\"});\n            }\n        },\n\n        renderUI: function() {\n            var self = this;\n            // Session Controls\n            self.controls.startSessionBtn.classList.toggle(\"hidden\", self.isSessionActive || self.isLoading || self.isSessionStarted);\n            self.controls.loadingIndicator.classList.toggle(\"hidden\", !self.isLoading);\n            self.controls.stopSessionBtn.classList.toggle(\"hidden\", !self.isSessionActive);\n            self.controls.micButtonContainer.classList.toggle(\"hidden\", !self.isSessionActive);\n            var endScreen = self.isSessionStarted && self.isSessionStopped;\n            self.controls.resultscontainer.classList.toggle(\"hidden\", !endScreen && self.quizhelper.showitemreview);\n            self.controls.finishMessage.classList.toggle(\"hidden\", !endScreen);\n            self.controls.retrySessionBtn.classList.toggle(\"hidden\", !endScreen && self.itemdata.allowretry);\n            self.controls.cancelStartSessionBtn.classList.toggle('hidden', !(self.isLoading && !self.isSessionActive));\n            self.controls.autocreateresponseToggle.classList.toggle(\"hidden\", !self.isSessionActive);\n            if (self.controls.micSelect) {\n                //how many options are in micselect\n                var mics = self.controls.micSelect.querySelectorAll('option');\n                var noshowmics = mics.length < 2;\n                self.controls.micSelect.parentElement.classList.toggle(\n                    'hidden',\n                    noshowmics || self.isSessionStarted || self.isLoading || self.controls.micSelect.disabled\n                );\n            }\n\n            var orderedItems = [];\n            var idMap = new Map();\n            var previousMap = new Map();\n            var currentItem;\n            Object.values(self.items).forEach(item => {\n                idMap.set(item.id, item);\n                previousMap.set(item.previous_item_id, item);\n                if (item.previous_item_id === null) {\n                    currentItem = item;\n                }\n            });\n            while (currentItem) {\n                orderedItems.push(currentItem);\n                currentItem = previousMap.get(currentItem.id);\n            }\n\n            // The cute dog avatar\n            self.controls.aiAvatarSection.classList.toggle(\"hidden\", self.isSessionStarted || self.isSessionActive || self.isSessionStopped);\n            //The chat session is active message\n            self.controls.chatActiveMessage.classList.toggle(\"hidden\", !self.isSessionActive);\n            // The conversation area\n            self.controls.conversationSection.classList.toggle(\"hidden\", !(self.isSessionActive || self.isSessionStopped));\n\n            // Render messages\n            self.controls.messagesContainer.innerHTML = \"\"; // Clear existing messages\n            \n            orderedItems.forEach((message) => {\n                if (!message.content) {\n                    return;\n                }\n                var messageDiv = document.createElement(\"div\");\n                messageDiv.className = `flex ${message.usertype === \"user\" ? \"justify-end\" : \"justify-start\"} ml_unique_ordered_message_${message.usertype === \"user\" ? \"user\" : \"assistant\"}`;\n\n                var contentDiv = document.createElement(\"div\");\n                contentDiv.className = `max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${\n                        message.usertype === \"user\" ? \"bg-blue-500 text-white\" : \"bg-gray-200 text-gray-800\"\n                    } ml_unique_content_${\n                        message.usertype === \"user\" ? \"user\" : \"assistant\"\n                    }`;\n\n                var headerDiv = document.createElement(\"div\");\n                headerDiv.className = \"flex items-center text-xs font-medium mb-1 ml_unique_headerdiv\";\n                if (message.usertype === \"assistant\") {\n                    var pictureDiv = document.createElement('div');\n                    pictureDiv.innerHTML = `\n                        <img src=\"${M.cfg.wwwroot}/mod/minilesson/pix/cutepoodll_small.png\" \n                        alt=\"AI Assistant\" class=\"mr-2 rounded-circle shadow-lg ml_unique_assistant_img\">\n                        `;\n                    headerDiv.appendChild(pictureDiv);\n                }\n                headerDiv.innerHTML += message.usertype === \"user\" ? \"Student\" : \"AI Assistant\";\n                contentDiv.appendChild(headerDiv);\n\n                var textDiv = document.createElement(\"div\");\n                textDiv.className = \"text-sm ml_unique_textsmall\";\n                textDiv.textContent = message.content;\n                contentDiv.appendChild(textDiv);\n\n                if (self.loadingMessages.has(message.id)) {\n                    var loaderDiv = document.createElement(\"div\");\n                    loaderDiv.className = \"flex items-center space-x-1 py-1 message-loader ml_unique_loadingmessage\";\n                    loaderDiv.innerHTML = `\n                        <div class=\"flex space-x-1 ml_unique_loader\">\n                            <div class=\"w-2 h-2 bg-current rounded-full ml_unique_loader_dot\"></div>\n                            <div class=\"w-2 h-2 bg-current rounded-full ml_unique_loader_dot\"></div>\n                            <div class=\"w-2 h-2 bg-current rounded-full ml_unique_loader_dot\"></div>\n                        </div>\n                        <span class=\"text-xs opacity-70 ml_unique_loader_text\">AI is thinking...</span>\n                    `;\n                    contentDiv.appendChild(loaderDiv);\n                }\n\n                messageDiv.appendChild(contentDiv);\n                self.controls.messagesContainer.appendChild(messageDiv);\n            });\n\n            self.scrollToBottom();\n           // self.scrollMicButtonIntoView();\n\n            // Update mic button container and canvas visibility\n            if (self.controls.micButtonContainer) {\n                self.controls.micButtonContainer.classList.toggle(\"active\", self.isMicActive);\n                self.controls.micButtonContainer.classList.toggle(\"bg-blue-500\", self.isMicActive); // Active background color\n                self.controls.micButtonContainer.classList.toggle(\"text-white\", self.isMicActive); // Active icon color\n                self.controls.micButtonContainer.classList.toggle(\"bg-gray-200\", !self.isMicActive); // Inactive background color\n                self.controls.micButtonContainer.classList.toggle(\"text-gray-800\", !self.isMicActive); // Inactive icon color\n            }\n\n\n            if (self.controls.micWaveformCanvas) {\n                self.controls.micWaveformCanvas.classList.toggle(\"active\", self.isMicActive);\n            }\n\n            if (self.controls.micIcon) {\n                // Set icon based on mic state\n                self.controls.micIcon.innerHTML = self.isMicActive\n                    ? `<rect id=\"primary\" x=\"2\" y=\"2\" width=\"20\" height=\"20\" rx=\"2\" style=\"fill: rgb(0, 0, 0);\"></rect>` // Mic On icon\n                    : `<path id=\"secondary\" d=\"M12,15h0a4,4,0,0,1-4-4V7a4,4,0,0,1,4-4h0a4,4,0,0,1,4,4v4A4,4,0,0,1,12,15Z\" style=\"fill: rgb(44, 169, 188); stroke-width: 2;\"></path><path id=\"primary\" d=\"M18.24,16A8,8,0,0,1,5.76,16\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;\"></path><path id=\"primary-2\" data-name=\"primary\" d=\"M12,19v2m4-10V7a4,4,0,0,0-4-4h0A4,4,0,0,0,8,7v4a4,4,0,0,0,4,4h0A4,4,0,0,0,16,11Z\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;\"></path>`; // Mic Off icon\n            }\n\n            //show or not show clicktosendlabel\n            if (self.isMicActive && !self.autocreateresponse) {\n                self.controls.clicktosendlabel.classList.remove(\"hidden\");\n            } else {\n                self.controls.clicktosendlabel.classList.add(\"hidden\");\n            }\n\n        },\n\n        resetSession: function() {\n            log.debug(\"reset  session\");\n            var self = this;\n            self.isLoading = false;\n            self.isSessionActive = false;\n            self.isSessionStopped = false;\n            self.isSessionStarted = false;\n            self.renderUI();\n        },\n\n        startSession: async function() {\n            var self = this;\n            var twoletterlang = self.itemdata.language.substr(0, 2);\n            var hiddenaudio = self.controls.hiddenaudio;\n            log.debug(\"Session starting\");\n            self.isLoading = true;\n            self.items = [];\n            self.renderUI();\n            // Open the RTC PeerConnection via Stun and ICE servers\n            log.debug(\"Opening peer connection...\");\n            self.pc = new RTCPeerConnection({\n                iceServers: [{\n                    urls: \"stun:stun.l.google.com:19302\"\n                }]\n            });\n\n            // Create a DataChannel for sending events (text and audio)\n            log.debug(\"creating data channel...\");\n            self.dc = self.pc.createDataChannel(\"oai-events\");\n\n            // Handle incoming messages on the DataChannel\n            self.dc.onmessage = (e) => {\n                self.eventlogs.push(e.data);\n                log.debug(\"DataChannel message:\", e.data);\n                try {\n                    var lines = e.data.split(\"\\n\").filter(Boolean);\n                    for (var line of lines) {\n                        self.handleRTCEvent.call(self, JSON.parse(line));\n                    }\n                } catch (err) {\n                    log.debug(\"Failed to parse\", err);\n                }\n            };\n            self.dc.onopen = () => {\n                log.debug(\"DataChannel open\");\n\n                //Turn detection - semantic is good for native speakers, but awful for language learners\n                // time based we give 1.5s of silence detection before posting\n                var semantic_vad ={\n                    type: \"semantic_vad\",\n                    eagerness: \"low\",\n                };\n\n                // Set the auto turn detection, or manual submit flag\n                self.timebased_vad.create_response = self.autocreateresponse;\n\n                // Set session-wide instructions\n                self.sendEvent({\n                    type: \"session.update\",\n                    session: {\n                        instructions: self.itemdata.audiochatinstructions,\n                        input_audio_format: \"pcm16\", // Ensure correct audio encoding\n                        input_audio_transcription: {\n                            language: twoletterlang,\n                            model: \"whisper-1\" // \"gpt-4o-mini-transcribe\"  // Use a transcription model\n                        },\n                        turn_detection: self.timebased_vad,\n                        speed: 0.9,\n                        voice: self.audiochat_voice,\n                        modalities: [\"text\", \"audio\"],\n                    }\n                });\n\n                // Send the first message to tell AI to say something\n                // the response create function overrides the session instructions, so we need to double up here\n                var firstmessageinstructions =  \"Please introduce yourself to the student and explain todays topic.\";\n                self.sendEvent({\n                    type: \"response.create\",\n                    response: {\n                        modalities: [\"audio\", \"text\"],\n                        instructions:  self.itemdata.audiochatinstructions + \" \" + firstmessageinstructions,\n                        voice: self.audiochat_voice\n                    }\n                });\n\n            };\n\n            // Set up the audio element to play incoming audio.\n            self.pc.ontrack = (event) => {\n                hiddenaudio.srcObject = event.streams[0];\n            };\n\n            // Set up the Mic stream.\n            self.mediaStream = await navigator.mediaDevices.getUserMedia({audio: true});\n            self.mediaStream.getTracks().forEach((track) => {\n                track.enabled = false;\n                self.pc.addTrack(track, self.mediaStream);\n            });\n\n            // Set up the RTC Connection by bouncing our request off the Moodle server\n            var offer = await self.pc.createOffer({\n                offerToReceiveAudio: true\n            });\n            await self.pc.setLocalDescription(offer);\n            // Search for server candidates for relaying messages, may take 15s\n            await self.waitForIceGathering(self.pc);\n\n            try {\n                var sdpResponse = await fetch(M.cfg.wwwroot + \"/mod/minilesson/openairtc.php\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/sdp\"\n                    },\n                    body: self.pc.localDescription.sdp,\n                    signal: self.abortcontroller.signal\n                });\n                if (!sdpResponse.ok) {\n                    log.debug(\"Failed /rtc:\", await sdpResponse.text());\n                    return;\n                }\n                log.debug(\"Received SDP answer from server\");\n                var answer = await sdpResponse.text();\n                log.debug(answer);\n                await self.pc.setRemoteDescription({\n                    type: \"answer\",\n                    sdp: answer\n                });\n                log.debug(\"Session started\");\n            } catch(e) {\n                \n                if (e.name === 'AbortError') {\n                    log.debug(\"Session start aborted by user.\");\n                    // Reset UI and state as needed\n                    self.isLoading = false;\n                    self.renderUI();\n                    return;\n                }\n\n                // Close data channel if open\n                if (self.dc) {\n                    self.dc.close();\n                }\n                // Close peer connection if open\n                if (self.pc) {\n                    self.pc.close();\n                }\n                if (self.mediaStream) {\n                    self.mediaStream.getTracks().forEach((track) => track.stop());\n                }\n                self.isLoading = false;\n                self.renderUI();\n                return;\n            }\n\n            self.isLoading = false;\n            self.isSessionActive = true;\n            self.isSessionStarted = true;\n            self.isSessionStopped = false;\n            self.renderUI();\n        },\n\n        sendGradingRequest: function() {\n            var self = this;\n            // Send a final message to tell AI to grade the session and give feedback\n            var gradingInstructions = \"Please provide a percentage score for the session, an explanation of the score (for teachers), and feedback (for the student). \" +\n                 self.itemdata.audiochatgradeinstructions +\n                \"Return the response as JSON in the format: {\\\"score\\\": \\\"the score  ( 0-100 ) \\\", \\\"gradeexplanation\\\": \\\"the explanation\\\", \\\"feedback\\\": \\\"the feedback\\\"}.\";\n\n            var responsedata = {\n                // The response is out of band and not be added to the default conversation\n                conversation: \"none\",\n                modalities: [\"text\"],\n                instructions: gradingInstructions,\n                // Add the gradingrequest tag to make handltertc life easier\n                metadata: { tag: self.gradingrequesttag},\n                max_output_tokens: 500, // Keeps it tight\n                temperature: 0.6, // Optional: makes grading more deterministic\n            };\n\n            //If we wanted to reutrn an audio response (but lets not)\n            //responsedata.voice = self.audiochat_voice;\n\n            self.sendEvent({\n                type: \"response.create\",\n                response: responsedata,\n            });\n        },\n\n        stopSession: function() {\n            var self = this;\n\n            log.debug(\"Session stopping...\");\n            self.isSessionActive = false;\n            self.isSessionStopped = true;\n            self.loadingMessages.clear();\n\n            // Release mic resources when session ends\n            self.releaseMicResources();\n            self.renderUI();\n\n            // request grading information\n            // after that response, we will close the data channel and peer connection\n            //but shut it down after 2s just in case there is an error or something\n            if(self.itemdata.audiochatgradeinstructions && self.itemdata.audiochatgradeinstructions !== \"\") {\n                self.sendGradingRequest();\n\n                //add a spinner to the results content\n                //if we are not showing item review we do not need this, but in that case it is hidden anyway\n                self.controls.resultscontent.innerHTML = `<i class=\"fa fa-spinner fa-spin fa-2x\"></i>`;\n\n                setTimeout(() => {\n                    //now show the results content if that is what we are doing\n                    if(self.quizhelper.showitemreview) {\n                        self.showResults();\n                    }\n                    log.debug(\"Closing session resources...\");\n                    self.closeDataChannel();\n                }, 2000);\n            }else{\n                log.debug(\"Closing session resources...\");\n                self.closeDataChannel();\n            }\n            log.debug(\"Session stopped\");\n        },\n\n        closeDataChannel: function() {\n            var self = this;\n            // Tidy up the data channel and peer connection\n            if (typeof self.dc !== 'undefined' && self.dc) {\n                self.dc.close();\n                self.dc = null;\n            }\n            if (typeof self.pc !== 'undefined' && self.pc) {\n                self.pc.close();\n                self.pc = null;\n            }\n        },\n\n        showResults: function(){\n            var self = this;\n            var tdata = {};\n            tdata.resultsdata = {'items': Object.values(self.items)};\n            // Add grade and other results data\n            tdata = self.grade_activity(tdata);\n            log.debug( \"tdata 1\");\n            log.debug( tdata);\n\n            //calculate stars from grade\n            const stars = [];\n            const maxStars = 5;\n            // if tdata grade is NAn or undefined, set it to 0\n            if (typeof tdata.grade === 'undefined' || isNaN(tdata.grade) || tdata.grade === null || tdata.grade === \"\") {\n                tdata.grade = 0;\n            }\n           \n            const filledStars = Math.round((tdata.grade / 100) * maxStars);\n            for (let i = 0; i < maxStars; i++) {\n                stars.push({ filled: i < filledStars });\n            }\n            tdata.stars = stars;\n            log.debug(stars);\n             log.debug( \"tdata 2\");\n            log.debug( tdata);\n\n            templates.render('mod_minilesson/audiochatimmediatefeedback', tdata).then(\n                function(html, js) {\n                    self.controls.resultscontent.innerHTML = html;\n                }\n            );\n        },\n\n        waitForIceGathering: function(pc, timeout = 15000) {\n            return new Promise((resolve) => {\n                let timer;\n\n                function checkState() {\n                    if (pc.iceGatheringState === \"complete\") {\n                        clearTimeout(timer);\n                        pc.removeEventListener(\"icegatheringstatechange\", checkState);\n                        resolve();\n                    }\n                }\n\n                pc.addEventListener(\"icegatheringstatechange\", checkState);\n\n                // Timeout to resolve with current state\n                timer = setTimeout(() => {\n                    pc.removeEventListener(\"icegatheringstatechange\", checkState);\n                    resolve(); // Resolve with as many candidates as gathered so far\n                }, timeout);\n            });\n        },\n\n        sendEvent: function(obj) {\n            var self = this;\n            if (self.dc && self.dc.readyState === \"open\") {\n                self.dc.send(JSON.stringify(obj));\n            }\n        },\n\n        handleRTCEvent: function(msg) {\n            var self = this;\n            log.debug(\"Received event:\");\n\n            // Check if its the final grading message, which we don't want to enter \"items\"\n            if (msg.type === \"response.done\" &&\n                msg.response.metadata?.tag === self.gradingrequesttag) {\n                // Check if the response corresponds to the grading event\n                    try {\n                        var jsonresponse = msg.response.output[0].content[0].text;\n                        if(!jsonresponse || jsonresponse === \"\") {\n                            log.debug(\"No valid grading data received\");\n                            self.closeDataChannel();\n                            return;\n                        }\n\n                        self.gradingData = JSON.parse(jsonresponse);\n                        log.debug(\"Grading and Feedback:\", self.gradingData);\n\n                    } catch (err) {\n                        log.debug(\"Failed to parse grading feedback:\", err);\n                    }\n                    return;\n\n            }\n\n            // log.debug(msg);\n            var msgresponse_id = msg.response ? msg.response.id : msg.response_id;\n            var msgitem_id = msg.item ? msg.item.id : msg.item_id;\n            if (msgresponse_id) {\n                self.responses[msgresponse_id] = self.responses[msgresponse_id] || {\n                    id: msgresponse_id,\n                    itemid: msgitem_id,\n                    stack: []\n                };\n            }\n            if (msgitem_id) {\n                if (typeof self.items[msgitem_id] === 'undefined') {\n                    self.scrollToBottom();\n                }\n                self.items[msgitem_id] = self.items[msgitem_id] || {\n                    id: msgitem_id,\n                    events: [],\n                    responses: null,\n                    content: ''\n                };\n                if (msgresponse_id) {\n                    self.items[msgitem_id].responses = self.responses[msgresponse_id];\n                }\n            }\n\n            msg.time = Date.now().toString();\n\n            switch (msg.type) {\n                case \"response.created\": {\n/*```\n{\n    \"type\": \"response.created\",\n    \"event_id\": \"event_Bzbmm1vOdUpYK5LcKMPAU\",\n    \"response\": {\n        \"object\": \"realtime.response\",\n        \"id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n        \"status\": \"in_progress\",\n        \"status_details\": null,\n        \"output\": [],\n        \"conversation_id\": \"conv_BzbmjU4iAZBReV6QpTbKH\",\n        \"modalities\": [\n            \"audio\",\n            \"text\"\n        ],\n        \"voice\": \"alloy\",\n        \"output_audio_format\": \"pcm16\",\n        \"temperature\": 0.8,\n        \"max_output_tokens\": \"inf\",\n        \"usage\": null,\n        \"metadata\": null\n    }\n}\n```*/\n                    self.responses[msg.response.id].stack.push(msg);\n                    break;\n                }\n                case \"response.output_item.added\": {\n/*```\n{\n    \"type\": \"response.output_item.added\",\n    \"event_id\": \"event_BzbmnNUVJeqok4KqSLSVl\",\n    \"response_id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n    \"output_index\": 0,\n    \"item\": {\n        \"id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n        \"object\": \"realtime.item\",\n        \"type\": \"message\",\n        \"status\": \"in_progress\",\n        \"role\": \"assistant\",\n        \"content\": []\n    }\n}\n```*/\n                    self.responses[msg.response_id].stack.push(msg);\n                    break;\n                }\n                case \"conversation.item.created\": {\n/*```\n{\n    \"type\": \"conversation.item.created\",\n    \"event_id\": \"event_BzbmnttqDhvU3h2he1tK7\",\n    \"previous_item_id\": \"item_BzbmmcBxU60HVn8xvCWA2\",\n    \"item\": {\n        \"id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n        \"object\": \"realtime.item\",\n        \"type\": \"message\",\n        \"status\": \"in_progress\",\n        \"role\": \"assistant\",\n        \"content\": []\n    }\n}\n```*/\n                    self.items[msg.item.id].previous_item_id = msg.previous_item_id;\n                    self.items[msg.item.id].usertype = msg.item.role;\n                    self.items[msg.item.id].events.push(msg);\n                    if (msg.item.role === 'assistant') {\n                        self.loadingMessages.add(msgitem_id);\n                    }\n                    break;\n                }\n                case \"response.content_part.added\": {\n/*```\n{\n    \"type\": \"response.content_part.added\",\n    \"event_id\": \"event_Bzbmn7lA1i7fOfFq8ju3F\",\n    \"response_id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n    \"item_id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"part\": {\n        \"type\": \"audio\",\n        \"transcript\": \"\"\n    }\n}\n```*/\n                    self.enableMic();// Let's enable mic\n                    self.responses[msg.response_id].stack.push(msg);\n                    break;\n                }\n                case \"response.audio_transcript.delta\": {\n/*```\n{\n    \"type\": \"response.audio_transcript.delta\",\n    \"event_id\": \"event_BzbmnpxUmLA0zAnR5mRy3\",\n    \"response_id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n    \"item_id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"delta\": \"Hi\"\n}\n```*/\n                    self.responses[msg.response_id].stack.push(msg);\n                    self.items[msg.item_id].content += msg.delta;\n                    break;\n                }\n\n                case \"output_audio_buffer.cleared\": {\n/*```\n{\n    \"type\": \"output_audio_buffer.cleared\",\n    \"event_id\": \"event_f7273193069b4938\",\n    \"response_id\": \"resp_BzbmmfvbvyUuYz2hvigPm\"\n}\n```*/\n                    self.responses[msg.response_id].stack.push(msg);\n                    break;\n                }\n                case \"response.audio.done\": {\n/*```\n{\n    \"type\": \"response.audio.done\",\n    \"event_id\": \"event_Bzbmn7aEtTnprkzqE9i6X\",\n    \"response_id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n    \"item_id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n    \"output_index\": 0,\n    \"content_index\": 0\n}\n```*/\n                    self.responses[msg.response_id].stack.push(msg);\n                    break;\n                }\n                case \"response.audio_transcript.done\": {\n/*```\n{\n    \"type\": \"response.audio_transcript.done\",\n    \"event_id\": \"event_BzbmnNGRs7797nz1Qh7em\",\n    \"response_id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n    \"item_id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"transcript\": \"Hi! How are you today? What did you do today?\"\n}\n```*/\n                    self.responses[msg.response_id].stack.push(msg);\n                    self.items[msg.item_id].content = msg.transcript;\n                    break;\n                }\n                case \"response.content_part.done\": {\n/*```\n{\n    \"type\": \"response.content_part.done\",\n    \"event_id\": \"event_BzbmnYdAvAKMU7ti311Vj\",\n    \"response_id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n    \"item_id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"part\": {\n        \"type\": \"audio\",\n        \"transcript\": \"Hi! How are you today? What did you do today?\"\n    }\n}\n```*/\n                    self.responses[msg.response_id].stack.push(msg);\n                    break;\n                }\n                case \"response.output_item.done\": {\n/*```\n{\n    \"type\": \"response.output_item.done\",\n    \"event_id\": \"event_BzbmnhD5RdLxAOnko94Z1\",\n    \"response_id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n    \"output_index\": 0,\n    \"item\": {\n        \"id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n        \"object\": \"realtime.item\",\n        \"type\": \"message\",\n        \"status\": \"incomplete\",\n        \"role\": \"assistant\",\n        \"content\": [\n            {\n                \"type\": \"audio\",\n                \"transcript\": \"Hi! How are you today? What did you do today?\"\n            }\n        ]\n    }\n}\n```*/\n                    self.responses[msg.response_id].stack.push(msg);\n                    self.loadingMessages.delete(msg.item.id);\n                    break;\n                }\n                case \"response.done\": {\n/*```\n{\n    \"type\": \"response.done\",\n    \"event_id\": \"event_Bzbmn8bIaGB59d6qG7LQS\",\n    \"response\": {\n        \"object\": \"realtime.response\",\n        \"id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n        \"status\": \"cancelled\",\n        \"status_details\": {\n            \"type\": \"cancelled\",\n            \"reason\": \"turn_detected\"\n        },\n        \"output\": [\n            {\n                \"id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n                \"object\": \"realtime.item\",\n                \"type\": \"message\",\n                \"status\": \"incomplete\",\n                \"role\": \"assistant\",\n                \"content\": [\n                    {\n                        \"type\": \"audio\",\n                        \"transcript\": \"Hi! How are you today? What did you do today?\"\n                    }\n                ]\n            }\n        ],\n        \"conversation_id\": \"conv_BzbmjU4iAZBReV6QpTbKH\",\n        \"modalities\": [\n            \"audio\",\n            \"text\"\n        ],\n        \"voice\": \"alloy\",\n        \"output_audio_format\": \"pcm16\",\n        \"temperature\": 0.8,\n        \"max_output_tokens\": \"inf\",\n        \"usage\": {\n            \"total_tokens\": 170,\n            \"input_tokens\": 94,\n            \"output_tokens\": 76,\n            \"input_token_details\": {\n                \"text_tokens\": 87,\n                \"audio_tokens\": 7,\n                \"cached_tokens\": 0,\n                \"cached_tokens_details\": {\n                    \"text_tokens\": 0,\n                    \"audio_tokens\": 0\n                }\n            },\n            \"output_token_details\": {\n                \"text_tokens\": 23,\n                \"audio_tokens\": 53\n            }\n        },\n        \"metadata\": null\n    }\n}\n```*/\n                    self.responses[msg.response.id].stack.push(msg);\n                    break;\n                }\n                case \"output_audio_buffer.stopped\": {\n/*```\n{\n    \"type\":\"output_audio_buffer.stopped\",\n    \"event_id\":\"event_0ebd8495b5a945e5\",\n    \"response_id\":\"resp_C17PJbWxcyg7tgQBVTAaL\"\n}\n```*/\n                    if (!self.isMicActive) {\n                        self.toggleMute();\n                    }\n                    self.responses[msg.response.id].stack.push(msg);\n                    break;\n                }\n                case \"conversation.item.truncated\": {\n/*```\n{\n    \"type\": \"conversation.item.truncated\",\n    \"event_id\": \"event_BzbmnGqfHdq1hy2Wr2fnA\",\n    \"item_id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n    \"content_index\": 0,\n    \"audio_end_ms\": 261\n}\n```*/\n                    self.items[msg.item_id].events.push(msg);\n                    break;\n                }\n                // User events.\n                case \"input_audio_buffer.speech_started\": {\n/*```\n{\n    \"type\": \"input_audio_buffer.speech_started\",\n    \"event_id\": \"event_Bzbmm9FJ5oCTmCpng9tem\",\n    \"audio_start_ms\": 820,\n    \"item_id\": \"item_BzbmmcBxU60HVn8xvCWA2\"\n}\n```*/\n                    self.dataininputbuffer = true;\n                    self.items[msg.item_id].events.push(msg);\n                    break;\n                }\n                case \"input_audio_buffer.speech_stopped\": {\n/*```\n{\n    \"type\": \"input_audio_buffer.speech_stopped\",\n    \"event_id\": \"event_BzbmmUgLX2JKgJr1eMx0l\",\n    \"audio_end_ms\": 1568,\n    \"item_id\": \"item_BzbmmcBxU60HVn8xvCWA2\"\n}\n```*/\n                    if (self.isMicActive) {\n                        // Only auto-toggle mic if autocreateresponse is true\n                        if (self.autocreateresponse) {\n                            self.toggleMute();\n                            self.disableMic();\n                        }\n                    }\n                    self.items[msg.item_id].events.push(msg);\n                    break;\n                }\n                case \"input_audio_buffer.committed\": {\n/*```\n{\n    \"type\": \"input_audio_buffer.committed\",\n    \"event_id\": \"event_BzbmmOICFLRU8vnGEJ6vM\",\n    \"previous_item_id\": null,\n    \"item_id\": \"item_BzbmmcBxU60HVn8xvCWA2\"\n}\n```*/\n                    self.dataininputbuffer = false;\n                    self.items[msg.item_id].events.push(msg);\n                    break;\n                }\n                case \"conversation.item.created\": {\n/*```\n{\n    \"type\": \"conversation.item.created\",\n    \"event_id\": \"event_BzbmmiskBBbCkRSHvUVrL\",\n    \"previous_item_id\": null,\n    \"item\": {\n        \"id\": \"item_BzbmmcBxU60HVn8xvCWA2\",\n        \"object\": \"realtime.item\",\n        \"type\": \"message\",\n        \"status\": \"completed\",\n        \"role\": \"user\",\n        \"content\": [\n            {\n                \"type\": \"input_audio\",\n                \"transcript\": null\n            }\n        ]\n    }\n}\n```*/\n                    self.items[msg.item.id].events.push(msg);\n                    break;\n                }\n                case \"conversation.item.input_audio_transcription.delta\": {\n/*```\n{\n    \"type\": \"conversation.item.input_audio_transcription.delta\",\n    \"event_id\": \"event_BzbmonQuYXZ7QxUCOLlZd\",\n    \"item_id\": \"item_BzbmmcBxU60HVn8xvCWA2\",\n    \"content_index\": 0,\n    \"delta\": \"Hey.\"\n}\n```*/\n                    self.items[msg.item_id].events.push(msg);\n                    self.items[msg.item_id].content += msg.delta;\n                    break;\n                }\n                case \"conversation.item.input_audio_transcription.completed\": {\n/*```\n{\n    \"type\": \"conversation.item.input_audio_transcription.completed\",\n    \"event_id\": \"event_BzbmotVIjHphgHjViNkZk\",\n    \"item_id\": \"item_BzbmmcBxU60HVn8xvCWA2\",\n    \"content_index\": 0,\n    \"transcript\": \"Hey.\",\n    \"usage\": {\n        \"type\": \"duration\",\n        \"seconds\": 1\n    }\n}\n```*/\n                    self.items[msg.item_id].events.push(msg);\n                    self.items[msg.item_id].content = msg.transcript;\n                    self.loadingMessages.delete(msg.item_id);\n                    break;\n                }\n            }\n            self.renderUI();\n        },\n\n        enableMic: function() {\n            var self = this;\n            if (self.controls.toggleMicBtn) {\n                log.debug('Enabling mic');\n                self.controls.toggleMicBtn.parentElement.classList.remove('disabled');\n            }\n        },\n\n        disableMic: function() {\n            var self = this;\n            if (self.controls.toggleMicBtn) {\n                log.debug('Disabling mic');\n                self.controls.toggleMicBtn.parentElement.classList.add('disabled');\n            }\n        },\n\n        initializeMicStream: async function() {\n            var self = this;\n            try {\n                self.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n                self.analyser = self.audioContext.createAnalyser();\n                self.analyser.fftSize = 2048;\n                const bufferLength = self.analyser.frequencyBinCount;\n                self.dataArray = new Uint8Array(bufferLength);\n\n                self.sourceNode = self.audioContext.createMediaStreamSource(self.mediaStream);\n                // Source is connected/disconnected in toggleMute\n                self.isMicInitialized = true;\n                return true;\n            } catch (err) {\n                log.debug(\"Error accessing microphone:\", err);\n                self.isMicInitialized = false;\n                log.debug(\"Could not access microphone. Please ensure it's connected and permissions are granted.\");\n                return false;\n            }\n        },\n\n        // Toggles mute/unmute state of the mic\n        toggleMute: async function() {\n            var self = this;\n            if (!self.isMicInitialized) {\n                const success = await self.initializeMicStream();\n                if (!success) {\n                    return;\n                } // If initialization failed, stop here\n            }\n\n            if (self.isMicActive) {\n                // Mute mic: Disconnect source from analyser\n                if (self.sourceNode && self.analyser) {\n                    self.sourceNode.disconnect(self.analyser);\n                }\n                if (self.animationFrameId) {\n                    cancelAnimationFrame(self.animationFrameId);\n                    self.animationFrameId = null;\n                }\n                if (self.pc) {\n                    self.mediaStream.getTracks().forEach((track) => {\n                        track.enabled = false;\n                    });\n                }\n                if (self.canvasCtx) {\n                    self.canvasCtx.clearRect(0, 0, self.controls.micWaveformCanvas.width, self.controls.micWaveformCanvas.height); // Clear canvas\n                }\n                self.isMicActive = false;\n\n                // Send response event when mic is disabled and autocreateresponse is false\n                if (!self.autocreateresponse) {\n                    if(!self.dataininputbuffer){\n                        self.sendEvent({\n                            type: \"response.create\",\n                            response: {\n                                modalities: [\"audio\", \"text\"],\n                                instructions: self.itemdata.audiochatinstructions,\n                                voice: self.audiochat_voice\n                            }\n                        });\n                    } else {\n                        //set a recurring 500ms timeout that will send the response.create event if self,.dataininputbuffer is false\n                        log.debug(\"Waiting for input audio buffer to commit before sending response.create\");\n                        let attempts = 0;\n                        const maxAttempts = 3;\n                        const checkInputBuffer = setInterval(() => {\n                            if (!self.dataininputbuffer || attempts >= maxAttempts) {\n                                clearInterval(checkInputBuffer);\n                                self.dataininputbuffer = false;\n                                self.sendEvent({\n                                    type: \"response.create\",\n                                    response: {\n                                        modalities: [\"audio\", \"text\"],\n                                        instructions: self.itemdata.audiochatinstructions,\n                                        voice: self.audiochat_voice\n                                    }\n                                });\n                            }\n                            attempts++;\n                        }, 500);\n                    }\n                }\n            } else {\n                // Unmute mic: Connect source to analyser\n                if (self.sourceNode && self.analyser) {\n                    self.sourceNode.connect(self.analyser);\n                }\n\n                if (self.pc) {\n                    self.mediaStream.getTracks().forEach((track) => {\n                        track.enabled = true;\n                    });\n                }\n                self.isMicActive = true;\n                self.drawWave(); // Start drawing waveform\n            }\n            self.renderUI(); // Update UI\n        },\n\n        releaseMicResources: function() {\n            var self = this;\n            if (self.animationFrameId) {\n                cancelAnimationFrame(self.animationFrameId);\n                self.animationFrameId = null;\n            }\n            if (self.mediaStream) {\n                self.mediaStream.getTracks().forEach((track) => {\n                    if (typeof self.pc !== 'undefined' && self.pc) {\n                        // Find the RTCRtpSender associated with the track\n                        const sender = self.pc.getSenders().find(s => s.track === track);\n                        // Remove the sender if it exists\n                        if (sender) {\n                            self.pc.removeTrack(sender);\n                        }\n                    }\n                    track.stop();\n                });\n                self.mediaStream = null;\n            }\n            if (self.sourceNode) {\n                self.sourceNode.disconnect();\n                self.sourceNode = null;\n            }\n            if (self.audioContext) {\n                self.audioContext.close();\n                self.audioContext = null;\n            }\n            self.isMicActive = false;\n            self.isMicInitialized = false;\n            if (self.canvasCtx) {\n                self.canvasCtx.clearRect(0, 0, self.controls.micWaveformCanvas.width, self.controls.micWaveformCanvas.height); // Clear canvas\n            }\n            self.renderUI(); // Update UI to show mic inactive\n        },\n\n        drawWave: function() {\n            var self = this;\n            if (!self.canvasCtx || !self.analyser || !self.dataArray || !self.isMicActive) {\n                self.animationFrameId = null; // Stop animation if conditions are not met\n                return;\n            }\n\n            const WIDTH = self.controls.micWaveformCanvas.width;\n            const HEIGHT = self.controls.micWaveformCanvas.height;\n\n            self.animationFrameId = requestAnimationFrame(self.drawWave.bind(self));\n\n            self.analyser.getByteTimeDomainData(self.dataArray); // Get waveform data\n\n            self.canvasCtx.clearRect(0, 0, WIDTH, HEIGHT); // Clear previous drawing\n            self.canvasCtx.lineWidth = 2;\n            self.canvasCtx.strokeStyle = \"rgb(255, 255, 255)\"; // White color for wave on blue background\n\n            self.canvasCtx.beginPath();\n\n            const sliceWidth = (WIDTH * 1.0) / self.dataArray.length;\n            let x = 0;\n\n            for (let i = 0; i < self.dataArray.length; i++) {\n                const v = self.dataArray[i] / 128.0; // Normalize to 0-2\n                const y = (v * HEIGHT) / 2;\n\n                if (i === 0) {\n                    self.canvasCtx.moveTo(x, y);\n                } else {\n                    self.canvasCtx.lineTo(x, y);\n                }\n\n                x += sliceWidth;\n            }\n\n            self.canvasCtx.lineTo(WIDTH, HEIGHT / 2);\n            self.canvasCtx.stroke();\n        },\n\n        populateMicList: async function() {\n            var self = this;\n            try {\n                const devices = await navigator.mediaDevices.enumerateDevices();\n                const mics = devices.filter(device => device.kind === \"audioinput\");\n                const select = self.controls.micSelect;\n\n                select.innerHTML = \"\"; // Clear existing options\n\n                // Group by groupId to remove duplicates\n                const uniqueMics = [];\n                const seenGroups = new Set();\n\n                for (const mic of mics) {\n                    if (!seenGroups.has(mic.groupId)) {\n                        uniqueMics.push(mic);\n                        seenGroups.add(mic.groupId);\n                    }\n                }\n\n                if (uniqueMics.length <= 1) {\n                    select.disabled = true;\n                    return;\n                }\n                uniqueMics.forEach((mic, index) => {\n                    const option = document.createElement(\"option\");\n                    option.value = mic.deviceId;\n                    option.text = mic.label || `Microphone ${index + 1}`;\n                    select.appendChild(option);\n                });\n                select.parentElement.classList.remove('hidden');\n\n                // Set change listener\n                select.addEventListener(\"change\", async(e) => {\n                    const deviceId = e.target.value;\n                    await self.switchMic(deviceId);\n                });\n            } catch (err) {\n                log.debug(\"Failed to get microphone list:\", err);\n            }\n        },\n\n        switchMic: async function(deviceId) {\n            var self = this;\n\n            // Stop and release current mic\n            if (self.mediaStream) {\n                self.mediaStream.getTracks().forEach(track => track.stop());\n            }\n\n            try {\n                // Get new media stream from selected device\n                self.mediaStream = await navigator.mediaDevices.getUserMedia({\n                    audio: {deviceId: {exact: deviceId}}\n                });\n\n                // Replace tracks in PeerConnection\n                if (self.pc) {\n                    const senders = self.pc.getSenders();\n                    const audioTrack = self.mediaStream.getAudioTracks()[0];\n                    const audioSender = senders.find(sender => sender.track.kind === 'audio');\n                    if (audioSender) {\n                        audioSender.replaceTrack(audioTrack);\n                    }\n                }\n\n                // Reinitialize mic stream and waveform\n                await self.initializeMicStream();\n                if (self.isMicInitialized) {\n                    self.sourceNode.connect(self.analyser);\n                    self.mediaStream.getTracks().forEach((track) => {\n                        track.enabled = self.isMicActive;\n                    });\n                    if (self.isMicActive) {\n                        self.drawWave();\n                    }\n                }\n\n                log.debug(\"Switched microphone to:\" + deviceId);\n            } catch (err) {\n                log.debug(\"Failed to switch microphone:\");\n                log.debug(err);\n            }\n        },\n\n    }; // End of return object.\n});"],"names":["define","$","log","def","ttrecorder","templates","str","debug","autocreateresponse","gradingrequesttag","gradingData","strings","controls","itemdata","index","quizhelper","pc","dc","audiochat_voice","isSessionStarted","isSessionStopped","isSessionActive","isLoading","isMicActive","isMicInitialized","loadingMessages","Set","audioContext","analyser","dataArray","sourceNode","mediaStream","animationFrameId","canvasCtx","eventlogs","items","responses","abortcontroller","AbortController","dataininputbuffer","semantic_vad","type","eagerness","timebased_vad","silence_duration_ms","create_response","interrupt_response","threshold","clone","extend","this","init","audiochat_autoresponse","init_strings","init_controls","init_voice","register_events","renderUI","self","get_strings","done","s","i","gradebywordcount","next_question","stepdata","hasgrade","totalitems","totalmarks","resultsdata","Object","values","grade_activity","correctitems","Math","round","grade","do_next","count_words","userTranscript","forEach","item","content","push","join","split","length","toggle_autocreate_response","send","JSON","stringify","session","turn_detection","wordcount","undefined","score","targetwordcount","aifeedback","feedback","gradeexplanation","countwords","min","startSessionBtn","addEventListener","startSession","bind","stopSessionBtn","stopSession","retrySessionBtn","resetSession","autocreateresponseCheckbox","cancelStartSessionBtn","abort","nextbutton","on","container","timelimit","find","show","progressTimer","height","timeLimit","onFinish","trigger","toggleMicBtn","toggleMute","voice","includes","async","document","getElementById","uniqueid","hiddenaudio","querySelector","loadingIndicator","aiAvatarSection","chatActiveMessage","conversationSection","messagesContainer","micButtonContainer","micIcon","micWaveformCanvas","micSelect","finishMessage","resultscontainer","resultscontent","autocreateresponseToggle","clicktosendlabel","mainWrapper","getContext","populateMicList","scrollToBottom","firstElementChild","scrollIntoViewIfNeeded","scrollTop","scrollHeight","scrollMicButtonIntoView","scrollIntoView","behavior","block","classList","toggle","endScreen","showitemreview","allowretry","noshowmics","querySelectorAll","parentElement","disabled","currentItem","orderedItems","idMap","Map","previousMap","set","id","previous_item_id","get","innerHTML","message","messageDiv","createElement","className","usertype","contentDiv","headerDiv","pictureDiv","M","cfg","wwwroot","appendChild","textDiv","textContent","has","loaderDiv","remove","add","twoletterlang","language","substr","RTCPeerConnection","iceServers","urls","createDataChannel","onmessage","e","data","lines","filter","Boolean","line","handleRTCEvent","call","parse","err","onopen","sendEvent","instructions","audiochatinstructions","input_audio_format","input_audio_transcription","model","speed","modalities","response","ontrack","event","srcObject","streams","navigator","mediaDevices","getUserMedia","audio","getTracks","track","enabled","addTrack","offer","createOffer","offerToReceiveAudio","setLocalDescription","waitForIceGathering","sdpResponse","fetch","method","headers","body","localDescription","sdp","signal","ok","text","answer","setRemoteDescription","name","close","stop","sendGradingRequest","responsedata","conversation","audiochatgradeinstructions","metadata","tag","max_output_tokens","temperature","clear","releaseMicResources","setTimeout","showResults","closeDataChannel","tdata","stars","isNaN","filledStars","filled","render","then","html","js","timeout","Promise","resolve","timer","checkState","iceGatheringState","clearTimeout","removeEventListener","obj","readyState","msg","msgresponse_id","response_id","msgitem_id","item_id","itemid","stack","events","time","Date","now","toString","role","enableMic","delta","transcript","delete","disableMic","jsonresponse","output","initializeMicStream","window","AudioContext","webkitAudioContext","createAnalyser","fftSize","bufferLength","frequencyBinCount","Uint8Array","createMediaStreamSource","disconnect","cancelAnimationFrame","clearRect","width","attempts","maxAttempts","checkInputBuffer","setInterval","clearInterval","connect","drawWave","sender","getSenders","removeTrack","WIDTH","HEIGHT","requestAnimationFrame","getByteTimeDomainData","lineWidth","strokeStyle","beginPath","sliceWidth","x","y","moveTo","lineTo","stroke","mics","enumerateDevices","device","kind","select","uniqueMics","seenGroups","mic","groupId","option","value","deviceId","label","target","switchMic","exact","senders","audioTrack","getAudioTracks","audioSender","replaceTrack"],"mappings":"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"}