{"version":3,"file":"audiochat.min.js","sources":["../src/audiochat.js"],"sourcesContent":["define(['jquery', 'core/log', 'mod_minilesson/definitions',\n        'mod_minilesson/ttrecorder', 'core/templates', 'core/str'],\nfunction($, log, def, ttrecorder, templates, str) {\n    \"use strict\"; // jshint ;_;\n\n    /*\n    This file is to manage the free speaking item type\n        */\n\n      log.debug('MiniLesson AudioChat: initialising');\n\n    return {\n        autocreateresponse : false, // If true, the response will be created automatically\n        gradingrequesttag: \"gradingrequest\", // Tag for the grading request\n        gradingData: false, // Data returne by the grading request\n        strings: {},\n        controls: {}, // Controls for the item\n        itemdata: {}, // Item data for the item\n        index: 0, // Index of the item in the quiz\n        quizhelper: {}, // Quiz helper for the item\n        pc: null,\n        dc: null,\n        audiochat_voice: \"alloy\", // Default voice for the AI\n        isSessionStarted: false,\n        isSessionStopped: false,\n        isSessionActive: false,\n        isLoading: false,\n        isMicActive: false,\n        isMicInitialized: false, // True when getUserMedia has successfully run once\n        loadingMessages: new Set(), // To track messages that are currently loading,\n        audioContext: null,\n        analyser: null,\n        dataArray: null,\n        sourceNode: null,\n        mediaStream: null,\n        animationFrameId: null,\n        canvasCtx: null,\n        eventlogs: [],\n        items: {},\n        responses: {},\n        abortcontroller: new AbortController(),\n        dataininputbuffer: false,\n        //Turn detection - semantic is good for native speakers, but awful for language learners\n        // time based we give 1.5s of silence detection before posting\n        semantic_vad: {\n            type: \"semantic_vad\",\n            eagerness: \"low\",\n        },\n\n        timebased_vad: {\n            type: \"server_vad\",\n            silence_duration_ms: 3500,\n            create_response: true, // true = it will turn on and off the mic and respond\n            interrupt_response: true, // only in conversation mode\n            threshold: 0.3,\n            //  \"prefix_padding_ms\": 300,\n        },\n\n        // For making multiple instances\n        clone: function() {\n            return $.extend(true, {}, this);\n        },\n\n        init: function(index, itemdata, quizhelper) {\n            this.itemdata = itemdata;\n            this.autocreateresponse = itemdata.audiochat_autoresponse || false;\n            log.debug('itemdata', itemdata);\n            this.quizhelper = quizhelper;\n            this.index = index;\n            this.init_strings();\n            this.init_controls(quizhelper, itemdata);\n            this.init_voice(itemdata.audiochat_voice);\n            this.register_events(index, itemdata, quizhelper);\n            this.renderUI();\n        },\n\n        init_strings: function() {\n            var self = this;\n            // Set up strings\n            str.get_strings([\n                { \"key\": \"gradebywordcount\", \"component\": \"mod_minilesson\" },\n            ]).done(function (s) {\n                var i = 0;\n                self.strings.gradebywordcount = s[i++];\n            });\n        },\n\n        next_question: function() {\n            var self = this;\n            var stepdata = {};\n            stepdata.index = self.index;\n            stepdata.hasgrade = true;\n            stepdata.totalitems = self.itemdata.totalmarks;\n            stepdata.resultsdata = {'items': Object.values(self.items)};\n            // Add grade and other results data\n            stepdata= self.grade_activity(stepdata);\n            stepdata.correctitems = Math.round((self.itemdata.totalmarks * stepdata.grade) / 100);\n            self.quizhelper.do_next(stepdata);\n        },\n\n        count_words: function() {\n            var self = this;\n            var userTranscript = [];\n            Object.values(self.items).forEach(item => {\n                if (item.content) {\n                    userTranscript.push(item.content);\n                }\n            });\n            var wordCount = userTranscript.join(' ').split(/\\s+/).length;\n            return wordCount;\n        },\n\n        toggle_autocreate_response: function() {\n            var self = this;\n            self.autocreateresponse = !self.autocreateresponse;\n            self.timebased_vad.create_response = self.autocreateresponse;\n            log.debug(\"Autocreate response toggled:\", self.autocreateresponse);\n            self.dc.send(JSON.stringify({\n                type: \"session.update\",\n                session: {\n                    turn_detection: self.timebased_vad,\n                }\n            }));\n        },\n\n        grade_activity: function(stepdata) {\n          //loop through items and form a complete user transcript\n            var self = this;\n\n            if(self.gradingData && self.gradingData.score !== undefined) {\n                log.debug(\"Using grading data from AI:\", self.gradingData);\n                // If grading data is available, use it\n                stepdata.grade = self.gradingData.score;\n                stepdata.resultsdata.aifeedback = self.gradingData.feedback || \"\";\n                stepdata.resultsdata.gradeexplanation = self.gradingData.gradeexplanation || \"\";\n\n            } else {\n                //Otherwise we default to counting words\n                stepdata.resultsdata.gradeexplanation = self.strings.gradebywordcount;\n                if(self.itemdata.countwords === false || self.itemdata.targetwordcount === 0){\n                    stepdata.grade =  100;\n                }\n\n                //count words in the transcript\n                var wordcount = self.count_words();\n\n                // Calculate grade based on word count\n                stepdata.grade = Math.min(wordcount / self.itemdata.targetwordcount, 1) * 100;\n\n            }\n\n            // return stepdata\n            return stepdata;\n\n        },\n\n        register_events: function(index, itemdata, quizhelper) {\n\n            var self = this;\n\n            // Event Listeners\n            self.controls.startSessionBtn.addEventListener(\"click\", self.startSession.bind(this));\n            self.controls.stopSessionBtn.addEventListener(\"click\", self.stopSession.bind(this));\n            self.controls.retrySessionBtn.addEventListener(\"click\", self.resetSession.bind(this));\n            self.controls.autocreateresponseCheckbox.addEventListener(\"change\", self.toggle_autocreate_response.bind(self));\n            self.controls.cancelStartSessionBtn.addEventListener(\"click\", () => {\n                self.abortcontroller.abort();\n                self.abortcontroller = new AbortController();\n            });\n\n            $(self.controls.nextbutton).on('click', function() {\n                self.next_question();\n            });\n\n            $(\"#\" + itemdata.uniqueid + \"_container\").on('showElement', () => {\n                if (itemdata.timelimit > 0) {\n                    $(\"#\" + itemdata.uniqueid + \"_container .progress-container\").show();\n                    $(\"#\" + itemdata.uniqueid + \"_container .progress-container i\").show();\n                    $(\"#\" + itemdata.uniqueid + \"_container .progress-container #progresstimer\").progressTimer({\n                        height: '5px',\n                        timeLimit: itemdata.timelimit,\n                        onFinish: function() {\n                            nextbutton.trigger('click');\n                        }\n                    });\n                }\n            });\n\n\n            if (self.controls.toggleMicBtn) {\n                self.controls.toggleMicBtn.addEventListener(\"click\", self.toggleMute.bind(self))\n            }\n        },\n\n        init_voice: function(voice) {\n            var self = this;\n            var voices = ['alloy', 'ash', 'ballad', 'coral', 'echo', 'sage', 'shimmer', 'verse'];\n            if (voice && voices.includes(voice)) {\n                self.audiochat_voice = voice;\n            } else {\n                self.audiochat_voice = 'alloy'; // Default voice\n            }\n            log.debug(\"AudioChat voice set to:\", this.audiochat_voice);\n        },\n\n        init_controls: async function() {\n            var self = this;\n            var container = document.getElementById(self.itemdata.uniqueid + \"_container\");\n            self.controls = {\n                hiddenaudio: container.querySelector('.ml_ac_hiddenaudio'),\n                nextbutton: container.querySelector('.minilesson_nextbutton'),\n                startSessionBtn: container.querySelector(\"#start-session-btn\"),\n                stopSessionBtn: container.querySelector(\"#stop-session-btn\"),\n                loadingIndicator: container.querySelector(\"#loading-indicator\"),\n                aiAvatarSection: container.querySelector(\"#ai-avatar-section\"),\n                chatActiveMessage: container.querySelector(\"#chat-active-message\"),\n                conversationSection: container.querySelector(\"#conversation-section\"),\n                messagesContainer: container.querySelector(\"#messages-container\"),\n                micButtonContainer: container.querySelector(\"#mic-button-container\"),\n                toggleMicBtn: container.querySelector(\"#toggle-mic-btn\"),\n                micIcon: container.querySelector(\"#mic-icon\"),\n                micWaveformCanvas: container.querySelector(\"#mic-waveform-canvas\"),\n                micSelect: container.querySelector('#micselect'),\n                finishMessage: container.querySelector('#finished-message'),\n                retrySessionBtn: container.querySelector('#retry-session-btn'),\n                cancelStartSessionBtn: container.querySelector('#cancel-start-session-btn'),\n                autocreateresponseCheckbox: container.querySelector('.ml_ac_autoresponse-checkbox'),\n                resultscontainer: container.querySelector('.ml_ac_results_container'),\n                resultscontent: container.querySelector('.ml_ac_results_content'),\n                autocreateresponseToggle: container.querySelector('.ml_ac_autoresponse-toggle'),\n\n                clicktosendlabel: container.querySelector('.ml_ac_clicktosend'),\n                mainWrapper: container.querySelector('.minilesson_audiochat_box .ml_unique_mainwrapper'),\n            };\n            self.canvasCtx = !self.controls.micWaveformCanvas ? null :\n                self.controls.micWaveformCanvas.getContext(\"2d\");\n\n            // Initial render\n            await self.populateMicList();\n\n        },\n\n        scrollToBottom: function() {\n            var self = this;\n            self.controls.conversationSection.firstElementChild.scrollIntoViewIfNeeded();\n            self.controls.conversationSection.firstElementChild.scrollTop = self.controls.conversationSection.firstElementChild.scrollHeight;\n        },\n\n        scrollMicButtonIntoView: function() {\n            var self = this;\n            if (self.controls.micButtonContainer) {\n                self.controls.micButtonContainer.scrollIntoView({behavior: \"smooth\", block: \"center\"});\n            }\n        },\n\n        renderUI: function() {\n            var self = this;\n            // Session Controls\n            self.controls.startSessionBtn.classList.toggle(\"hidden\", self.isSessionActive || self.isLoading || self.isSessionStarted);\n            self.controls.loadingIndicator.classList.toggle(\"hidden\", !self.isLoading);\n            self.controls.stopSessionBtn.classList.toggle(\"hidden\", !self.isSessionActive);\n            self.controls.micButtonContainer.classList.toggle(\"hidden\", !self.isSessionActive);\n            var endScreen = self.isSessionStarted && self.isSessionStopped;\n            self.controls.resultscontainer.classList.toggle(\"hidden\", !endScreen);\n            self.controls.finishMessage.classList.toggle(\"hidden\", !endScreen);\n            self.controls.retrySessionBtn.classList.toggle(\"hidden\", !endScreen);\n            self.controls.cancelStartSessionBtn.classList.toggle('hidden', !(self.isLoading && !self.isSessionActive));\n            self.controls.autocreateresponseToggle.classList.toggle(\"hidden\", !self.isSessionActive);\n            if (self.controls.micSelect) {\n                //how many options are in micselect\n                var mics = self.controls.micSelect.querySelectorAll('option');\n                var noshowmics = mics.length < 2;\n                self.controls.micSelect.parentElement.classList.toggle(\n                    'hidden',\n                    noshowmics || self.isSessionStarted || self.isLoading || self.controls.micSelect.disabled\n                );\n            }\n\n            var orderedItems = [];\n            var idMap = new Map();\n            var previousMap = new Map();\n            var currentItem;\n            Object.values(self.items).forEach(item => {\n                idMap.set(item.id, item);\n                previousMap.set(item.previous_item_id, item);\n                if (item.previous_item_id === null) {\n                    currentItem = item;\n                }\n            });\n            while (currentItem) {\n                orderedItems.push(currentItem);\n                currentItem = previousMap.get(currentItem.id);\n            }\n\n            // The cute dog avatar\n            self.controls.aiAvatarSection.classList.toggle(\"hidden\", self.isSessionStarted || self.isSessionActive || self.isSessionStopped);\n            //The chat session is active message\n            self.controls.chatActiveMessage.classList.toggle(\"hidden\", !self.isSessionActive);\n            // The conversation area\n            self.controls.conversationSection.classList.toggle(\"hidden\", !(self.isSessionActive || self.isSessionStopped));\n\n            // Render messages\n            self.controls.messagesContainer.innerHTML = \"\"; // Clear existing messages\n            orderedItems.forEach((message) => {\n                if (!message.content) {\n                    return;\n                }\n                var messageDiv = document.createElement(\"div\");\n                messageDiv.className = `flex ${message.usertype === \"user\" ? \"justify-end\" : \"justify-start\"} ml_unique_ordered_message_${message.usertype === \"user\" ? \"user\" : \"assistant\"}`;\n\n                var contentDiv = document.createElement(\"div\");\n                contentDiv.className = `max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${\n                        message.usertype === \"user\" ? \"bg-blue-500 text-white\" : \"bg-gray-200 text-gray-800\"\n                    } ml_unique_content_${\n                        message.usertype === \"user\" ? \"user\" : \"assistant\"\n                    }`;\n\n                var headerDiv = document.createElement(\"div\");\n                headerDiv.className = \"flex items-center text-xs font-medium mb-1 ml_unique_headerdiv\";\n                if (message.usertype === \"assistant\") {\n                    var pictureDiv = document.createElement('div');\n                    pictureDiv.innerHTML = `\n                        <img src=\"${M.cfg.wwwroot}/mod/minilesson/pix/cutepoodll_small.png\" \n                        alt=\"AI Assistant\" class=\"mr-2 rounded-circle shadow-lg ml_unique_assistant_img\">\n                        `;\n                    headerDiv.appendChild(pictureDiv);\n                }\n                headerDiv.innerHTML += message.usertype === \"user\" ? \"Student\" : \"AI Assistant\";\n                contentDiv.appendChild(headerDiv);\n\n                var textDiv = document.createElement(\"div\");\n                textDiv.className = \"text-sm ml_unique_textsmall\";\n                textDiv.textContent = message.content;\n                contentDiv.appendChild(textDiv);\n\n                if (self.loadingMessages.has(message.id)) {\n                    var loaderDiv = document.createElement(\"div\");\n                    loaderDiv.className = \"flex items-center space-x-1 py-1 message-loader ml_unique_loadingmessage\";\n                    loaderDiv.innerHTML = `\n                        <div class=\"flex space-x-1 ml_unique_loader\">\n                            <div class=\"w-2 h-2 bg-current rounded-full ml_unique_loader_dot\"></div>\n                            <div class=\"w-2 h-2 bg-current rounded-full ml_unique_loader_dot\"></div>\n                            <div class=\"w-2 h-2 bg-current rounded-full ml_unique_loader_dot\"></div>\n                        </div>\n                        <span class=\"text-xs opacity-70 ml_unique_loader_text\">AI is thinking...</span>\n                    `;\n                    contentDiv.appendChild(loaderDiv);\n                }\n\n                messageDiv.appendChild(contentDiv);\n                self.controls.messagesContainer.appendChild(messageDiv);\n            });\n\n            self.scrollToBottom();\n           // self.scrollMicButtonIntoView();\n\n            // Update mic button container and canvas visibility\n            if (self.controls.micButtonContainer) {\n                self.controls.micButtonContainer.classList.toggle(\"active\", self.isMicActive);\n                self.controls.micButtonContainer.classList.toggle(\"bg-blue-500\", self.isMicActive); // Active background color\n                self.controls.micButtonContainer.classList.toggle(\"text-white\", self.isMicActive); // Active icon color\n                self.controls.micButtonContainer.classList.toggle(\"bg-gray-200\", !self.isMicActive); // Inactive background color\n                self.controls.micButtonContainer.classList.toggle(\"text-gray-800\", !self.isMicActive); // Inactive icon color\n            }\n\n\n            if (self.controls.micWaveformCanvas) {\n                self.controls.micWaveformCanvas.classList.toggle(\"active\", self.isMicActive);\n            }\n\n            if (self.controls.micIcon) {\n                // Set icon based on mic state\n                self.controls.micIcon.innerHTML = self.isMicActive\n                    ? `<rect id=\"primary\" x=\"2\" y=\"2\" width=\"20\" height=\"20\" rx=\"2\" style=\"fill: rgb(0, 0, 0);\"></rect>` // Mic On icon\n                    : `<path id=\"secondary\" d=\"M12,15h0a4,4,0,0,1-4-4V7a4,4,0,0,1,4-4h0a4,4,0,0,1,4,4v4A4,4,0,0,1,12,15Z\" style=\"fill: rgb(44, 169, 188); stroke-width: 2;\"></path><path id=\"primary\" d=\"M18.24,16A8,8,0,0,1,5.76,16\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;\"></path><path id=\"primary-2\" data-name=\"primary\" d=\"M12,19v2m4-10V7a4,4,0,0,0-4-4h0A4,4,0,0,0,8,7v4a4,4,0,0,0,4,4h0A4,4,0,0,0,16,11Z\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;\"></path>`; // Mic Off icon\n            }\n\n            //show or not show clicktosendlabel\n            if (self.isMicActive && !self.autocreateresponse) {\n                self.controls.clicktosendlabel.classList.remove(\"hidden\");\n            } else {\n                self.controls.clicktosendlabel.classList.add(\"hidden\");\n            }\n\n        },\n\n        resetSession: function() {\n            log.debug(\"reset  session\");\n            var self = this;\n            self.isLoading = false;\n            self.isSessionActive = false;\n            self.isSessionStopped = false;\n            self.isSessionStarted = false;\n            self.renderUI();\n        },\n\n        startSession: async function() {\n            var self = this;\n            var twoletterlang = self.itemdata.language.substr(0, 2);\n            var hiddenaudio = self.controls.hiddenaudio;\n            log.debug(\"Session starting\");\n            self.isLoading = true;\n            self.items = [];\n            self.renderUI();\n            // Open the RTC PeerConnection via Stun and ICE servers\n            log.debug(\"Opening peer connection...\");\n            self.pc = new RTCPeerConnection({\n                iceServers: [{\n                    urls: \"stun:stun.l.google.com:19302\"\n                }]\n            });\n\n            // Create a DataChannel for sending events (text and audio)\n            log.debug(\"creating data channel...\");\n            self.dc = self.pc.createDataChannel(\"oai-events\");\n\n            // Handle incoming messages on the DataChannel\n            self.dc.onmessage = (e) => {\n                self.eventlogs.push(e.data);\n                log.debug(\"DataChannel message:\", e.data);\n                try {\n                    var lines = e.data.split(\"\\n\").filter(Boolean);\n                    for (var line of lines) {\n                        self.handleRTCEvent.call(self, JSON.parse(line));\n                    }\n                } catch (err) {\n                    log.debug(\"Failed to parse\", err);\n                }\n            };\n            self.dc.onopen = () => {\n                log.debug(\"DataChannel open\");\n\n                //Turn detection - semantic is good for native speakers, but awful for language learners\n                // time based we give 1.5s of silence detection before posting\n                var semantic_vad ={\n                    type: \"semantic_vad\",\n                    eagerness: \"low\",\n                };\n\n                // Set the auto turn detection, or manual submit flag\n                self.timebased_vad.create_response = self.autocreateresponse;\n\n                // Set session-wide instructions\n                self.sendEvent({\n                    type: \"session.update\",\n                    session: {\n                        instructions: self.itemdata.audiochatinstructions,\n                        input_audio_format: \"pcm16\", // Ensure correct audio encoding\n                        input_audio_transcription: {\n                            language: twoletterlang,\n                            model: \"whisper-1\" // \"gpt-4o-mini-transcribe\"  // Use a transcription model\n                        },\n                        turn_detection: self.timebased_vad,\n                        speed: 0.9,\n                        voice: self.audiochat_voice,\n                        modalities: [\"text\", \"audio\"],\n                    }\n                });\n\n                // Send the first message to tell AI to say something\n                // the response create function overrides the session instructions, so we need to double up here\n                var firstmessageinstructions =  \"Please introduce yourself to the student and explain todays topic.\";\n                self.sendEvent({\n                    type: \"response.create\",\n                    response: {\n                        modalities: [\"audio\", \"text\"],\n                        instructions:  self.itemdata.audiochatinstructions + \" \" + firstmessageinstructions,\n                        voice: self.audiochat_voice\n                    }\n                });\n\n            };\n\n            // Set up the audio element to play incoming audio.\n            self.pc.ontrack = (event) => {\n                hiddenaudio.srcObject = event.streams[0];\n            };\n\n            // Set up the Mic stream.\n            self.mediaStream = await navigator.mediaDevices.getUserMedia({audio: true});\n            self.mediaStream.getTracks().forEach((track) => {\n                track.enabled = false;\n                self.pc.addTrack(track, self.mediaStream);\n            });\n\n            // Set up the RTC Connection by bouncing our request off the Moodle server\n            var offer = await self.pc.createOffer({\n                offerToReceiveAudio: true\n            });\n            await self.pc.setLocalDescription(offer);\n            // Search for server candidates for relaying messages, may take 15s\n            await self.waitForIceGathering(self.pc);\n\n            try {\n                var sdpResponse = await fetch(M.cfg.wwwroot + \"/mod/minilesson/openairtc.php\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/sdp\"\n                    },\n                    body: self.pc.localDescription.sdp,\n                    signal: self.abortcontroller.signal\n                });\n                if (!sdpResponse.ok) {\n                    log.debug(\"Failed /rtc:\", await sdpResponse.text());\n                    return;\n                }\n                log.debug(\"Received SDP answer from server\");\n                var answer = await sdpResponse.text();\n                log.debug(answer);\n                await self.pc.setRemoteDescription({\n                    type: \"answer\",\n                    sdp: answer\n                });\n                log.debug(\"Session started\");\n            } catch(e) {\n                // Close data channel if open\n                if (self.dc) {\n                    self.dc.close();\n                }\n                // Close peer connection if open\n                if (self.pc) {\n                    self.pc.close();\n                }\n                if (self.mediaStream) {\n                    self.mediaStream.getTracks().forEach((track) => track.stop());\n                }\n                self.isLoading = false;\n                self.renderUI();\n                return;\n            }\n\n            self.isLoading = false;\n            self.isSessionActive = true;\n            self.isSessionStarted = true;\n            self.isSessionStopped = false;\n            self.renderUI();\n        },\n\n        sendGradingRequest: function() {\n            var self = this;\n            // Send a final message to tell AI to grade the session and give feedback\n            var gradingInstructions = \"Please provide a percentage score for the session, an explanation of the score (for teachers), and feedback (for the student). \" +\n                 self.itemdata.audiochatgradeinstructions +\n                \"Return the response as JSON in the format: {\\\"score\\\": \\\"the score  ( 0-100 ) \\\", \\\"gradeexplanation\\\": \\\"the explanation\\\", \\\"feedback\\\": \\\"the feedback\\\"}.\";\n\n            var responsedata = {\n                // The response is out of band and not be added to the default conversation\n                conversation: \"none\",\n                modalities: [\"text\"],\n                instructions: gradingInstructions,\n                // Add the gradingrequest tag to make handltertc life easier\n                metadata: { tag: self.gradingrequesttag},\n                max_output_tokens: 500, // Keeps it tight\n                temperature: 0.6, // Optional: makes grading more deterministic\n            };\n\n            //If we wanted to reutrn an audio response (but lets not)\n            //responsedata.voice = self.audiochat_voice;\n\n            self.sendEvent({\n                type: \"response.create\",\n                response: responsedata,\n            });\n        },\n\n        stopSession: function() {\n            var self = this;\n\n            log.debug(\"Session stopping...\");\n            self.isSessionActive = false;\n            self.isSessionStopped = true;\n            self.loadingMessages.clear();\n\n            // Release mic resources when session ends\n            self.releaseMicResources();\n            self.renderUI();\n\n            // request grading information\n            // after that response, we will close the data channel and peer connection\n            //but shut it down after 2s just in case there is an error or something\n            if(self.itemdata.audiochatgradeinstructions && self.itemdata.audiochatgradeinstructions !== \"\") {\n                self.sendGradingRequest();\n\n                //add a spinner to the results content\n                self.controls.resultscontent.innerHTML = `<i class=\"fa fa-spinner fa-spin fa-2x\"></i>`;\n\n                setTimeout(() => {\n                    //now show the results content\n                    self.showResults();\n                    log.debug(\"Closing session resources...\");\n                    self.closeDataChannel();\n                }, 2000);\n            }else{\n                log.debug(\"Closing session resources...\");\n                self.closeDataChannel();\n            }\n            log.debug(\"Session stopped\");\n        },\n\n        closeDataChannel: function() {\n            var self = this;\n            // Tidy up the data channel and peer connection\n            if (typeof self.dc !== 'undefined' && self.dc) {\n                self.dc.close();\n                self.dc = null;\n            }\n            if (typeof self.pc !== 'undefined' && self.pc) {\n                self.pc.close();\n                self.pc = null;\n            }\n        },\n\n        showResults: function(){\n            var self = this;\n            var tdata = {};\n            tdata.resultsdata = {'items': Object.values(self.items)};\n            // Add grade and other results data\n            tdata = self.grade_activity(tdata);\n\n            templates.render('mod_minilesson/audiochatimmediatefeedback', tdata).then(\n                function(html, js) {\n                    self.controls.resultscontent.innerHTML = html;\n                }\n            );\n        },\n\n        waitForIceGathering: function(pc, timeout = 15000) {\n            return new Promise((resolve) => {\n                let timer;\n\n                function checkState() {\n                    if (pc.iceGatheringState === \"complete\") {\n                        clearTimeout(timer);\n                        pc.removeEventListener(\"icegatheringstatechange\", checkState);\n                        resolve();\n                    }\n                }\n\n                pc.addEventListener(\"icegatheringstatechange\", checkState);\n\n                // Timeout to resolve with current state\n                timer = setTimeout(() => {\n                    pc.removeEventListener(\"icegatheringstatechange\", checkState);\n                    resolve(); // Resolve with as many candidates as gathered so far\n                }, timeout);\n            });\n        },\n\n        sendEvent: function(obj) {\n            var self = this;\n            if (self.dc && self.dc.readyState === \"open\") {\n                self.dc.send(JSON.stringify(obj));\n            }\n        },\n\n        handleRTCEvent: function(msg) {\n            var self = this;\n            log.debug(\"Received event:\");\n\n            // Check if its the final grading message, which we don't want to enter \"items\"\n            if (msg.type === \"response.done\" &&\n                msg.response.metadata?.tag === self.gradingrequesttag) {\n                // Check if the response corresponds to the grading event\n                    try {\n                        var jsonresponse = msg.response.output[0].content[0].text;\n                        if(!jsonresponse || jsonresponse === \"\") {\n                            log.debug(\"No valid grading data received\");\n                            self.closeDataChannel();\n                            return;\n                        }\n\n                        self.gradingData = JSON.parse(jsonresponse);\n                        log.debug(\"Grading and Feedback:\", self.gradingData);\n\n                        // Handle the grading feedback (e.g., display it)\n                        //self.displayGradingFeedback(feedbackData);\n                    } catch (err) {\n                        log.debug(\"Failed to parse grading feedback:\", err);\n                    }\n                    return;\n\n            }\n\n            // log.debug(msg);\n            var msgresponse_id = msg.response ? msg.response.id : msg.response_id;\n            var msgitem_id = msg.item ? msg.item.id : msg.item_id;\n            if (msgresponse_id) {\n                self.responses[msgresponse_id] = self.responses[msgresponse_id] || {\n                    id: msgresponse_id,\n                    itemid: msgitem_id,\n                    stack: []\n                };\n            }\n            if (msgitem_id) {\n                if (typeof self.items[msgitem_id] === 'undefined') {\n                    self.scrollToBottom();\n                }\n                self.items[msgitem_id] = self.items[msgitem_id] || {\n                    id: msgitem_id,\n                    events: [],\n                    responses: null,\n                    content: ''\n                };\n                if (msgresponse_id) {\n                    self.items[msgitem_id].responses = self.responses[msgresponse_id];\n                }\n            }\n\n            msg.time = Date.now().toString();\n\n            switch (msg.type) {\n                case \"response.created\": {\n/*```\n{\n    \"type\": \"response.created\",\n    \"event_id\": \"event_Bzbmm1vOdUpYK5LcKMPAU\",\n    \"response\": {\n        \"object\": \"realtime.response\",\n        \"id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n        \"status\": \"in_progress\",\n        \"status_details\": null,\n        \"output\": [],\n        \"conversation_id\": \"conv_BzbmjU4iAZBReV6QpTbKH\",\n        \"modalities\": [\n            \"audio\",\n            \"text\"\n        ],\n        \"voice\": \"alloy\",\n        \"output_audio_format\": \"pcm16\",\n        \"temperature\": 0.8,\n        \"max_output_tokens\": \"inf\",\n        \"usage\": null,\n        \"metadata\": null\n    }\n}\n```*/\n                    self.responses[msg.response.id].stack.push(msg);\n                    break;\n                }\n                case \"response.output_item.added\": {\n/*```\n{\n    \"type\": \"response.output_item.added\",\n    \"event_id\": \"event_BzbmnNUVJeqok4KqSLSVl\",\n    \"response_id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n    \"output_index\": 0,\n    \"item\": {\n        \"id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n        \"object\": \"realtime.item\",\n        \"type\": \"message\",\n        \"status\": \"in_progress\",\n        \"role\": \"assistant\",\n        \"content\": []\n    }\n}\n```*/\n                    self.responses[msg.response_id].stack.push(msg);\n                    break;\n                }\n                case \"conversation.item.created\": {\n/*```\n{\n    \"type\": \"conversation.item.created\",\n    \"event_id\": \"event_BzbmnttqDhvU3h2he1tK7\",\n    \"previous_item_id\": \"item_BzbmmcBxU60HVn8xvCWA2\",\n    \"item\": {\n        \"id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n        \"object\": \"realtime.item\",\n        \"type\": \"message\",\n        \"status\": \"in_progress\",\n        \"role\": \"assistant\",\n        \"content\": []\n    }\n}\n```*/\n                    self.items[msg.item.id].previous_item_id = msg.previous_item_id;\n                    self.items[msg.item.id].usertype = msg.item.role;\n                    self.items[msg.item.id].events.push(msg);\n                    if (msg.item.role === 'assistant') {\n                        self.loadingMessages.add(msgitem_id);\n                    }\n                    break;\n                }\n                case \"response.content_part.added\": {\n/*```\n{\n    \"type\": \"response.content_part.added\",\n    \"event_id\": \"event_Bzbmn7lA1i7fOfFq8ju3F\",\n    \"response_id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n    \"item_id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"part\": {\n        \"type\": \"audio\",\n        \"transcript\": \"\"\n    }\n}\n```*/\n                    self.enableMic();// Let's enable mic\n                    self.responses[msg.response_id].stack.push(msg);\n                    break;\n                }\n                case \"response.audio_transcript.delta\": {\n/*```\n{\n    \"type\": \"response.audio_transcript.delta\",\n    \"event_id\": \"event_BzbmnpxUmLA0zAnR5mRy3\",\n    \"response_id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n    \"item_id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"delta\": \"Hi\"\n}\n```*/\n                    self.responses[msg.response_id].stack.push(msg);\n                    self.items[msg.item_id].content += msg.delta;\n                    break;\n                }\n\n                case \"output_audio_buffer.cleared\": {\n/*```\n{\n    \"type\": \"output_audio_buffer.cleared\",\n    \"event_id\": \"event_f7273193069b4938\",\n    \"response_id\": \"resp_BzbmmfvbvyUuYz2hvigPm\"\n}\n```*/\n                    self.responses[msg.response_id].stack.push(msg);\n                    break;\n                }\n                case \"response.audio.done\": {\n/*```\n{\n    \"type\": \"response.audio.done\",\n    \"event_id\": \"event_Bzbmn7aEtTnprkzqE9i6X\",\n    \"response_id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n    \"item_id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n    \"output_index\": 0,\n    \"content_index\": 0\n}\n```*/\n                    self.responses[msg.response_id].stack.push(msg);\n                    break;\n                }\n                case \"response.audio_transcript.done\": {\n/*```\n{\n    \"type\": \"response.audio_transcript.done\",\n    \"event_id\": \"event_BzbmnNGRs7797nz1Qh7em\",\n    \"response_id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n    \"item_id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"transcript\": \"Hi! How are you today? What did you do today?\"\n}\n```*/\n                    self.responses[msg.response_id].stack.push(msg);\n                    self.items[msg.item_id].content = msg.transcript;\n                    break;\n                }\n                case \"response.content_part.done\": {\n/*```\n{\n    \"type\": \"response.content_part.done\",\n    \"event_id\": \"event_BzbmnYdAvAKMU7ti311Vj\",\n    \"response_id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n    \"item_id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"part\": {\n        \"type\": \"audio\",\n        \"transcript\": \"Hi! How are you today? What did you do today?\"\n    }\n}\n```*/\n                    self.responses[msg.response_id].stack.push(msg);\n                    break;\n                }\n                case \"response.output_item.done\": {\n/*```\n{\n    \"type\": \"response.output_item.done\",\n    \"event_id\": \"event_BzbmnhD5RdLxAOnko94Z1\",\n    \"response_id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n    \"output_index\": 0,\n    \"item\": {\n        \"id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n        \"object\": \"realtime.item\",\n        \"type\": \"message\",\n        \"status\": \"incomplete\",\n        \"role\": \"assistant\",\n        \"content\": [\n            {\n                \"type\": \"audio\",\n                \"transcript\": \"Hi! How are you today? What did you do today?\"\n            }\n        ]\n    }\n}\n```*/\n                    self.responses[msg.response_id].stack.push(msg);\n                    self.loadingMessages.delete(msg.item.id);\n                    break;\n                }\n                case \"response.done\": {\n/*```\n{\n    \"type\": \"response.done\",\n    \"event_id\": \"event_Bzbmn8bIaGB59d6qG7LQS\",\n    \"response\": {\n        \"object\": \"realtime.response\",\n        \"id\": \"resp_BzbmmfvbvyUuYz2hvigPm\",\n        \"status\": \"cancelled\",\n        \"status_details\": {\n            \"type\": \"cancelled\",\n            \"reason\": \"turn_detected\"\n        },\n        \"output\": [\n            {\n                \"id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n                \"object\": \"realtime.item\",\n                \"type\": \"message\",\n                \"status\": \"incomplete\",\n                \"role\": \"assistant\",\n                \"content\": [\n                    {\n                        \"type\": \"audio\",\n                        \"transcript\": \"Hi! How are you today? What did you do today?\"\n                    }\n                ]\n            }\n        ],\n        \"conversation_id\": \"conv_BzbmjU4iAZBReV6QpTbKH\",\n        \"modalities\": [\n            \"audio\",\n            \"text\"\n        ],\n        \"voice\": \"alloy\",\n        \"output_audio_format\": \"pcm16\",\n        \"temperature\": 0.8,\n        \"max_output_tokens\": \"inf\",\n        \"usage\": {\n            \"total_tokens\": 170,\n            \"input_tokens\": 94,\n            \"output_tokens\": 76,\n            \"input_token_details\": {\n                \"text_tokens\": 87,\n                \"audio_tokens\": 7,\n                \"cached_tokens\": 0,\n                \"cached_tokens_details\": {\n                    \"text_tokens\": 0,\n                    \"audio_tokens\": 0\n                }\n            },\n            \"output_token_details\": {\n                \"text_tokens\": 23,\n                \"audio_tokens\": 53\n            }\n        },\n        \"metadata\": null\n    }\n}\n```*/\n                    self.responses[msg.response.id].stack.push(msg);\n                    break;\n                }\n                case \"output_audio_buffer.stopped\": {\n/*```\n{\n    \"type\":\"output_audio_buffer.stopped\",\n    \"event_id\":\"event_0ebd8495b5a945e5\",\n    \"response_id\":\"resp_C17PJbWxcyg7tgQBVTAaL\"\n}\n```*/\n                    if (!self.isMicActive) {\n                        self.toggleMute();\n                    }\n                    self.responses[msg.response.id].stack.push(msg);\n                    break;\n                }\n                case \"conversation.item.truncated\": {\n/*```\n{\n    \"type\": \"conversation.item.truncated\",\n    \"event_id\": \"event_BzbmnGqfHdq1hy2Wr2fnA\",\n    \"item_id\": \"item_BzbmmIsy7p3YZXC9HroUp\",\n    \"content_index\": 0,\n    \"audio_end_ms\": 261\n}\n```*/\n                    self.items[msg.item_id].events.push(msg);\n                    break;\n                }\n                // User events.\n                case \"input_audio_buffer.speech_started\": {\n/*```\n{\n    \"type\": \"input_audio_buffer.speech_started\",\n    \"event_id\": \"event_Bzbmm9FJ5oCTmCpng9tem\",\n    \"audio_start_ms\": 820,\n    \"item_id\": \"item_BzbmmcBxU60HVn8xvCWA2\"\n}\n```*/\n                    self.dataininputbuffer = true;\n                    self.items[msg.item_id].events.push(msg);\n                    break;\n                }\n                case \"input_audio_buffer.speech_stopped\": {\n/*```\n{\n    \"type\": \"input_audio_buffer.speech_stopped\",\n    \"event_id\": \"event_BzbmmUgLX2JKgJr1eMx0l\",\n    \"audio_end_ms\": 1568,\n    \"item_id\": \"item_BzbmmcBxU60HVn8xvCWA2\"\n}\n```*/\n                    if (self.isMicActive) {\n                        // Only auto-toggle mic if autocreateresponse is true\n                        if (self.autocreateresponse) {\n                            self.toggleMute();\n                            self.disableMic();\n                        }\n                    }\n                    self.items[msg.item_id].events.push(msg);\n                    break;\n                }\n                case \"input_audio_buffer.committed\": {\n/*```\n{\n    \"type\": \"input_audio_buffer.committed\",\n    \"event_id\": \"event_BzbmmOICFLRU8vnGEJ6vM\",\n    \"previous_item_id\": null,\n    \"item_id\": \"item_BzbmmcBxU60HVn8xvCWA2\"\n}\n```*/\n                    self.dataininputbuffer = false;\n                    self.items[msg.item_id].events.push(msg);\n                    break;\n                }\n                case \"conversation.item.created\": {\n/*```\n{\n    \"type\": \"conversation.item.created\",\n    \"event_id\": \"event_BzbmmiskBBbCkRSHvUVrL\",\n    \"previous_item_id\": null,\n    \"item\": {\n        \"id\": \"item_BzbmmcBxU60HVn8xvCWA2\",\n        \"object\": \"realtime.item\",\n        \"type\": \"message\",\n        \"status\": \"completed\",\n        \"role\": \"user\",\n        \"content\": [\n            {\n                \"type\": \"input_audio\",\n                \"transcript\": null\n            }\n        ]\n    }\n}\n```*/\n                    self.items[msg.item.id].events.push(msg);\n                    break;\n                }\n                case \"conversation.item.input_audio_transcription.delta\": {\n/*```\n{\n    \"type\": \"conversation.item.input_audio_transcription.delta\",\n    \"event_id\": \"event_BzbmonQuYXZ7QxUCOLlZd\",\n    \"item_id\": \"item_BzbmmcBxU60HVn8xvCWA2\",\n    \"content_index\": 0,\n    \"delta\": \"Hey.\"\n}\n```*/\n                    self.items[msg.item_id].events.push(msg);\n                    self.items[msg.item_id].content += msg.delta;\n                    break;\n                }\n                case \"conversation.item.input_audio_transcription.completed\": {\n/*```\n{\n    \"type\": \"conversation.item.input_audio_transcription.completed\",\n    \"event_id\": \"event_BzbmotVIjHphgHjViNkZk\",\n    \"item_id\": \"item_BzbmmcBxU60HVn8xvCWA2\",\n    \"content_index\": 0,\n    \"transcript\": \"Hey.\",\n    \"usage\": {\n        \"type\": \"duration\",\n        \"seconds\": 1\n    }\n}\n```*/\n                    self.items[msg.item_id].events.push(msg);\n                    self.items[msg.item_id].content = msg.transcript;\n                    self.loadingMessages.delete(msg.item_id);\n                    break;\n                }\n            }\n            self.renderUI();\n        },\n\n        enableMic: function() {\n            var self = this;\n            if (self.controls.toggleMicBtn) {\n                log.debug('Enabling mic');\n                self.controls.toggleMicBtn.parentElement.classList.remove('disabled');\n            }\n        },\n\n        disableMic: function() {\n            var self = this;\n            if (self.controls.toggleMicBtn) {\n                log.debug('Disabling mic');\n                self.controls.toggleMicBtn.parentElement.classList.add('disabled');\n            }\n        },\n\n        initializeMicStream: async function() {\n            var self = this;\n            try {\n                self.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n                self.analyser = self.audioContext.createAnalyser();\n                self.analyser.fftSize = 2048;\n                const bufferLength = self.analyser.frequencyBinCount;\n                self.dataArray = new Uint8Array(bufferLength);\n\n                self.sourceNode = self.audioContext.createMediaStreamSource(self.mediaStream);\n                // Source is connected/disconnected in toggleMute\n                self.isMicInitialized = true;\n                return true;\n            } catch (err) {\n                log.debug(\"Error accessing microphone:\", err);\n                self.isMicInitialized = false;\n                log.debug(\"Could not access microphone. Please ensure it's connected and permissions are granted.\");\n                return false;\n            }\n        },\n\n        // Toggles mute/unmute state of the mic\n        toggleMute: async function() {\n            var self = this;\n            if (!self.isMicInitialized) {\n                const success = await self.initializeMicStream();\n                if (!success) {\n                    return;\n                } // If initialization failed, stop here\n            }\n\n            if (self.isMicActive) {\n                // Mute mic: Disconnect source from analyser\n                if (self.sourceNode && self.analyser) {\n                    self.sourceNode.disconnect(self.analyser);\n                }\n                if (self.animationFrameId) {\n                    cancelAnimationFrame(self.animationFrameId);\n                    self.animationFrameId = null;\n                }\n                if (self.pc) {\n                    self.mediaStream.getTracks().forEach((track) => {\n                        track.enabled = false;\n                    });\n                }\n                if (self.canvasCtx) {\n                    self.canvasCtx.clearRect(0, 0, self.controls.micWaveformCanvas.width, self.controls.micWaveformCanvas.height); // Clear canvas\n                }\n                self.isMicActive = false;\n\n                // Send response event when mic is disabled and autocreateresponse is false\n                if (!self.autocreateresponse) {\n                    if(!self.dataininputbuffer){\n                        self.sendEvent({\n                            type: \"response.create\",\n                            response: {\n                                modalities: [\"audio\", \"text\"],\n                                instructions: self.itemdata.audiochatinstructions,\n                                voice: self.audiochat_voice\n                            }\n                        });\n                    } else {\n                        //set a recurring 500ms timeout that will send the response.create event if self,.dataininputbuffer is false\n                        log.debug(\"Waiting for input audio buffer to commit before sending response.create\");\n                        let attempts = 0;\n                        const maxAttempts = 3;\n                        const checkInputBuffer = setInterval(() => {\n                            if (!self.dataininputbuffer || attempts >= maxAttempts) {\n                                clearInterval(checkInputBuffer);\n                                self.dataininputbuffer = false;\n                                self.sendEvent({\n                                    type: \"response.create\",\n                                    response: {\n                                        modalities: [\"audio\", \"text\"],\n                                        instructions: self.itemdata.audiochatinstructions,\n                                        voice: self.audiochat_voice\n                                    }\n                                });\n                            }\n                            attempts++;\n                        }, 500);\n                    }\n                }\n            } else {\n                // Unmute mic: Connect source to analyser\n                if (self.sourceNode && self.analyser) {\n                    self.sourceNode.connect(self.analyser);\n                }\n\n                if (self.pc) {\n                    self.mediaStream.getTracks().forEach((track) => {\n                        track.enabled = true;\n                    });\n                }\n                self.isMicActive = true;\n                self.drawWave(); // Start drawing waveform\n            }\n            self.renderUI(); // Update UI\n        },\n\n        releaseMicResources: function() {\n            var self = this;\n            if (self.animationFrameId) {\n                cancelAnimationFrame(self.animationFrameId);\n                self.animationFrameId = null;\n            }\n            if (self.mediaStream) {\n                self.mediaStream.getTracks().forEach((track) => {\n                    if (typeof self.pc !== 'undefined' && self.pc) {\n                        // Find the RTCRtpSender associated with the track\n                        const sender = self.pc.getSenders().find(s => s.track === track);\n                        // Remove the sender if it exists\n                        if (sender) {\n                            self.pc.removeTrack(sender);\n                        }\n                    }\n                    track.stop();\n                });\n                self.mediaStream = null;\n            }\n            if (self.sourceNode) {\n                self.sourceNode.disconnect();\n                self.sourceNode = null;\n            }\n            if (self.audioContext) {\n                self.audioContext.close();\n                self.audioContext = null;\n            }\n            self.isMicActive = false;\n            self.isMicInitialized = false;\n            if (self.canvasCtx) {\n                self.canvasCtx.clearRect(0, 0, self.controls.micWaveformCanvas.width, self.controls.micWaveformCanvas.height); // Clear canvas\n            }\n            self.renderUI(); // Update UI to show mic inactive\n        },\n\n        drawWave: function() {\n            var self = this;\n            if (!self.canvasCtx || !self.analyser || !self.dataArray || !self.isMicActive) {\n                self.animationFrameId = null; // Stop animation if conditions are not met\n                return;\n            }\n\n            const WIDTH = self.controls.micWaveformCanvas.width;\n            const HEIGHT = self.controls.micWaveformCanvas.height;\n\n            self.animationFrameId = requestAnimationFrame(self.drawWave.bind(self));\n\n            self.analyser.getByteTimeDomainData(self.dataArray); // Get waveform data\n\n            self.canvasCtx.clearRect(0, 0, WIDTH, HEIGHT); // Clear previous drawing\n            self.canvasCtx.lineWidth = 2;\n            self.canvasCtx.strokeStyle = \"rgb(255, 255, 255)\"; // White color for wave on blue background\n\n            self.canvasCtx.beginPath();\n\n            const sliceWidth = (WIDTH * 1.0) / self.dataArray.length;\n            let x = 0;\n\n            for (let i = 0; i < self.dataArray.length; i++) {\n                const v = self.dataArray[i] / 128.0; // Normalize to 0-2\n                const y = (v * HEIGHT) / 2;\n\n                if (i === 0) {\n                    self.canvasCtx.moveTo(x, y);\n                } else {\n                    self.canvasCtx.lineTo(x, y);\n                }\n\n                x += sliceWidth;\n            }\n\n            self.canvasCtx.lineTo(WIDTH, HEIGHT / 2);\n            self.canvasCtx.stroke();\n        },\n\n        populateMicList: async function() {\n            var self = this;\n            try {\n                const devices = await navigator.mediaDevices.enumerateDevices();\n                const mics = devices.filter(device => device.kind === \"audioinput\");\n                const select = self.controls.micSelect;\n\n                select.innerHTML = \"\"; // Clear existing options\n\n                // Group by groupId to remove duplicates\n                const uniqueMics = [];\n                const seenGroups = new Set();\n\n                for (const mic of mics) {\n                    if (!seenGroups.has(mic.groupId)) {\n                        uniqueMics.push(mic);\n                        seenGroups.add(mic.groupId);\n                    }\n                }\n\n                if (uniqueMics.length <= 1) {\n                    select.disabled = true;\n                    return;\n                }\n                uniqueMics.forEach((mic, index) => {\n                    const option = document.createElement(\"option\");\n                    option.value = mic.deviceId;\n                    option.text = mic.label || `Microphone ${index + 1}`;\n                    select.appendChild(option);\n                });\n                select.parentElement.classList.remove('hidden');\n\n                // Set change listener\n                select.addEventListener(\"change\", async(e) => {\n                    const deviceId = e.target.value;\n                    await self.switchMic(deviceId);\n                });\n            } catch (err) {\n                log.debug(\"Failed to get microphone list:\", err);\n            }\n        },\n\n        switchMic: async function(deviceId) {\n            var self = this;\n\n            // Stop and release current mic\n            if (self.mediaStream) {\n                self.mediaStream.getTracks().forEach(track => track.stop());\n            }\n\n            try {\n                // Get new media stream from selected device\n                self.mediaStream = await navigator.mediaDevices.getUserMedia({\n                    audio: {deviceId: {exact: deviceId}}\n                });\n\n                // Replace tracks in PeerConnection\n                if (self.pc) {\n                    const senders = self.pc.getSenders();\n                    const audioTrack = self.mediaStream.getAudioTracks()[0];\n                    const audioSender = senders.find(sender => sender.track.kind === 'audio');\n                    if (audioSender) {\n                        audioSender.replaceTrack(audioTrack);\n                    }\n                }\n\n                // Reinitialize mic stream and waveform\n                await self.initializeMicStream();\n                if (self.isMicInitialized) {\n                    self.sourceNode.connect(self.analyser);\n                    self.mediaStream.getTracks().forEach((track) => {\n                        track.enabled = self.isMicActive;\n                    });\n                    if (self.isMicActive) {\n                        self.drawWave();\n                    }\n                }\n\n                log.debug(\"Switched microphone to:\" + deviceId);\n            } catch (err) {\n                log.debug(\"Failed to switch microphone:\");\n                log.debug(err);\n            }\n        },\n\n        // Dummy feedback display code\n        displayGradingFeedback: function(feedbackData) {\n            var self = this;\n\n            // Example: Update the UI with the grade and feedback\n            var feedbackContainer = self.controls.finishMessage;\n            feedbackContainer.innerHTML = `\n                <h3>Session Feedback</h3>\n                <p><strong>Grade:</strong> ${feedbackData.grade}%</p>\n                <p><strong>Explanation:</strong> ${feedbackData.gradeExplanation}</p>\n                <p><strong>Feedback:</strong> ${feedbackData.feedback}</p>\n        `;\n            feedbackContainer.classList.remove(\"hidden\");\n        }\n\n    }; // End of return object.\n});"],"names":["define","$","log","def","ttrecorder","templates","str","debug","autocreateresponse","gradingrequesttag","gradingData","strings","controls","itemdata","index","quizhelper","pc","dc","audiochat_voice","isSessionStarted","isSessionStopped","isSessionActive","isLoading","isMicActive","isMicInitialized","loadingMessages","Set","audioContext","analyser","dataArray","sourceNode","mediaStream","animationFrameId","canvasCtx","eventlogs","items","responses","abortcontroller","AbortController","dataininputbuffer","semantic_vad","type","eagerness","timebased_vad","silence_duration_ms","create_response","interrupt_response","threshold","clone","extend","this","init","audiochat_autoresponse","init_strings","init_controls","init_voice","register_events","renderUI","self","get_strings","done","s","i","gradebywordcount","next_question","stepdata","hasgrade","totalitems","totalmarks","resultsdata","Object","values","grade_activity","correctitems","Math","round","grade","do_next","count_words","userTranscript","forEach","item","content","push","join","split","length","toggle_autocreate_response","send","JSON","stringify","session","turn_detection","undefined","score","aifeedback","feedback","gradeexplanation","countwords","targetwordcount","wordcount","min","startSessionBtn","addEventListener","startSession","bind","stopSessionBtn","stopSession","retrySessionBtn","resetSession","autocreateresponseCheckbox","cancelStartSessionBtn","abort","nextbutton","on","uniqueid","timelimit","show","progressTimer","height","timeLimit","onFinish","trigger","toggleMicBtn","toggleMute","voice","includes","async","container","document","getElementById","hiddenaudio","querySelector","loadingIndicator","aiAvatarSection","chatActiveMessage","conversationSection","messagesContainer","micButtonContainer","micIcon","micWaveformCanvas","micSelect","finishMessage","resultscontainer","resultscontent","autocreateresponseToggle","clicktosendlabel","mainWrapper","getContext","populateMicList","scrollToBottom","firstElementChild","scrollIntoViewIfNeeded","scrollTop","scrollHeight","scrollMicButtonIntoView","scrollIntoView","behavior","block","classList","toggle","endScreen","noshowmics","querySelectorAll","parentElement","disabled","currentItem","orderedItems","idMap","Map","previousMap","set","id","previous_item_id","get","innerHTML","message","messageDiv","createElement","className","usertype","contentDiv","headerDiv","pictureDiv","M","cfg","wwwroot","appendChild","textDiv","textContent","has","loaderDiv","remove","add","twoletterlang","language","substr","RTCPeerConnection","iceServers","urls","createDataChannel","onmessage","e","data","lines","filter","Boolean","line","handleRTCEvent","call","parse","err","onopen","sendEvent","instructions","audiochatinstructions","input_audio_format","input_audio_transcription","model","speed","modalities","response","ontrack","event","srcObject","streams","navigator","mediaDevices","getUserMedia","audio","getTracks","track","enabled","addTrack","offer","createOffer","offerToReceiveAudio","setLocalDescription","waitForIceGathering","sdpResponse","fetch","method","headers","body","localDescription","sdp","signal","ok","text","answer","setRemoteDescription","close","stop","sendGradingRequest","responsedata","conversation","audiochatgradeinstructions","metadata","tag","max_output_tokens","temperature","clear","releaseMicResources","setTimeout","showResults","closeDataChannel","tdata","render","then","html","js","timeout","Promise","resolve","timer","checkState","iceGatheringState","clearTimeout","removeEventListener","obj","readyState","msg","msgresponse_id","response_id","msgitem_id","item_id","itemid","stack","events","time","Date","now","toString","role","enableMic","delta","transcript","delete","disableMic","jsonresponse","output","initializeMicStream","window","AudioContext","webkitAudioContext","createAnalyser","fftSize","bufferLength","frequencyBinCount","Uint8Array","createMediaStreamSource","disconnect","cancelAnimationFrame","clearRect","width","attempts","maxAttempts","checkInputBuffer","setInterval","clearInterval","connect","drawWave","sender","getSenders","find","removeTrack","WIDTH","HEIGHT","requestAnimationFrame","getByteTimeDomainData","lineWidth","strokeStyle","beginPath","sliceWidth","x","y","moveTo","lineTo","stroke","mics","enumerateDevices","device","kind","select","uniqueMics","seenGroups","mic","groupId","option","value","deviceId","label","target","switchMic","exact","senders","audioTrack","getAudioTracks","audioSender","replaceTrack","displayGradingFeedback","feedbackData","feedbackContainer","gradeExplanation"],"mappings":"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"}