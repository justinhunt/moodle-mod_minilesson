{"version":3,"file":"ttrecorder.min.js","sources":["../src/ttrecorder.js"],"sourcesContent":["define(['jquery', 'core/log','core/notification', 'core/ajax', 'mod_minilesson/ttaudiohelper','mod_minilesson/ttbrowserrec',\n    'core/str','mod_minilesson/timer','mod_minilesson/ttmsspeech'],\n    function ($, log, notification, ajax, audioHelper, browserRec, str, timer, msspeech) {\n    \"use strict\"; // jshint ;_;\n    /*\n    *  The TT recorder\n     */\n\n    log.debug('TT Recorder: initialising');\n\n    return {\n        waveHeight: 75,\n        audio: {\n            stream: null,\n            blob: null,\n            dataURI: null,\n            start: null,\n            end: null,\n            isRecording: false,\n            isRecognizing: false,\n            isWaiting: false,\n            transcript: null\n        },\n        submitting: false,\n        owner: '',\n        controls: {},\n        uniqueid: null,\n        audio_updated: null,\n        maxtime: 0,\n        passagehash: null,\n        region: null,\n        asrurl: null,\n        lang: null,\n        browserrec: null,\n        usebrowserrec: false,\n        currentTime: 0,\n        stt_guided: false,\n        currentPrompt: false,\n        speechtoken: '',\n        speechtokenvalidseconds: '',\n        speechtokentype: '',\n        forcestreaming: false,\n        is_streaming: false,\n        using_msspeech: false,\n        msspeech_instance: null,\n        strings: {},\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n        init: function(opts){\n\n            var that = this;\n            this.uniqueid=opts['uniqueid'];\n            this.callback=opts['callback'];\n            this.stt_guided = opts['stt_guided'] ? opts['stt_guided'] : false;\n            this.init_strings();\n            this.prepare_html();\n            this.controls.recordercontainer.show();\n            this.register_events();\n\n            //token check\n            this.using_msspeech = this.can_msspeech();\n            if(this.using_msspeech){\n                var referencetext = opts['referencetext'];\n                this.msspeech_instance = msspeech.clone();\n                this.msspeech_instance.init(this.speechtoken, this.region, this.lang, referencetext);\n            }\n\n            // Callback: Timer updates.\n            var handle_timer_update = function(){\n                var displaytime = that.timer.fetch_display_time();\n                that.controls.timerstatus.html(displaytime);\n                log.debug('timer_seconds: ' + that.timer.seconds);\n                log.debug('displaytime: ' + displaytime);\n                if (that.timer.seconds == 0 && that.timer.initseconds > 0) {\n                    that.update_audio('isRecognizing', true);\n                    if(that.usebrowserrec){\n                        that.browserrec.stop();\n                    }else{\n                        that.audiohelper.stop();\n                    }\n                }\n            };\n\n            // Callback: Recorder device errors.\n            var on_error = function(error) {\n                switch (error.name) {\n                    case 'PermissionDeniedError':\n                    case 'NotAllowedError':\n                        notification.alert(\"Error\",that.strings.allowmicaccess, \"OK\");\n                        break;\n                    case 'DevicesNotFoundError':\n                    case 'NotFoundError':\n                        notification.alert(\"Error\",that.strings.nomicdetected, \"OK\");\n                        break;\n                    default:\n                        //other errors, like from Edge can fire repeatedly so a notification is not a good idea\n                        //notification.alert(\"Error\", error.name, \"OK\");\n                        log.debug(\"Error\", error.name);\n                }\n            };\n\n            // Callback: Recording stopped.\n            var on_stopped = function(blob) {\n                that.timer.stop()\n\n                //if the blob is undefined then the user is super clicking or something\n                if(blob===undefined){\n                    return;\n                }\n\n                //Update our current audio object\n                var newaudio = {\n                    blob: blob,\n                    dataURI: URL.createObjectURL(blob),\n                    end: new Date(),\n                    isRecording: false,\n                    length: Math.round((that.audio.end - that.audio.start) / 1000),\n                };\n                that.update_audio(newaudio);\n\n                //if we are not streaming then upload_transcribe (ie send to poodll servers)\n                if(!that.is_streaming){\n                    if(that.using_msspeech){\n                        that.do_msspeech(that.audio.blob, function(response){\n                            that.gotMSResults(response);\n                            that.update_audio('isRecognizing',false);\n                        });\n                    }else{\n                        that.upload_transcribe(that.audio.blob, function(response){\n                            log.debug(response);\n                            if(response.data.result===\"success\" && response.data.transcript){\n                                that.gotRecognition(response.data.transcript.trim());\n                            } else {\n                                notification.alert(\"Information\",that.strings.speechnotrecognized, \"OK\");\n                            }\n                            that.update_audio('isRecognizing',false);\n                        });\n                    }\n                }\n\n            };\n\n            // Callback: Recorder device got stream - start recording\n            var on_gotstream=  function(stream) {\n                var newaudio={stream: stream, isRecording: true, isWaiting: false};\n                that.update_audio(newaudio);\n            };\n\n            //If browser rec (Chrome Speech Rec) \n            if(browserRec.will_work_ok() && ! this.stt_guided && !this.forcestreaming && !this.using_msspeech){\n                //Init browserrec\n                log.debug(\"using browser rec\");\n                this.browserrec = browserRec.clone();\n                this.browserrec.init(this.lang,this.waveHeight,this.uniqueid);\n                this.usebrowserrec=true;\n\n                //set up events\n                that.browserrec.onerror = on_error;\n                that.browserrec.onend = function(){\n                        //do something here\n                };\n                that.browserrec.onstart = function(){\n                    //do something here\n                };\n                that.browserrec.onfinalspeechcapture=function(speechtext){\n                    that.gotRecognition(speechtext);\n                    that.update_audio('isRecording',false);\n                    that.update_audio('isRecognizing',false);\n                };\n\n                that.browserrec.oninterimspeechcapture=function(speechtext){\n                    that.gotInterimRecognition(speechtext);\n                };\n\n            //If we have a streaming token\n            }else if( this.can_stream() && !this.stt_guided ) {\n                this.is_streaming = true;\n                //Init streaming audio helper\n                log.debug(\"using audio helper and streaming rec\");\n                this.audiohelper =  audioHelper.clone();\n                this.audiohelper.init(this.waveHeight,this.uniqueid, this);\n\n                that.audiohelper.onError = on_error;\n                that.audiohelper.onStop = on_stopped;\n                that.audiohelper.onStream = on_gotstream;\n                that.audiohelper.onfinalspeechcapture = function(speechtext){\n                    that.gotRecognition(speechtext);\n                    that.update_audio('isRecording',false);\n                    that.update_audio('isRecognizing',false);\n                };\n                that.audiohelper.oninterimspeechcapture = function(speechtext){\n                    that.gotInterimRecognition(speechtext);\n                };\n                \n            //If upload_transcriber\n            } else {\n                //set up upload_transcriber\n                log.debug(\"using upload_transcriber\");\n                this.audiohelper =  audioHelper.clone();\n                this.audiohelper.init(this.waveHeight,this.uniqueid,this);\n\n                that.audiohelper.onError = on_error;\n                that.audiohelper.onStop = on_stopped;\n                that.audiohelper.onStream = on_gotstream;\n\n            }//end of setting up recorders\n\n            // Set up token refresh\n            this.init_token_refresh();\n\n            // Setting up timer.\n            this.timer = timer.clone();\n            this.timer.init(this.maxtime, handle_timer_update);\n            // Init the timer readout\n            handle_timer_update();\n        },\n\n        can_stream: function( ){\n            return (this.speechtoken && this.speechtoken !== 'false'&& this.speechtokentype === 'assemblyai' && !this.stt_guided);\n        },\n\n        can_msspeech: function( ){\n            return (this.speechtoken && this.speechtoken !== 'false' && this.speechtokentype === 'msspeech');\n        },\n\n        update_currentprompt: function(targettext){\n            this.currentPrompt = targettext;\n            if(this.using_msspeech){\n                this.msspeech_instance.set_reference_text(targettext);\n            }\n        },\n\n        blobToArrayBuffer: function (blob) {\n            return new Promise((resolve, reject) => {\n                const reader = new FileReader();\n                reader.onload = function(event) {\n                    resolve(event.target.result);\n                };\n                reader.onerror = function(error) {\n                    reject(error);\n                };\n                reader.readAsArrayBuffer(blob);\n            });\n        },\n\n        init_strings: function(){\n            var that=this;\n            str.get_strings([\n                { \"key\": \"allowmicaccess\", \"component\": 'mod_minilesson'},\n                { \"key\": \"nomicdetected\", \"component\": 'mod_minilesson'},\n                { \"key\": \"speechnotrecognized\", \"component\": 'mod_minilesson'},\n\n            ]).done(function (s) {\n                var i = 0;\n                that.strings.allowmicaccess = s[i++];\n                that.strings.nomicdetected = s[i++];\n                that.strings.speechnotrecognized = s[i++];\n            });\n        },\n\n        prepare_html: function(){\n            this.controls.recordercontainer =$('#ttrec_container_' + this.uniqueid);\n            this.controls.recorderbutton = $('#' + this.uniqueid + '_recorderdiv');\n            this.controls.waveform = $('#' + this.uniqueid + '_waveform');\n            this.controls.timerstatus = $('.timerstatus_' + this.uniqueid);\n            this.passagehash = this.controls.recorderbutton.data('passagehash');\n            this.region=this.controls.recorderbutton.data('region');\n            this.lang=this.controls.recorderbutton.data('lang');\n            this.asrurl=this.controls.recorderbutton.data('asrurl');\n            this.speechtoken=this.controls.recorderbutton.data('speechtoken');\n            this.speechtokenvalidseconds=this.controls.recorderbutton.data('speechtokenvalidseconds');\n            this.speechtokentype=this.controls.recorderbutton.data('speechtokentype');\n            this.forcestreaming=this.controls.recorderbutton.data('forcestreaming');\n            this.maxtime=this.controls.recorderbutton.data('maxtime');\n            this.waveHeight=this.controls.recorderbutton.data('waveheight');\n        },\n\n        init_token_refresh: function() {\n            var that = this;\n            var validsecs = Number(that.speechtokenvalidseconds) || 0;\n            // If we have a token, then we can set up a timer to refresh it\n            if (that.speechtoken && validsecs > 0) {\n                //(valid until seconds - now seconds) => milliseconds\n                var refreshInterval = (validsecs -10) * 1000;\n                log.debug('Refreshing ' + that.speechtokentype +' token after ' + refreshInterval + ' milliseconds');\n                if (refreshInterval > 0) {\n                    setTimeout(function() {\n                        // Refresh the token\n                        log.debug('Refreshing streaming token...');\n                        var ajaxresult =  ajax.call([{\n                            methodname: 'mod_minilesson_refresh_token',\n                            args: {\n                                'type': that.speechtokentype,\n                                'region': that.region\n                            },\n                            async: false\n                        }])[0].then(ajaxresult => {\n                            log.debug('New token ajaxresult:', ajaxresult);\n                            var newtoken = JSON.parse(ajaxresult);\n                            log.debug('New token received:', newtoken);\n                            // Update our internal token\n                            if(newtoken && newtoken.token) {\n                                that.speechtoken = newtoken.token;\n                                that.speechtokenvalidseconds = newtoken.validseconds;\n                                switch (newtoken.type) {\n                                    case 'assemblyai':\n                                        that.helper.streamer.updatetoken(newtoken.token);\n                                        break;\n                                    case 'msspeech':\n                                        that.msspeech_instance.updatetoken(newtoken.token);\n                                        break;\n                                }\n                                log.debug('Streaming token refreshed successfully.');\n                                // Start the countdown all over again\n                                that.init_token_refresh();\n                            } else {\n                                log.debug('New token was not a token.');\n                            }\n                        });\n                        \n                    }, refreshInterval);\n                    \n                } else {\n                    log.debug('Streaming token is already valid, no need to refresh.');\n                }\n            } else {\n                log.debug('No valid streaming token available, skipping refresh setup.');\n            }\n        },\n\n        silence_detected: function(){\n            if(this.audio.isRecording){\n                this.toggleRecording();\n            }\n        },\n\n        update_audio: function(newprops,val){\n            if (typeof newprops === 'string') {\n                log.debug('update_audio:' + newprops + ':' + val);\n                if (this.audio[newprops] !== val) {\n                    this.audio[newprops] = val;\n                    this.audio_updated();\n                }\n            }else{\n                for (var theprop in newprops) {\n                    this.audio[theprop] = newprops[theprop];\n                    log.debug('update_audio:' + theprop + ':' + newprops[theprop]);\n                }\n                this.audio_updated();\n            }\n        },\n\n        register_events: function(){\n            var that = this;\n            this.controls.recordercontainer.click(function(){\n                that.toggleRecording();\n            });\n\n            this.audio_updated=function() {\n                //pointer\n                if (that.audio.isRecognizing || that.audio.isWaiting ) {\n                    that.show_recorder_pointer('none');\n                } else {\n                    that.show_recorder_pointer('auto');\n                }\n                //the color\n                //we no longer swap out colors for waiting .. its too fast and a bit jarring\n                if(that.audio.isRecognizing || that.audio.isRecording || that.audio.isWaiting){\n                    this.controls.recorderbutton.removeClass('ttrec_ready');\n                    this.controls.recorderbutton.removeClass('ttrec_waiting');\n                    this.controls.waveform.removeClass('ttrec_waiting');\n                    this.controls.recorderbutton.addClass('ttrec_engaged');\n                }else if (that.audio.isWaiting && false) {\n                    this.controls.recorderbutton.removeClass('ttrec_engaged');\n                    this.controls.recorderbutton.removeClass('ttrec_ready');\n                    this.controls.recorderbutton.addClass('ttrec_waiting');\n                    this.controls.waveform.addClass('ttrec_waiting');\n                }else{\n                    this.controls.recorderbutton.removeClass('ttrec_engaged');\n                    this.controls.recorderbutton.removeClass('ttrec_waiting');\n                    this.controls.waveform.removeClass('ttrec_waiting');\n                    this.controls.recorderbutton.addClass('ttrec_ready');\n                }\n\n                //the font awesome spinner/mic/square\n                that.controls.recorderbutton.html(that.recordBtnContent());\n            };\n\n        },\n\n        show_recorder_pointer: function(show){\n            if(show) {\n                this.controls.recorderbutton.css('pointer-events', 'none');\n            }else{\n                this.controls.recorderbutton.css('pointer-events', 'auto');\n            }\n\n        },\n\n        startedRecording:function(){\n\n            var message={};\n            message.type='recording';\n            message.results = '';\n            this.callback(message);\n        },\n\n        gotMSResults:function(results){\n            log.debug(results);\n            var message={};\n            message.type='pronunciation_results';\n            message.results = results;\n            this.callback(message);\n        },\n\n        gotRecognition:function(transcript){\n            log.debug('transcript:' + transcript);\n            if(transcript.trim()==''){return;}\n            var message={};\n            message.type='speech';\n            message.capturedspeech = transcript;\n            this.callback(message);\n        },\n\n        gotInterimRecognition:function(transcript){\n            var message={};\n            message.type='interimspeech';\n            message.capturedspeech = transcript;\n           //POINT\n            this.callback(message);\n        },\n\n        cleanWord: function(word) {\n            return word.replace(/['!\"#$%&\\\\'()\\*+,\\-\\.\\/:;<=>?@\\[\\\\\\]\\^_`{|}~']/g,\"\").toLowerCase();\n        },\n\n        recordBtnContent: function() {\n\n            if(!this.audio.isRecognizing){\n\n                if (this.audio.isRecording) {\n                    return '<i class=\"fa fa-stop\">';\n\n                } else if(this.audio.isWaiting) {\n                    return '<i class=\"fa fa-solid fa-cog fa-spin\">';\n\n                } else {\n                    return '<i class=\"fa fa-microphone\">';\n                }\n            } else {\n                return '<i class=\"fa fa-spinner fa-spin\">';\n            }\n        },\n        toggleRecording: function() {\n            var that =this;\n\n            //If we are recognizing, then we want to discourage super click'ers\n            if (this.audio.isRecognizing || this.audio.isWaiting) {\n                return;\n            }\n\n            //If we are currently recording\n            if (this.audio.isRecording) {\n                that.timer.stop();\n\n                //If using Browser Rec (chrome speech)\n                if(this.usebrowserrec){\n                    that.update_audio('isRecording',false);\n                    that.update_audio('isRecognizing',true);\n                    this.browserrec.stop();\n                //If using upload_transcriber or streaming\n                }else{\n                    this.update_audio('isRecognizing',true);\n                    this.audiohelper.stop();\n                }\n\n             //If we are NOT currently recording\n            } else {\n                // Run the timer\n                that.currentTime = 0;\n                that.timer.reset();\n                that.timer.start();\n                \n\n                //If using Browser Rec (chrome speech)\n                if(this.usebrowserrec){\n                    this.update_audio('isRecording',true);\n                    this.browserrec.start();\n\n                //If using Audio helper for upload_transcriber or streaming\n                }else {\n                    var newaudio = {\n                        stream: null,\n                        blob: null,\n                        dataURI: null,\n                        start: new Date(),\n                        end: null,\n                        isRecording: false,\n                        isRecognizing: false,\n                        isWaiting: true,\n                        transcript: null\n                    };\n                    this.update_audio(newaudio);\n                    this.audiohelper.start();\n                }\n                this.startedRecording();\n            }\n        },\n\n        upload_transcribe: function(blob, callback) {\n            var bodyFormData = new FormData();\n            var blobname = this.uniqueid + Math.floor(Math.random() * 100) +  '.wav';\n            bodyFormData.append('audioFile', blob, blobname);\n            bodyFormData.append('scorer', this.passagehash);\n            if(this.stt_guided) {\n                bodyFormData.append('strictmode', 'false');\n            }else{\n                bodyFormData.append('strictmode', 'true');\n            }\n            //prompt is used by whisper and other transcibers down the line\n            if(this.currentPrompt!==false){\n                bodyFormData.append('prompt', this.currentPrompt);\n            }\n            bodyFormData.append('lang', this.lang);\n            bodyFormData.append('wwwroot', M.cfg.wwwroot);\n\n            var oReq = new XMLHttpRequest();\n            oReq.open(\"POST\", this.asrurl, true);\n            oReq.onUploadProgress= function(progressEvent) {};\n            oReq.onload = function(oEvent) {\n                if (oReq.status === 200) {\n                    callback(JSON.parse(oReq.response));\n                } else {\n                    callback({data: {result: \"error\"}});\n                    log.debug(oReq.error);\n                }\n            };\n            try {\n                oReq.send(bodyFormData);\n            }catch(err){\n                callback({data: {result: \"error\"}});\n                log.debug(err);\n            }\n        },\n\n        do_msspeech: function(blob, callback) {\n            this.msspeech_instance.recognize(blob,callback)\n        },\n\n    };//end of return value\n\n});"],"names":["define","$","log","notification","ajax","audioHelper","browserRec","str","timer","msspeech","debug","waveHeight","audio","stream","blob","dataURI","start","end","isRecording","isRecognizing","isWaiting","transcript","submitting","owner","controls","uniqueid","audio_updated","maxtime","passagehash","region","asrurl","lang","browserrec","usebrowserrec","currentTime","stt_guided","currentPrompt","speechtoken","speechtokenvalidseconds","speechtokentype","forcestreaming","is_streaming","using_msspeech","msspeech_instance","strings","clone","extend","this","init","opts","that","callback","init_strings","prepare_html","recordercontainer","show","register_events","can_msspeech","referencetext","handle_timer_update","displaytime","fetch_display_time","timerstatus","html","seconds","initseconds","update_audio","stop","audiohelper","on_error","error","name","alert","allowmicaccess","nomicdetected","on_stopped","undefined","newaudio","URL","createObjectURL","Date","length","Math","round","do_msspeech","response","gotMSResults","upload_transcribe","data","result","gotRecognition","trim","speechnotrecognized","on_gotstream","will_work_ok","can_stream","onError","onStop","onStream","onfinalspeechcapture","speechtext","oninterimspeechcapture","gotInterimRecognition","onerror","onend","onstart","init_token_refresh","update_currentprompt","targettext","set_reference_text","blobToArrayBuffer","Promise","resolve","reject","reader","FileReader","onload","event","target","readAsArrayBuffer","get_strings","done","s","i","recorderbutton","waveform","validsecs","Number","refreshInterval","setTimeout","call","methodname","args","async","then","ajaxresult","newtoken","JSON","parse","token","validseconds","type","helper","streamer","updatetoken","silence_detected","toggleRecording","newprops","val","theprop","click","show_recorder_pointer","removeClass","addClass","recordBtnContent","css","startedRecording","message","results","capturedspeech","cleanWord","word","replace","toLowerCase","reset","bodyFormData","FormData","blobname","floor","random","append","M","cfg","wwwroot","oReq","XMLHttpRequest","open","onUploadProgress","progressEvent","oEvent","status","send","err","recognize"],"mappings":"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"}