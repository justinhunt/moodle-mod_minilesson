{"version":3,"file":"ttrecorder.min.js","sources":["../src/ttrecorder.js"],"sourcesContent":["define(['jquery', 'core/log','core/notification', 'mod_minilesson/ttaudiohelper','mod_minilesson/ttbrowserrec','core/str','mod_minilesson/timer' ],\n    function ($, log, notification, audioHelper, browserRec,str, timer) {\n    \"use strict\"; // jshint ;_;\n    /*\n    *  The TT recorder\n     */\n\n    log.debug('TT Recorder: initialising');\n\n    return {\n        waveHeight: 75,\n        audio: {\n            stream: null,\n            blob: null,\n            dataURI: null,\n            start: null,\n            end: null,\n            isRecording: false,\n            isRecognizing: false,\n            isWaiting: false,\n            transcript: null\n        },\n        submitting: false,\n        owner: '',\n        controls: {},\n        uniqueid: null,\n        audio_updated: null,\n        maxtime: 0,\n        passagehash: null,\n        region: null,\n        asrurl: null,\n        lang: null,\n        browserrec: null,\n        usebrowserrec: false,\n        currentTime: 0,\n        stt_guided: false,\n        currentPrompt: false,\n        streamingtoken: '',\n        forcestreaming: false,\n        is_streaming: false,\n        strings: {},\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n        init: function(opts){\n\n            var that = this;\n            this.uniqueid=opts['uniqueid'];\n            this.callback=opts['callback'];\n            this.stt_guided = opts['stt_guided'] ? opts['stt_guided'] : false;\n            this.init_strings();\n            this.prepare_html();\n            this.controls.recordercontainer.show();\n            this.register_events();\n\n            // Callbacks.\n\n            // Callback: Timer updates.\n            var handle_timer_update = function(){\n                var displaytime = that.timer.fetch_display_time();\n                that.controls.timerstatus.html(displaytime);\n                log.debug('timer_seconds: ' + that.timer.seconds);\n                log.debug('displaytime: ' + displaytime);\n                if (that.timer.seconds == 0 && that.timer.initseconds > 0) {\n                    that.update_audio('isRecognizing', true);\n                    if(that.usebrowserrec){\n                        that.browserrec.stop();\n                    }else{\n                        that.audiohelper.stop();\n                    }\n                }\n            };\n\n            // Callback: Recorder device errors.\n            var on_error = function(error) {\n                switch (error.name) {\n                    case 'PermissionDeniedError':\n                    case 'NotAllowedError':\n                        notification.alert(\"Error\",that.strings.allowmicaccess, \"OK\");\n                        break;\n                    case 'DevicesNotFoundError':\n                    case 'NotFoundError':\n                        notification.alert(\"Error\",that.strings.nomicdetected, \"OK\");\n                        break;\n                    default:\n                        //other errors, like from Edge can fire repeatedly so a notification is not a good idea\n                        //notification.alert(\"Error\", error.name, \"OK\");\n                        log.debug(\"Error\", error.name);\n                }\n            };\n\n            // Callback: Recording stopped.\n            var on_stopped = function(blob) {\n                that.timer.stop()\n\n                //if the blob is undefined then the user is super clicking or something\n                if(blob===undefined){\n                    return;\n                }\n\n                //if ds recc\n                var newaudio = {\n                    blob: blob,\n                    dataURI: URL.createObjectURL(blob),\n                    end: new Date(),\n                    isRecording: false,\n                    length: Math.round((that.audio.end - that.audio.start) / 1000),\n                };\n                that.update_audio(newaudio);\n\n                //if we are not streaming then deep speech rec\n                if(!that.is_streaming){\n                    that.deepSpeech2(that.audio.blob, function(response){\n                        log.debug(response);\n                        if(response.data.result===\"success\" && response.data.transcript){\n                            that.gotRecognition(response.data.transcript.trim());\n                        } else {\n                            notification.alert(\"Information\",that.strings.speechnotrecognized, \"OK\");\n                        }\n                        that.update_audio('isRecognizing',false);\n                    });\n                }\n\n            };\n\n            // Callback: Recorder device got stream - start recording\n            var on_gotstream=  function(stream) {\n                var newaudio={stream: stream, isRecording: true, isWaiting: false};\n                that.update_audio(newaudio);\n            };\n\n            //If browser rec (Chrome Speech Rec) (and ds is optional)\n            if(browserRec.will_work_ok() && ! this.stt_guided && !this.forcestreaming){\n                //Init browserrec\n                log.debug(\"using browser rec\");\n                this.browserrec = browserRec.clone();\n                this.browserrec.init(this.lang,this.waveHeight,this.uniqueid);\n                this.usebrowserrec=true;\n\n                //set up events\n                that.browserrec.onerror = on_error;\n                that.browserrec.onend = function(){\n                        //do something here\n                };\n                that.browserrec.onstart = function(){\n                    //do something here\n                };\n                that.browserrec.onfinalspeechcapture=function(speechtext){\n                    that.gotRecognition(speechtext);\n                    that.update_audio('isRecording',false);\n                    that.update_audio('isRecognizing',false);\n                };\n\n                that.browserrec.oninterimspeechcapture=function(speechtext){\n                    that.gotInterimRecognition(speechtext);\n                };\n\n            //If we have a streaming token\n            }else if( this.can_stream() && !this.stt_guided ) {\n                this.is_streaming = true;\n                //Init streaming audio helper\n                log.debug(\"using audio helper and streaming rec\");\n                this.audiohelper =  audioHelper.clone();\n                this.audiohelper.init(this.waveHeight,this.uniqueid, this);\n\n                that.audiohelper.onError = on_error;\n                that.audiohelper.onStop = on_stopped;\n                that.audiohelper.onStream = on_gotstream;\n                that.audiohelper.onfinalspeechcapture = function(speechtext){\n                    that.gotRecognition(speechtext);\n                    that.update_audio('isRecording',false);\n                    that.update_audio('isRecognizing',false);\n                };\n                that.audiohelper.oninterimspeechcapture = function(speechtext){\n                    that.gotInterimRecognition(speechtext);\n                };\n                \n            //If DS rec\n            } else {\n                //set up wav for ds rec\n                log.debug(\"using ds rec\");\n                this.audiohelper =  audioHelper.clone();\n                this.audiohelper.init(this.waveHeight,this.uniqueid,this);\n\n                that.audiohelper.onError = on_error;\n                that.audiohelper.onStop = on_stopped;\n                that.audiohelper.onStream = on_gotstream;\n\n            }//end of setting up recorders\n\n            // Setting up timer.\n            this.timer = timer.clone();\n            this.timer.init(this.maxtime, handle_timer_update);\n            // Init the timer readout\n            handle_timer_update();\n        },\n\n        can_stream: function( ){\n            return (this.streamingtoken && this.streamingtoken !== 'false' && !this.stt_guided);\n        },\n\n        init_strings: function(){\n            var that=this;\n            str.get_strings([\n                { \"key\": \"allowmicaccess\", \"component\": 'mod_minilesson'},\n                { \"key\": \"nomicdetected\", \"component\": 'mod_minilesson'},\n                { \"key\": \"speechnotrecognized\", \"component\": 'mod_minilesson'},\n\n            ]).done(function (s) {\n                var i = 0;\n                that.strings.allowmicaccess = s[i++];\n                that.strings.nomicdetected = s[i++];\n                that.strings.speechnotrecognized = s[i++];\n            });\n        },\n\n        prepare_html: function(){\n            this.controls.recordercontainer =$('#ttrec_container_' + this.uniqueid);\n            this.controls.recorderbutton = $('#' + this.uniqueid + '_recorderdiv');\n            this.controls.waveform = $('#' + this.uniqueid + '_waveform');\n            this.controls.timerstatus = $('.timerstatus_' + this.uniqueid);\n            this.passagehash = this.controls.recorderbutton.data('passagehash');\n            this.region=this.controls.recorderbutton.data('region');\n            this.lang=this.controls.recorderbutton.data('lang');\n            this.asrurl=this.controls.recorderbutton.data('asrurl');\n            this.streamingtoken=this.controls.recorderbutton.data('streamingtoken');\n            this.forcestreaming=this.controls.recorderbutton.data('forcestreaming');\n            this.maxtime=this.controls.recorderbutton.data('maxtime');\n            this.waveHeight=this.controls.recorderbutton.data('waveheight');\n        },\n\n        silence_detected: function(){\n            if(this.audio.isRecording){\n                this.toggleRecording();\n            }\n        },\n\n        update_audio: function(newprops,val){\n            if (typeof newprops === 'string') {\n                log.debug('update_audio:' + newprops + ':' + val);\n                if (this.audio[newprops] !== val) {\n                    this.audio[newprops] = val;\n                    this.audio_updated();\n                }\n            }else{\n                for (var theprop in newprops) {\n                    this.audio[theprop] = newprops[theprop];\n                    log.debug('update_audio:' + theprop + ':' + newprops[theprop]);\n                }\n                this.audio_updated();\n            }\n        },\n\n        register_events: function(){\n            var that = this;\n            this.controls.recordercontainer.click(function(){\n                that.toggleRecording();\n            });\n\n            this.audio_updated=function() {\n                //pointer\n                if (that.audio.isRecognizing || that.audio.isWaiting ) {\n                    that.show_recorder_pointer('none');\n                } else {\n                    that.show_recorder_pointer('auto');\n                }\n                //the color\n                //we no longer swap out colors for waiting .. its too fast and a bit jarring\n                if(that.audio.isRecognizing || that.audio.isRecording || that.audio.isWaiting){\n                    this.controls.recorderbutton.removeClass('ttrec_ready');\n                    this.controls.recorderbutton.removeClass('ttrec_waiting');\n                    this.controls.waveform.removeClass('ttrec_waiting');\n                    this.controls.recorderbutton.addClass('ttrec_engaged');\n                }else if (that.audio.isWaiting && false) {\n                    this.controls.recorderbutton.removeClass('ttrec_engaged');\n                    this.controls.recorderbutton.removeClass('ttrec_ready');\n                    this.controls.recorderbutton.addClass('ttrec_waiting');\n                    this.controls.waveform.addClass('ttrec_waiting');\n                }else{\n                    this.controls.recorderbutton.removeClass('ttrec_engaged');\n                    this.controls.recorderbutton.removeClass('ttrec_waiting');\n                    this.controls.waveform.removeClass('ttrec_waiting');\n                    this.controls.recorderbutton.addClass('ttrec_ready');\n                }\n\n                //the font awesome spinner/mic/square\n                that.controls.recorderbutton.html(that.recordBtnContent());\n            };\n\n        },\n\n        show_recorder_pointer: function(show){\n            if(show) {\n                this.controls.recorderbutton.css('pointer-events', 'none');\n            }else{\n                this.controls.recorderbutton.css('pointer-events', 'auto');\n            }\n\n        },\n\n        gotRecognition:function(transcript){\n            log.debug('transcript:' + transcript);\n            if(transcript.trim()==''){return;}\n            var message={};\n            message.type='speech';\n            message.capturedspeech = transcript;\n            this.callback(message);\n        },\n\n        gotInterimRecognition:function(transcript){\n            var message={};\n            message.type='interimspeech';\n            message.capturedspeech = transcript;\n           //POINT\n            this.callback(message);\n        },\n\n        cleanWord: function(word) {\n            return word.replace(/['!\"#$%&\\\\'()\\*+,\\-\\.\\/:;<=>?@\\[\\\\\\]\\^_`{|}~']/g,\"\").toLowerCase();\n        },\n\n        recordBtnContent: function() {\n\n            if(!this.audio.isRecognizing){\n\n                if (this.audio.isRecording) {\n                    return '<i class=\"fa fa-stop\">';\n\n                } else if(this.audio.isWaiting) {\n                    return '<i class=\"fa fa-solid fa-cog fa-spin\">';\n\n                } else {\n                    return '<i class=\"fa fa-microphone\">';\n                }\n            } else {\n                return '<i class=\"fa fa-spinner fa-spin\">';\n            }\n        },\n        toggleRecording: function() {\n            var that =this;\n\n            //If we are recognizing, then we want to discourage super click'ers\n            if (this.audio.isRecognizing || this.audio.isWaiting) {\n                return;\n            }\n\n            //If we are current recording\n            if (this.audio.isRecording) {\n                that.timer.stop();\n\n                //If using Browser Rec (chrome speech)\n                if(this.usebrowserrec){\n                    that.update_audio('isRecording',false);\n                    that.update_audio('isRecognizing',true);\n                    this.browserrec.stop();\n                //If using DS rec\n                }else{\n                    this.update_audio('isRecognizing',true);\n                    this.audiohelper.stop();\n                }\n\n             //If we are NOT currently recording\n            } else {\n                // Run the timer\n                that.currentTime = 0;\n                that.timer.reset();\n                that.timer.start();\n                \n\n                //If using Browser Rec (chrome speech)\n                if(this.usebrowserrec){\n                    this.update_audio('isRecording',true);\n                    this.browserrec.start();\n\n                //If using Audio helper\n                }else {\n                    var newaudio = {\n                        stream: null,\n                        blob: null,\n                        dataURI: null,\n                        start: new Date(),\n                        end: null,\n                        isRecording: false,\n                        isRecognizing: false,\n                        isWaiting: true,\n                        transcript: null\n                    };\n                    this.update_audio(newaudio);\n                    this.audiohelper.start();\n                }\n            }\n        },\n\n        deepSpeech2: function(blob, callback) {\n            var bodyFormData = new FormData();\n            var blobname = this.uniqueid + Math.floor(Math.random() * 100) +  '.wav';\n            bodyFormData.append('audioFile', blob, blobname);\n            bodyFormData.append('scorer', this.passagehash);\n            if(this.stt_guided) {\n                bodyFormData.append('strictmode', 'false');\n            }else{\n                bodyFormData.append('strictmode', 'true');\n            }\n            //prompt is used by whisper and other transcibers down the line\n            if(this.currentPrompt!==false){\n                bodyFormData.append('prompt', this.currentPrompt);\n            }\n            bodyFormData.append('lang', this.lang);\n            bodyFormData.append('wwwroot', M.cfg.wwwroot);\n\n            var oReq = new XMLHttpRequest();\n            oReq.open(\"POST\", this.asrurl, true);\n            oReq.onUploadProgress= function(progressEvent) {};\n            oReq.onload = function(oEvent) {\n                if (oReq.status === 200) {\n                    callback(JSON.parse(oReq.response));\n                } else {\n                    callback({data: {result: \"error\"}});\n                    log.debug(oReq.error);\n                }\n            };\n            try {\n                oReq.send(bodyFormData);\n            }catch(err){\n                callback({data: {result: \"error\"}});\n                log.debug(err);\n            }\n        },\n\n    };//end of return value\n\n});"],"names":["define","$","log","notification","audioHelper","browserRec","str","timer","debug","waveHeight","audio","stream","blob","dataURI","start","end","isRecording","isRecognizing","isWaiting","transcript","submitting","owner","controls","uniqueid","audio_updated","maxtime","passagehash","region","asrurl","lang","browserrec","usebrowserrec","currentTime","stt_guided","currentPrompt","streamingtoken","forcestreaming","is_streaming","strings","clone","extend","this","init","opts","that","callback","init_strings","prepare_html","recordercontainer","show","register_events","handle_timer_update","displaytime","fetch_display_time","timerstatus","html","seconds","initseconds","update_audio","stop","audiohelper","on_error","error","name","alert","allowmicaccess","nomicdetected","on_stopped","undefined","newaudio","URL","createObjectURL","Date","length","Math","round","deepSpeech2","response","data","result","gotRecognition","trim","speechnotrecognized","on_gotstream","will_work_ok","can_stream","onError","onStop","onStream","onfinalspeechcapture","speechtext","oninterimspeechcapture","gotInterimRecognition","onerror","onend","onstart","get_strings","done","s","i","recorderbutton","waveform","silence_detected","toggleRecording","newprops","val","theprop","click","show_recorder_pointer","removeClass","addClass","recordBtnContent","css","message","capturedspeech","cleanWord","word","replace","toLowerCase","reset","bodyFormData","FormData","blobname","floor","random","append","M","cfg","wwwroot","oReq","XMLHttpRequest","open","onUploadProgress","progressEvent","onload","oEvent","status","JSON","parse","send","err"],"mappings":"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"}