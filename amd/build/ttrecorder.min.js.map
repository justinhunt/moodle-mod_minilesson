{"version":3,"file":"ttrecorder.min.js","sources":["../src/ttrecorder.js"],"sourcesContent":["define(['jquery', 'core/log','core/notification', 'mod_minilesson/ttaudiohelper','mod_minilesson/ttbrowserrec','core/str','mod_minilesson/timer' ],\n    function ($, log, notification, audioHelper, browserRec,str, timer) {\n    \"use strict\"; // jshint ;_;\n    /*\n    *  The TT recorder\n     */\n\n    log.debug('TT Recorder: initialising');\n\n    return {\n        waveHeight: 75,\n        audio: {\n            stream: null,\n            blob: null,\n            dataURI: null,\n            start: null,\n            end: null,\n            isRecording: false,\n            isRecognizing: false,\n            transcript: null\n        },\n        submitting: false,\n        owner: '',\n        controls: {},\n        uniqueid: null,\n        audio_updated: null,\n        maxtime: 0,\n        passagehash: null,\n        region: null,\n        asrurl: null,\n        lang: null,\n        browserrec: null,\n        usebrowserrec: false,\n        currentTime: 0,\n        stt_guided: false,\n        currentPrompt: false,\n        strings: {},\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n        init: function(opts){\n\n            var that = this;\n\n            this.uniqueid=opts['uniqueid'];\n            this.callback=opts['callback'];\n            this.stt_guided = opts['stt_guided'] ? opts['stt_guided'] : false;\n            this.streamingtoken = '4cdcdcaa46a0907e8c81bfeabac8017be741e54ccddd326738ccedae2395777e';//opts['streamingtoken'];\n            this.init_strings();\n            this.prepare_html();\n            this.controls.recordercontainer.show();\n            this.register_events();\n\n            // Callbacks.\n\n            // Callback: Timer updates.\n            var handle_timer_update = function(){\n                var displaytime = that.timer.fetch_display_time();\n                that.controls.timerstatus.html(displaytime);\n                log.debug('timer_seconds: ' + that.timer.seconds);\n                log.debug('displaytime: ' + displaytime);\n                if (that.timer.seconds == 0 && that.timer.initseconds > 0) {\n                    that.update_audio('isRecognizing', true);\n                    if(that.usebrowserrec){\n                        that.browserrec.stop();\n                    }else{\n                        that.audiohelper.stop();\n                    }\n                }\n            };\n\n            // Callback: Recorder device errors.\n            var on_error = function(error) {\n                switch (error.name) {\n                    case 'PermissionDeniedError':\n                    case 'NotAllowedError':\n                        notification.alert(\"Error\",that.strings.allowmicaccess, \"OK\");\n                        break;\n                    case 'DevicesNotFoundError':\n                    case 'NotFoundError':\n                        notification.alert(\"Error\",that.strings.nomicdetected, \"OK\");\n                        break;\n                    default:\n                        //other errors, like from Edge can fire repeatedly so a notification is not a good idea\n                        //notification.alert(\"Error\", error.name, \"OK\");\n                        log.debug(\"Error\", error.name);\n                }\n            };\n\n            // Callback: Recording stopped.\n            var on_stopped = function(blob) {\n                that.timer.stop()\n\n                //if the blob is undefined then the user is super clicking or something\n                if(blob===undefined){\n                    return;\n                }\n\n                //if ds recc\n                var newaudio = {\n                    blob: blob,\n                    dataURI: URL.createObjectURL(blob),\n                    end: new Date(),\n                    isRecording: false,\n                    length: Math.round((that.audio.end - that.audio.start) / 1000),\n                };\n                that.update_audio(newaudio);\n\n                that.deepSpeech2(that.audio.blob, function(response){\n                    log.debug(response);\n                    if(response.data.result===\"success\" && response.data.transcript){\n                        that.gotRecognition(response.data.transcript.trim());\n                    } else {\n                        notification.alert(\"Information\",that.strings.speechnotrecognized, \"OK\");\n                    }\n                    that.update_audio('isRecognizing',false);\n                });\n\n            };\n\n            // Callback: Recorder device got stream - start recording\n            var on_gotstream=  function(stream) {\n                var newaudio={stream: stream, isRecording: true};\n                that.update_audio(newaudio);\n\n                //TO DO - conditionally start timer here (not toggle recording)\n                //so a device error does not cause timer disaster\n                // that.timer.reset();\n                // that.timer.start();\n                \n            };\n\n            //If browser rec (Chrome Speech Rec) (and ds is optiona)\n            if(browserRec.will_work_ok() && ! this.stt_guided && false){\n                //Init browserrec\n                log.debug(\"using browser rec\");\n                this.browserrec = browserRec.clone();\n                this.browserrec.init(this.lang,this.waveHeight,this.uniqueid);\n                this.usebrowserrec=true;\n\n                //set up events\n                that.browserrec.onerror = on_error;\n                that.browserrec.onend = function(){\n                        //do something here\n                };\n                that.browserrec.onstart = function(){\n                    //do something here\n                };\n                that.browserrec.onfinalspeechcapture=function(speechtext){\n                    that.gotRecognition(speechtext);\n                    that.update_audio('isRecording',false);\n                    that.update_audio('isRecognizing',false);\n                };\n\n                that.browserrec.oninterimspeechcapture=function(speechtext){\n                    that.gotInterimRecognition(speechtext);\n                };\n\n            //If we have a streaming token\n            }else if( this.is_streaming()) {\n                //Init streaming audio helper\n                log.debug(\"using audio helper and streaming rec\");\n                this.audiohelper =  audioHelper.clone();\n                this.audiohelper.init(this.waveHeight,this.uniqueid, this);\n\n                that.audiohelper.onError = on_error;\n                that.audiohelper.onfinalspeechcapture=function(speechtext){\n                    that.gotRecognition(speechtext);\n                    that.update_audio('isRecording',false);\n                    that.update_audio('isRecognizing',false);\n                };\n\n                that.audiohelper.oninterimspeechcapture=function(speechtext){\n                    that.gotInterimRecognition(speechtext);\n                };\n                that.audiohelper.onStop = function(){\n                    that.timer.stop();\n                };\n                //that.audiohelper.onStop = on_stopped;\n                that.audiohelper.onStream = on_gotstream;\n            //If DS rec\n            }else {\n                //set up wav for ds rec\n                log.debug(\"using ds rec\");\n                this.audiohelper =  audioHelper.clone();\n                this.audiohelper.init(this.waveHeight,this.uniqueid,this);\n\n                that.audiohelper.onError = on_error;\n                that.audiohelper.onStop = on_stopped;\n                that.audiohelper.onStream = on_gotstream;\n\n            }//end of setting up recorders\n\n            // Setting up timer.\n            this.timer = timer.clone();\n            this.timer.init(this.maxtime, handle_timer_update);\n            // Init the timer readout\n            handle_timer_update();\n        },\n\n        is_streaming: function( ){\n            return (this.streamingtoken && !this.stt_guided);\n        },\n\n        init_strings: function(){\n            var that=this;\n            str.get_strings([\n                { \"key\": \"allowmicaccess\", \"component\": 'mod_minilesson'},\n                { \"key\": \"nomicdetected\", \"component\": 'mod_minilesson'},\n                { \"key\": \"speechnotrecognized\", \"component\": 'mod_minilesson'},\n\n            ]).done(function (s) {\n                var i = 0;\n                that.strings.allowmicaccess = s[i++];\n                that.strings.nomicdetected = s[i++];\n                that.strings.speechnotrecognized = s[i++];\n            });\n        },\n\n        prepare_html: function(){\n            this.controls.recordercontainer =$('#ttrec_container_' + this.uniqueid);\n            this.controls.recorderbutton = $('#' + this.uniqueid + '_recorderdiv');\n            this.controls.timerstatus = $('.timerstatus_' + this.uniqueid);\n            this.passagehash = this.controls.recorderbutton.data('passagehash');\n            this.region=this.controls.recorderbutton.data('region');\n            this.lang=this.controls.recorderbutton.data('lang');\n            this.asrurl=this.controls.recorderbutton.data('asrurl');\n            this.maxtime=this.controls.recorderbutton.data('maxtime');\n            this.waveHeight=this.controls.recorderbutton.data('waveheight');\n        },\n\n        silence_detected: function(){\n            if(this.audio.isRecording){\n                this.toggleRecording();\n            }\n        },\n\n        update_audio: function(newprops,val){\n            if (typeof newprops === 'string') {\n                log.debug('update_audio:' + newprops + ':' + val);\n                if (this.audio[newprops] !== val) {\n                    this.audio[newprops] = val;\n                    this.audio_updated();\n                }\n            }else{\n                for (var theprop in newprops) {\n                    this.audio[theprop] = newprops[theprop];\n                    log.debug('update_audio:' + theprop + ':' + newprops[theprop]);\n                }\n                this.audio_updated();\n            }\n        },\n\n        register_events: function(){\n            var that = this;\n            this.controls.recordercontainer.click(function(){\n                that.toggleRecording();\n            });\n\n            this.audio_updated=function() {\n                //pointer\n                if (that.audio.isRecognizing) {\n                    that.show_recorder_pointer('none');\n                } else {\n                    that.show_recorder_pointer('auto');\n                }\n\n                if(that.audio.isRecognizing || that.audio.isRecording ) {\n                    this.controls.recorderbutton.removeClass('ttrec_ready');\n                    this.controls.recorderbutton.addClass('ttrec_engaged');\n                }else{\n                    this.controls.recorderbutton.removeClass('ttrec_engaged');\n                    this.controls.recorderbutton.addClass('ttrec_ready');\n                }\n\n                //div content WHEN?\n                that.controls.recorderbutton.html(that.recordBtnContent());\n            };\n\n        },\n\n        show_recorder_pointer: function(show){\n            if(show) {\n                this.controls.recorderbutton.css('pointer-events', 'none');\n            }else{\n                this.controls.recorderbutton.css('pointer-events', 'auto');\n            }\n\n        },\n\n\n        gotRecognition:function(transcript){\n            log.debug('transcript:' + transcript);\n            var message={};\n            message.type='speech';\n            message.capturedspeech = transcript;\n           //POINT\n            this.callback(message);\n        },\n\n        gotInterimRecognition:function(transcript){\n            var message={};\n            message.type='interimspeech';\n            message.capturedspeech = transcript;\n           //POINT\n            this.callback(message);\n        },\n\n        cleanWord: function(word) {\n            return word.replace(/['!\"#$%&\\\\'()\\*+,\\-\\.\\/:;<=>?@\\[\\\\\\]\\^_`{|}~']/g,\"\").toLowerCase();\n        },\n\n        recordBtnContent: function() {\n\n            if(!this.audio.isRecognizing){\n\n                if (this.audio.isRecording) {\n                    return '<i class=\"fa fa-stop\">';\n                } else {\n                    return '<i class=\"fa fa-microphone\">';\n                }\n\n            } else {\n                return '<i class=\"fa fa-spinner fa-spin\">';\n            }\n        },\n        toggleRecording: function() {\n            var that =this;\n\n            //If we are recognizing, then we want to discourage super click'ers\n            if (this.audio.isRecognizing) {\n                return;\n            }\n\n            //If we are current recording\n            if (this.audio.isRecording) {\n                that.timer.stop();\n\n                //If using Browser Rec (chrome speech)\n                if(this.usebrowserrec){\n                    that.update_audio('isRecording',false);\n                    that.update_audio('isRecognizing',true);\n                    this.browserrec.stop();\n\n                //If using DS rec\n                }else{\n                    this.update_audio('isRecognizing',true);\n                    this.audiohelper.stop();\n                }\n\n             //If we are NOT currently recording\n            } else {\n                // Run the timer\n                that.currentTime = 0;\n                that.timer.reset();\n                that.timer.start();\n                \n\n                //If using Browser Rec (chrome speech)\n                if(this.usebrowserrec){\n                    this.update_audio('isRecording',true);\n                    this.browserrec.start();\n\n                //If using DS Rec\n                }else {\n                    var newaudio = {\n                        stream: null,\n                        blob: null,\n                        dataURI: null,\n                        start: new Date(),\n                        end: null,\n                        isRecording: false,\n                        isRecognizing:false,\n                        transcript: null\n                    };\n                    this.update_audio(newaudio);\n                    this.audiohelper.start();\n                }\n            }\n        },\n\n\n        deepSpeech2: function(blob, callback) {\n            var bodyFormData = new FormData();\n            var blobname = this.uniqueid + Math.floor(Math.random() * 100) +  '.wav';\n            bodyFormData.append('audioFile', blob, blobname);\n            bodyFormData.append('scorer', this.passagehash);\n            if(this.stt_guided) {\n                bodyFormData.append('strictmode', 'false');\n            }else{\n                bodyFormData.append('strictmode', 'true');\n            }\n            //prompt is used by whisper and other transcibers down the line\n            if(this.currentPrompt!==false){\n                bodyFormData.append('prompt', this.currentPrompt);\n            }\n            bodyFormData.append('lang', this.lang);\n            bodyFormData.append('wwwroot', M.cfg.wwwroot);\n\n            var oReq = new XMLHttpRequest();\n            oReq.open(\"POST\", this.asrurl, true);\n            oReq.onUploadProgress= function(progressEvent) {};\n            oReq.onload = function(oEvent) {\n                if (oReq.status === 200) {\n                    callback(JSON.parse(oReq.response));\n                } else {\n                    callback({data: {result: \"error\"}});\n                    log.debug(oReq.error);\n                }\n            };\n            try {\n                oReq.send(bodyFormData);\n            }catch(err){\n                callback({data: {result: \"error\"}});\n                log.debug(err);\n            }\n        },\n\n    };//end of return value\n\n});"],"names":["define","$","log","notification","audioHelper","browserRec","str","timer","debug","waveHeight","audio","stream","blob","dataURI","start","end","isRecording","isRecognizing","transcript","submitting","owner","controls","uniqueid","audio_updated","maxtime","passagehash","region","asrurl","lang","browserrec","usebrowserrec","currentTime","stt_guided","currentPrompt","strings","clone","extend","this","init","opts","that","callback","streamingtoken","init_strings","prepare_html","recordercontainer","show","register_events","handle_timer_update","displaytime","fetch_display_time","timerstatus","html","seconds","initseconds","update_audio","stop","audiohelper","on_error","error","name","alert","allowmicaccess","nomicdetected","on_gotstream","newaudio","will_work_ok","is_streaming","onError","onfinalspeechcapture","speechtext","gotRecognition","oninterimspeechcapture","gotInterimRecognition","onStop","onStream","undefined","URL","createObjectURL","Date","length","Math","round","deepSpeech2","response","data","result","trim","speechnotrecognized","get_strings","done","s","i","recorderbutton","silence_detected","toggleRecording","newprops","val","theprop","click","show_recorder_pointer","removeClass","addClass","recordBtnContent","css","message","capturedspeech","cleanWord","word","replace","toLowerCase","reset","bodyFormData","FormData","blobname","floor","random","append","M","cfg","wwwroot","oReq","XMLHttpRequest","open","onUploadProgress","progressEvent","onload","oEvent","status","JSON","parse","send","err"],"mappings":"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"}