{"version":3,"file":"ttrecorder.min.js","sources":["../src/ttrecorder.js"],"sourcesContent":["define(['jquery', 'core/log','core/notification', 'mod_minilesson/ttaudiohelper','mod_minilesson/ttbrowserrec','core/str' ],\n    function ($, log, notification, audioHelper, browserRec,str) {\n    \"use strict\"; // jshint ;_;\n    /*\n    *  The TT recorder\n     */\n\n    log.debug('TT Recorder: initialising');\n\n    return {\n        waveHeight: 75,\n        audio: {\n            stream: null,\n            blob: null,\n            dataURI: null,\n            start: null,\n            end: null,\n            isRecording: false,\n            isRecognizing: false,\n            transcript: null\n        },\n        submitting: false,\n        owner: '',\n        controls: {},\n        uniqueid: null,\n        audio_updated: null,\n        maxTime: 15000,\n        passagehash: null,\n        region: null,\n        asrurl: null,\n        lang: null,\n        browserrec: null,\n        usebrowserrec: false,\n        currentTime: 0,\n        stt_guided: false,\n        currentPrompt: false,\n        strings: {},\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n        init: function(opts){\n\n            var that = this;\n\n            this.uniqueid=opts['uniqueid'];\n            this.callback=opts['callback'];\n            this.stt_guided = opts['stt_guided'] ? opts['stt_guided'] : false;\n            this.init_strings();\n            this.prepare_html();\n            this.controls.recordercontainer.show();\n            this.register_events();\n\n\n            //callbacks\n            var on_error = function(error) {\n                switch (error.name) {\n                    case 'PermissionDeniedError':\n                    case 'NotAllowedError':\n                        notification.alert(\"Error\",that.strings.allowmicaccess, \"OK\");\n                        break;\n                    case 'DevicesNotFoundError':\n                    case 'NotFoundError':\n                        notification.alert(\"Error\",that.strings.nomicdetected, \"OK\");\n                        break;\n                    default:\n                        //other errors, like from Edge can fire repeatedly so a notification is not a good idea\n                        //notification.alert(\"Error\", error.name, \"OK\");\n                        log.debug(\"Error\", error.name);\n                }\n            };\n\n            var on_stopped = function(blob) {\n                clearInterval(that.interval);\n\n                //if the blob is undefined then the user is super clicking or something\n                if(blob===undefined){\n                    return;\n                }\n\n                //if ds recc\n                var newaudio = {\n                    blob: blob,\n                    dataURI: URL.createObjectURL(blob),\n                    end: new Date(),\n                    isRecording: false,\n                    length: Math.round((that.audio.end - that.audio.start) / 1000),\n                };\n                that.update_audio(newaudio);\n\n                that.deepSpeech2(that.audio.blob, function(response){\n                    log.debug(response);\n                    if(response.data.result===\"success\" && response.data.transcript){\n                        that.gotRecognition(response.data.transcript.trim());\n                    } else {\n                        notification.alert(\"Information\",that.strings.speechnotrecognized, \"OK\");\n                    }\n                    that.update_audio('isRecognizing',false);\n                });\n\n            };\n\n            //set up events\n            var on_gotstream=  function(stream) {\n                //clear any existing interval\n                if(that.interval!==undefined){\n                    clearInterval(that.interval);\n                }\n\n                var newaudio={stream: stream, isRecording: true};\n                that.update_audio(newaudio);\n                that.currentTime = 0;\n\n                that.interval = setInterval(function() {\n                    if (that.currentTime < that.maxTime) {\n                        that.currentTime += 10;\n                    } else {\n                        that.update_audio('isRecognizing',true);\n                        // vm.isRecognizing = true;\n                        that.audiohelper.stop();\n                    }\n                }, 10);\n            };\n\n            //If browser rec (Chrome Speech Rec) (and ds is optiona)\n            if(browserRec.will_work_ok() && ! this.stt_guided){\n                //Init browserrec\n                log.debug(\"using browser rec\");\n                this.browserrec = browserRec.clone();\n                this.browserrec.init(this.lang,this.waveHeight,this.uniqueid);\n                this.usebrowserrec=true;\n\n                //set up events\n                that.browserrec.onerror = on_error;\n                that.browserrec.onend = function(){\n                        //do something here\n                };\n                that.browserrec.onstart = function(){\n                    //do something here\n                };\n                that.browserrec.onfinalspeechcapture=function(speechtext){\n                    that.gotRecognition(speechtext);\n                    that.update_audio('isRecording',false);\n                    that.update_audio('isRecognizing',false);\n                };\n\n            //If DS rec\n            }else {\n                //set up wav for ds rec\n                log.debug(\"using ds rec\");\n                this.audiohelper =  audioHelper.clone();\n                this.audiohelper.init(this.waveHeight,this.uniqueid,this);\n\n                that.audiohelper.onError = on_error;\n                that.audiohelper.onStop = on_stopped;\n                that.audiohelper.onStream = on_gotstream;\n\n            }//end of setting up recorders\n        },\n\n        init_strings: function(){\n            var that=this;\n            str.get_strings([\n                { \"key\": \"allowmicaccess\", \"component\": 'mod_minilesson'},\n                { \"key\": \"nomicdetected\", \"component\": 'mod_minilesson'},\n                { \"key\": \"speechnotrecognized\", \"component\": 'mod_minilesson'},\n\n            ]).done(function (s) {\n                var i = 0;\n                that.strings.allowmicaccess = s[i++];\n                that.strings.nomicdetected = s[i++];\n                that.strings.speechnotrecognized = s[i++];\n            });\n        },\n\n        prepare_html: function(){\n            this.controls.recordercontainer =$('#ttrec_container_' + this.uniqueid);\n            this.controls.recorderbutton = $('#' + this.uniqueid + '_recorderdiv');\n            this.passagehash = this.controls.recorderbutton.data('passagehash');\n            this.region=this.controls.recorderbutton.data('region');\n            this.lang=this.controls.recorderbutton.data('lang');\n            this.asrurl=this.controls.recorderbutton.data('asrurl');\n            this.maxTime=this.controls.recorderbutton.data('maxtime');\n            this.waveHeight=this.controls.recorderbutton.data('waveheight');\n        },\n\n        silence_detected: function(){\n            if(this.audio.isRecording){\n                this.toggleRecording();\n            }\n        },\n\n        update_audio: function(newprops,val){\n            if (typeof newprops === 'string') {\n                log.debug('update_audio:' + newprops + ':' + val);\n                if (this.audio[newprops] !== val) {\n                    this.audio[newprops] = val;\n                    this.audio_updated();\n                }\n            }else{\n                for (var theprop in newprops) {\n                    this.audio[theprop] = newprops[theprop];\n                    log.debug('update_audio:' + theprop + ':' + newprops[theprop]);\n                }\n                this.audio_updated();\n            }\n        },\n\n        register_events: function(){\n            var that = this;\n            this.controls.recordercontainer.click(function(){\n                that.toggleRecording();\n            });\n\n            this.audio_updated=function() {\n                //pointer\n                if (that.audio.isRecognizing) {\n                    that.show_recorder_pointer('none');\n                } else {\n                    that.show_recorder_pointer('auto');\n                }\n\n                if(that.audio.isRecognizing || that.audio.isRecording ) {\n                    this.controls.recorderbutton.removeClass('ttrec_ready');\n                    this.controls.recorderbutton.addClass('ttrec_engaged');\n                }else{\n                    this.controls.recorderbutton.removeClass('ttrec_engaged');\n                    this.controls.recorderbutton.addClass('ttrec_ready');\n                }\n\n                //div content WHEN?\n                that.controls.recorderbutton.html(that.recordBtnContent());\n            };\n\n        },\n\n        show_recorder_pointer: function(show){\n            if(show) {\n                this.controls.recorderbutton.css('pointer-events', 'none');\n            }else{\n                this.controls.recorderbutton.css('pointer-events', 'auto');\n            }\n\n        },\n\n\n        gotRecognition:function(transcript){\n            log.debug('transcript:' + transcript);\n            var message={};\n            message.type='speech';\n            message.capturedspeech = transcript;\n           //POINT\n            this.callback(message);\n        },\n\n        cleanWord: function(word) {\n            return word.replace(/['!\"#$%&\\\\'()\\*+,\\-\\.\\/:;<=>?@\\[\\\\\\]\\^_`{|}~']/g,\"\").toLowerCase();\n        },\n\n        recordBtnContent: function() {\n\n            if(!this.audio.isRecognizing){\n\n                if (this.audio.isRecording) {\n                    return '<i class=\"fa fa-stop\">';\n                } else {\n                    return '<i class=\"fa fa-microphone\">';\n                }\n\n            } else {\n                return '<i class=\"fa fa-spinner fa-spin\">';\n            }\n        },\n        toggleRecording: function() {\n            var that =this;\n\n            //If we are recognizing, then we want to discourage super click'ers\n            if (this.audio.isRecognizing) {\n                return;\n            }\n\n            //If we are current recording\n            if (this.audio.isRecording) {\n                //If using Browser Rec (chrome speech)\n                if(this.usebrowserrec){\n                    clearInterval(that.interval);\n                    that.update_audio('isRecording',false);\n                    that.update_audio('isRecognizing',true);\n                    this.browserrec.stop();\n\n                //If using DS rec\n                }else{\n                    this.update_audio('isRecognizing',true);\n                    this.audiohelper.stop();\n                }\n\n             //If we are NOT currently recording\n            } else {\n\n                //If using Browser Rec (chrome speech)\n                if(this.usebrowserrec){\n                    this.update_audio('isRecording',true);\n                    this.browserrec.start();\n                    that.currentTime = 0;\n                    this.interval = setInterval(function() {\n                        if (that.currentTime < that.maxTime) {\n                            that.currentTime += 10;\n                        } else {\n                            that.update_audio('isRecording',false);\n                            that.update_audio('isRecognizing',true);\n                            clearInterval(that.interval);\n                            that.browserrec.stop();\n                        }\n                    }, 10);\n\n                //If using DS Rec\n                }else {\n                    var newaudio = {\n                        stream: null,\n                        blob: null,\n                        dataURI: null,\n                        start: new Date(),\n                        end: null,\n                        isRecording: false,\n                        isRecognizing:false,\n                        transcript: null\n                    };\n                    this.update_audio(newaudio);\n                    this.audiohelper.start();\n                }\n            }\n        },\n\n\n        deepSpeech2: function(blob, callback) {\n            var bodyFormData = new FormData();\n            var blobname = this.uniqueid + Math.floor(Math.random() * 100) +  '.wav';\n            bodyFormData.append('audioFile', blob, blobname);\n            bodyFormData.append('scorer', this.passagehash);\n            if(this.stt_guided) {\n                bodyFormData.append('strictmode', 'false');\n            }else{\n                bodyFormData.append('strictmode', 'true');\n            }\n            //prompt is used by whisper and other transcibers down the line\n            if(this.currentPrompt!==false){\n                bodyFormData.append('prompt', this.currentPrompt);\n            }\n            bodyFormData.append('lang', this.lang);\n            bodyFormData.append('wwwroot', M.cfg.wwwroot);\n\n            var oReq = new XMLHttpRequest();\n            oReq.open(\"POST\", this.asrurl, true);\n            oReq.onUploadProgress= function(progressEvent) {};\n            oReq.onload = function(oEvent) {\n                if (oReq.status === 200) {\n                    callback(JSON.parse(oReq.response));\n                } else {\n                    callback({data: {result: \"error\"}});\n                    log.debug(oReq.error);\n                }\n            };\n            try {\n                oReq.send(bodyFormData);\n            }catch(err){\n                callback({data: {result: \"error\"}});\n                log.debug(err);\n            }\n        },\n\n    };//end of return value\n\n});"],"names":["define","$","log","notification","audioHelper","browserRec","str","debug","waveHeight","audio","stream","blob","dataURI","start","end","isRecording","isRecognizing","transcript","submitting","owner","controls","uniqueid","audio_updated","maxTime","passagehash","region","asrurl","lang","browserrec","usebrowserrec","currentTime","stt_guided","currentPrompt","strings","clone","extend","this","init","opts","that","callback","init_strings","prepare_html","recordercontainer","show","register_events","on_error","error","name","alert","allowmicaccess","nomicdetected","will_work_ok","onerror","onend","onstart","onfinalspeechcapture","speechtext","gotRecognition","update_audio","audiohelper","onError","onStop","clearInterval","interval","undefined","newaudio","URL","createObjectURL","Date","length","Math","round","deepSpeech2","response","data","result","trim","speechnotrecognized","onStream","setInterval","stop","get_strings","done","s","i","recorderbutton","silence_detected","toggleRecording","newprops","val","theprop","click","show_recorder_pointer","removeClass","addClass","html","recordBtnContent","css","message","capturedspeech","cleanWord","word","replace","toLowerCase","bodyFormData","FormData","blobname","floor","random","append","M","cfg","wwwroot","oReq","XMLHttpRequest","open","onUploadProgress","progressEvent","onload","oEvent","status","JSON","parse","send","err"],"mappings":"AAAAA,mCAAO,CAAC,SAAU,WAAW,oBAAqB,+BAA+B,8BAA8B,aAC3G,SAAUC,EAAGC,IAAKC,aAAcC,YAAaC,WAAWC,YAMxDJ,IAAIK,MAAM,6BAEH,CACHC,WAAY,GACZC,MAAO,CACHC,OAAQ,KACRC,KAAM,KACNC,QAAS,KACTC,MAAO,KACPC,IAAK,KACLC,aAAa,EACbC,eAAe,EACfC,WAAY,MAEhBC,YAAY,EACZC,MAAO,GACPC,SAAU,GACVC,SAAU,KACVC,cAAe,KACfC,QAAS,KACTC,YAAa,KACbC,OAAQ,KACRC,OAAQ,KACRC,KAAM,KACNC,WAAY,KACZC,eAAe,EACfC,YAAa,EACbC,YAAY,EACZC,eAAe,EACfC,QAAS,GAGTC,MAAO,kBACIjC,EAAEkC,QAAO,EAAM,GAAIC,OAG9BC,KAAM,SAASC,UAEPC,KAAOH,UAENf,SAASiB,KAAI,cACbE,SAASF,KAAI,cACbP,aAAaO,KAAI,YAAiBA,KAAI,gBACtCG,oBACAC,oBACAtB,SAASuB,kBAAkBC,YAC3BC,sBAIDC,SAAW,SAASC,cACZA,MAAMC,UACL,4BACA,kBACD7C,aAAa8C,MAAM,QAAQV,KAAKN,QAAQiB,eAAgB,gBAEvD,2BACA,gBACD/C,aAAa8C,MAAM,QAAQV,KAAKN,QAAQkB,cAAe,oBAKvDjD,IAAIK,MAAM,QAASwC,MAAMC,QAyDlC3C,WAAW+C,iBAAoBhB,KAAKL,YAEnC7B,IAAIK,MAAM,0BACLqB,WAAavB,WAAW6B,aACxBN,WAAWS,KAAKD,KAAKT,KAAKS,KAAK5B,WAAW4B,KAAKf,eAC/CQ,eAAc,EAGnBU,KAAKX,WAAWyB,QAAUP,SAC1BP,KAAKX,WAAW0B,MAAQ,aAGxBf,KAAKX,WAAW2B,QAAU,aAG1BhB,KAAKX,WAAW4B,qBAAqB,SAASC,YAC1ClB,KAAKmB,eAAeD,YACpBlB,KAAKoB,aAAa,eAAc,GAChCpB,KAAKoB,aAAa,iBAAgB,MAMtCzD,IAAIK,MAAM,qBACLqD,YAAexD,YAAY8B,aAC3B0B,YAAYvB,KAAKD,KAAK5B,WAAW4B,KAAKf,SAASe,MAEpDG,KAAKqB,YAAYC,QAAUf,SAC3BP,KAAKqB,YAAYE,OAlFJ,SAASnD,SACtBoD,cAAcxB,KAAKyB,eAGTC,IAAPtD,UAKCuD,SAAW,CACXvD,KAAMA,KACNC,QAASuD,IAAIC,gBAAgBzD,MAC7BG,IAAK,IAAIuD,KACTtD,aAAa,EACbuD,OAAQC,KAAKC,OAAOjC,KAAK9B,MAAMK,IAAMyB,KAAK9B,MAAMI,OAAS,MAE7D0B,KAAKoB,aAAaO,UAElB3B,KAAKkC,YAAYlC,KAAK9B,MAAME,MAAM,SAAS+D,UACvCxE,IAAIK,MAAMmE,UACgB,YAAvBA,SAASC,KAAKC,QAAsBF,SAASC,KAAK1D,WACjDsB,KAAKmB,eAAegB,SAASC,KAAK1D,WAAW4D,QAE7C1E,aAAa8C,MAAM,cAAcV,KAAKN,QAAQ6C,oBAAqB,MAEvEvC,KAAKoB,aAAa,iBAAgB,QA0DtCpB,KAAKqB,YAAYmB,SApDF,SAASrE,aAELuD,IAAhB1B,KAAKyB,UACJD,cAAcxB,KAAKyB,cAGnBE,SAAS,CAACxD,OAAQA,OAAQK,aAAa,GAC3CwB,KAAKoB,aAAaO,UAClB3B,KAAKT,YAAc,EAEnBS,KAAKyB,SAAWgB,aAAY,WACpBzC,KAAKT,YAAcS,KAAKhB,QACxBgB,KAAKT,aAAe,IAEpBS,KAAKoB,aAAa,iBAAgB,GAElCpB,KAAKqB,YAAYqB,UAEtB,OAuCXxC,aAAc,eACNF,KAAKH,KACT9B,IAAI4E,YAAY,CACZ,KAAS,2BAA+B,kBACxC,KAAS,0BAA8B,kBACvC,KAAS,gCAAoC,oBAE9CC,MAAK,SAAUC,OACVC,EAAI,EACR9C,KAAKN,QAAQiB,eAAiBkC,EAAEC,KAChC9C,KAAKN,QAAQkB,cAAgBiC,EAAEC,KAC/B9C,KAAKN,QAAQ6C,oBAAsBM,EAAEC,SAI7C3C,aAAc,gBACLtB,SAASuB,kBAAmB1C,EAAE,oBAAsBmC,KAAKf,eACzDD,SAASkE,eAAiBrF,EAAE,IAAMmC,KAAKf,SAAW,qBAClDG,YAAcY,KAAKhB,SAASkE,eAAeX,KAAK,oBAChDlD,OAAOW,KAAKhB,SAASkE,eAAeX,KAAK,eACzChD,KAAKS,KAAKhB,SAASkE,eAAeX,KAAK,aACvCjD,OAAOU,KAAKhB,SAASkE,eAAeX,KAAK,eACzCpD,QAAQa,KAAKhB,SAASkE,eAAeX,KAAK,gBAC1CnE,WAAW4B,KAAKhB,SAASkE,eAAeX,KAAK,eAGtDY,iBAAkB,WACXnD,KAAK3B,MAAMM,kBACLyE,mBAIb7B,aAAc,SAAS8B,SAASC,QACJ,iBAAbD,SACPvF,IAAIK,MAAM,gBAAkBkF,SAAW,IAAMC,KACzCtD,KAAK3B,MAAMgF,YAAcC,WACpBjF,MAAMgF,UAAYC,SAClBpE,qBAER,KACI,IAAIqE,WAAWF,cACXhF,MAAMkF,SAAWF,SAASE,SAC/BzF,IAAIK,MAAM,gBAAkBoF,QAAU,IAAMF,SAASE,eAEpDrE,kBAIbuB,gBAAiB,eACTN,KAAOH,UACNhB,SAASuB,kBAAkBiD,OAAM,WAClCrD,KAAKiD,0BAGJlE,cAAc,WAEXiB,KAAK9B,MAAMO,cACXuB,KAAKsD,sBAAsB,QAE3BtD,KAAKsD,sBAAsB,QAG5BtD,KAAK9B,MAAMO,eAAiBuB,KAAK9B,MAAMM,kBACjCK,SAASkE,eAAeQ,YAAY,oBACpC1E,SAASkE,eAAeS,SAAS,wBAEjC3E,SAASkE,eAAeQ,YAAY,sBACpC1E,SAASkE,eAAeS,SAAS,gBAI1CxD,KAAKnB,SAASkE,eAAeU,KAAKzD,KAAK0D,sBAK/CJ,sBAAuB,SAASjD,MACzBA,UACMxB,SAASkE,eAAeY,IAAI,iBAAkB,aAE9C9E,SAASkE,eAAeY,IAAI,iBAAkB,SAM3DxC,eAAe,SAASzC,YACpBf,IAAIK,MAAM,cAAgBU,gBACtBkF,QAAQ,CACZA,KAAa,UACbA,QAAQC,eAAiBnF,gBAEpBuB,SAAS2D,UAGlBE,UAAW,SAASC,aACTA,KAAKC,QAAQ,kDAAkD,IAAIC,eAG9EP,iBAAkB,kBAEV7D,KAAK3B,MAAMO,cASJ,oCAPHoB,KAAK3B,MAAMM,YACJ,yBAEA,gCAOnByE,gBAAiB,eACTjD,KAAMH,SAGNA,KAAK3B,MAAMO,iBAKXoB,KAAK3B,MAAMM,YAERqB,KAAKP,eACJkC,cAAcxB,KAAKyB,UACnBzB,KAAKoB,aAAa,eAAc,GAChCpB,KAAKoB,aAAa,iBAAgB,QAC7B/B,WAAWqD,cAIXtB,aAAa,iBAAgB,QAC7BC,YAAYqB,gBAOlB7C,KAAKP,mBACC8B,aAAa,eAAc,QAC3B/B,WAAWf,QAChB0B,KAAKT,YAAc,OACdkC,SAAWgB,aAAY,WACpBzC,KAAKT,YAAcS,KAAKhB,QACxBgB,KAAKT,aAAe,IAEpBS,KAAKoB,aAAa,eAAc,GAChCpB,KAAKoB,aAAa,iBAAgB,GAClCI,cAAcxB,KAAKyB,UACnBzB,KAAKX,WAAWqD,UAErB,QAGD,KACEf,SAAW,CACXxD,OAAQ,KACRC,KAAM,KACNC,QAAS,KACTC,MAAO,IAAIwD,KACXvD,IAAK,KACLC,aAAa,EACbC,eAAc,EACdC,WAAY,WAEX0C,aAAaO,eACbN,YAAY/C,UAM7B4D,YAAa,SAAS9D,KAAM6B,cACpBiE,aAAe,IAAIC,SACnBC,SAAWvE,KAAKf,SAAWkD,KAAKqC,MAAsB,IAAhBrC,KAAKsC,UAAmB,OAClEJ,aAAaK,OAAO,YAAanG,KAAMgG,UACvCF,aAAaK,OAAO,SAAU1E,KAAKZ,aAChCY,KAAKL,WACJ0E,aAAaK,OAAO,aAAc,SAElCL,aAAaK,OAAO,aAAc,SAGd,IAArB1E,KAAKJ,eACJyE,aAAaK,OAAO,SAAU1E,KAAKJ,eAEvCyE,aAAaK,OAAO,OAAQ1E,KAAKT,MACjC8E,aAAaK,OAAO,UAAWC,EAAEC,IAAIC,aAEjCC,KAAO,IAAIC,eACfD,KAAKE,KAAK,OAAQhF,KAAKV,QAAQ,GAC/BwF,KAAKG,iBAAkB,SAASC,iBAChCJ,KAAKK,OAAS,SAASC,QACC,MAAhBN,KAAKO,OACLjF,SAASkF,KAAKC,MAAMT,KAAKxC,YAEzBlC,SAAS,CAACmC,KAAM,CAACC,OAAQ,WACzB1E,IAAIK,MAAM2G,KAAKnE,aAInBmE,KAAKU,KAAKnB,cACb,MAAMoB,KACHrF,SAAS,CAACmC,KAAM,CAACC,OAAQ,WACzB1E,IAAIK,MAAMsH"}