{"version":3,"file":"mediaprompts.min.js","sources":["../src/mediaprompts.js"],"sourcesContent":["define(['jquery','core/log','core/notification','core/str'], function($,log,notification,str) {\n    \"use strict\"; // jshint ;_;\n\n/*\nThis file contains functions for media prompts on the mform\n */\n\n    log.debug('MiniLesson mediaprompts: initialising');\n\n    return{\n\n        controls:{},\n        strings: {},\n\n        //init the media prompts\n        init: function(opts){\n            var that = this;\n            this.init_strings();\n            this.init_controls();\n            this.register_events();\n\n            //init the visibility of the fieldsets\n            $.each(opts, function(key, value){\n                log.debug('key: '+key+' value: '+value);\n                if(value===1){\n                    var thefieldset=$('#ml_mediaprompt_panel_'+key);\n                    thefieldset.show();\n                    //disable the option in the dropdown\n                    that.controls.select.find('option[value=\"' + key + '\"]').prop('disabled', true);\n                }\n            });\n\n            //unselect the media prompts thingy\n            that.controls.select.find('option[value=\"0\"]').prop('disabled', true);\n            that.controls.select.prop('selectedIndex',0);\n        },\n\n         // Set up strings\n        init_strings: function(){\n            var that = this;  \n            str.get_strings([\n                { \"key\": \"reallydeletemediaprompt\", \"component\": 'mod_minilesson' },\n                { \"key\": \"deletemediaprompt\", \"component\": 'mod_minilesson' },\n                { \"key\": \"delete\", \"component\": 'core' },\n                { \"key\": \"deletefilesfirst\", \"component\": 'mod_minilesson' },\n                { \"key\": \"cleartextfirst\", \"component\": 'mod_minilesson' },\n            ]).done(function (s) {\n                var i = 0;\n                that.strings.reallydeletemediaprompt = s[i++];\n                that.strings.deletemediaprompt = s[i++];\n                that.strings.delete = s[i++];\n                that.strings.deletefilesfirst = s[i++];\n                that.strings.cleartextfirst = s[i++];\n            });\n        },\n\n        //get handles on all the page elements we will refer to\n        init_controls: function(){\n            //the media prompt select dropdown\n            this.controls.select = $('#id_mediaprompts');\n            this.controls.selectcontainer = $('#fitem_id_mediaprompts');\n        },\n\n        //register events on select and fieldsets etc\n        register_events: function(){\n            var that=this;\n            log.debug(\"register events\");\n            //on select change add the fieldset\n            this.controls.select.on('change',function(){\n                log.debug(\"changed\");\n                var mediaprompt = $(this).val();\n                var thefieldset = $('#ml_mediaprompt_panel_' + mediaprompt);\n              //tinymce breaks if we move it arround the DOM .. so we dont insertAfter for textarea\n                if(mediaprompt !== 'addtextarea') {\n                    thefieldset.insertAfter(that.controls.selectcontainer);\n                }\n                thefieldset.fadeIn(500); //thefieldset.show();\n              \n                //disable the option in the dropdown\n                that.controls.select.find('option[value=\"' + mediaprompt + '\"]').prop('disabled', true);\n                //deselect all options\n                that.controls.select.prop('selectedIndex',0);\n            });\n\n            //close the fieldset on button click\n            var fieldset_close = $('.ml_mediaprompt_panel button.close');\n            fieldset_close.on('click',function(){\n                var thefieldset = $(this).closest('fieldset');\n                var keyfieldname = thefieldset.data('keyfield');\n                var mediaprompt = thefieldset.data('mediaprompt');\n                //fetch the input of name keyfield nested under thefieldset\n                switch (keyfieldname) {\n                    case 'itemttsdialog':\n                    case 'itemttspassage':\n                    case 'itemtts':\n                        var keyfield = thefieldset.find(\"textarea[name='\"+keyfieldname +\"']\");\n                        break;\n                    case 'itemaudiostory':\n                        var keyfield = thefieldset.find(\"textarea[name='itemaudiofname[text]']\");\n                        break;\n                    default:\n                        var keyfield = thefieldset.find(\"input[name='\"+keyfieldname +\"']\");\n                }\n                \n                //fetch the legend text\n                var legend = thefieldset.find(\"legend:first\").text();\n\n                //function to delete the fieldset .. we may seek confirmation first, or not, depending on if the keyfield has data\n                var dodelete=function(){\n                    //clear the data\n                    if(keyfield){\n                        keyfield.val('');\n                    }\n                    //hide the fieldset\n                    thefieldset.hide();\n                    //re-enable the select option\n                    var mediaprompt = thefieldset.data('mediaprompt');\n                    that.controls.select.find('option[value=\"' + mediaprompt + '\"]').prop('disabled', false);\n                }\n                \n                switch(keyfieldname){\n                    case 'itemmedia':\n                        //item media is inaccessible, and hard to clear data so we confirm with a specific message\n                        notification.confirm(that.strings.deletemediaprompt, \n                                that.strings.deletefilesfirst + ' '+ that.strings.reallydeletemediaprompt + legend + '?',\n                                that.strings.delete,'',\n                                dodelete);\n                        break;\n                    case 'itemaudiostory':\n                        //item media is inaccessible, and hard to clear data so we confirm with a specific message\n                        notification.confirm(that.strings.deletemediaprompt, \n                                that.strings.deletefilesfirst + ' '+ that.strings.reallydeletemediaprompt + legend + '?',\n                                that.strings.delete,'',\n                                dodelete);\n                        break;    \n                    case 'itemtextarea':\n                        //item text area is hard to check, and hard to clear data so we confirm with a specific message\n                        notification.confirm(that.strings.deletemediaprompt, \n                            that.strings.cleartextfirst + ' '+  that.strings.reallydeletemediaprompt + legend + '?',\n                            that.strings.delete,'',\n                            dodelete);\n                        break;    \n                    default:\n                        //if we have data confirm deletion, then delete\n                        if(keyfield.length>0 && keyfield.val()!=''){\n                            notification.confirm(that.strings.deletemediaprompt, that.strings.reallydeletemediaprompt + legend + '?',\n                                that.strings.delete,'',dodelete);\n                        }else{\n                            dodelete();\n                        }\n                }\n                \n            });\n        }\n\n    };//end of return value\n});"],"names":["define","$","log","notification","str","debug","controls","strings","init","opts","that","this","init_strings","init_controls","register_events","each","key","value","show","select","find","prop","get_strings","done","s","i","reallydeletemediaprompt","deletemediaprompt","delete","deletefilesfirst","cleartextfirst","selectcontainer","on","mediaprompt","val","thefieldset","insertAfter","fadeIn","closest","keyfieldname","data","keyfield","legend","text","dodelete","hide","confirm","length"],"mappings":"AAAAA,qCAAO,CAAC,SAAS,WAAW,oBAAoB,aAAa,SAASC,EAAEC,IAAIC,aAAaC,YAOrFF,IAAIG,MAAM,yCAEJ,CAEFC,SAAS,GACTC,QAAS,GAGTC,KAAM,SAASC,UACPC,KAAOC,UACNC,oBACAC,qBACAC,kBAGLb,EAAEc,KAAKN,MAAM,SAASO,IAAKC,QACvBf,IAAIG,MAAM,QAAQW,IAAI,WAAWC,OACtB,IAARA,SACiBhB,EAAE,yBAAyBe,KAC/BE,OAEZR,KAAKJ,SAASa,OAAOC,KAAK,iBAAmBJ,IAAM,MAAMK,KAAK,YAAY,OAKlFX,KAAKJ,SAASa,OAAOC,KAAK,qBAAqBC,KAAK,YAAY,GAChEX,KAAKJ,SAASa,OAAOE,KAAK,gBAAgB,IAI9CT,aAAc,eACNF,KAAOC,KACXP,IAAIkB,YAAY,CACZ,KAAS,oCAAwC,kBACjD,KAAS,8BAAkC,kBAC3C,KAAS,mBAAuB,QAChC,KAAS,6BAAiC,kBAC1C,KAAS,2BAA+B,oBACzCC,MAAK,SAAUC,OACVC,EAAI,EACRf,KAAKH,QAAQmB,wBAA0BF,EAAEC,KACzCf,KAAKH,QAAQoB,kBAAoBH,EAAEC,KACnCf,KAAKH,QAAQqB,OAASJ,EAAEC,KACxBf,KAAKH,QAAQsB,iBAAmBL,EAAEC,KAClCf,KAAKH,QAAQuB,eAAiBN,EAAEC,SAKxCZ,cAAe,gBAENP,SAASa,OAASlB,EAAE,yBACpBK,SAASyB,gBAAkB9B,EAAE,2BAItCa,gBAAiB,eACTJ,KAAKC,KACTT,IAAIG,MAAM,wBAELC,SAASa,OAAOa,GAAG,UAAS,WAC7B9B,IAAIG,MAAM,eACN4B,YAAchC,EAAEU,MAAMuB,MACtBC,YAAclC,EAAE,yBAA2BgC,aAE5B,gBAAhBA,aACCE,YAAYC,YAAY1B,KAAKJ,SAASyB,iBAE1CI,YAAYE,OAAO,KAGnB3B,KAAKJ,SAASa,OAAOC,KAAK,iBAAmBa,YAAc,MAAMZ,KAAK,YAAY,GAElFX,KAAKJ,SAASa,OAAOE,KAAK,gBAAgB,MAIzBpB,EAAE,sCACR+B,GAAG,SAAQ,eAClBG,YAAclC,EAAEU,MAAM2B,QAAQ,YAC9BC,aAAeJ,YAAYK,KAAK,YAClBL,YAAYK,KAAK,sBAE3BD,kBACC,oBACA,qBACA,cACGE,SAAWN,YAAYf,KAAK,kBAAkBmB,aAAc,gBAE/D,iBACGE,SAAWN,YAAYf,KAAK,uDAG5BqB,SAAWN,YAAYf,KAAK,eAAemB,aAAc,UAIjEG,OAASP,YAAYf,KAAK,gBAAgBuB,OAG1CC,SAAS,WAENH,UACCA,SAASP,IAAI,IAGjBC,YAAYU,WAERZ,YAAcE,YAAYK,KAAK,eACnC9B,KAAKJ,SAASa,OAAOC,KAAK,iBAAmBa,YAAc,MAAMZ,KAAK,YAAY,WAG/EkB,kBACE,gBAOA,iBAEDpC,aAAa2C,QAAQpC,KAAKH,QAAQoB,kBAC1BjB,KAAKH,QAAQsB,iBAAmB,IAAKnB,KAAKH,QAAQmB,wBAA0BgB,OAAS,IACrFhC,KAAKH,QAAQqB,OAAO,GACpBgB,oBAEP,eAEDzC,aAAa2C,QAAQpC,KAAKH,QAAQoB,kBAC9BjB,KAAKH,QAAQuB,eAAiB,IAAMpB,KAAKH,QAAQmB,wBAA0BgB,OAAS,IACpFhC,KAAKH,QAAQqB,OAAO,GACpBgB,wBAIDH,SAASM,OAAO,GAAqB,IAAhBN,SAASP,MAC7B/B,aAAa2C,QAAQpC,KAAKH,QAAQoB,kBAAmBjB,KAAKH,QAAQmB,wBAA0BgB,OAAS,IACjGhC,KAAKH,QAAQqB,OAAO,GAAGgB,UAE3BA"}